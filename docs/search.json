[
  {
    "objectID": "posts/2025-05-04-decision-trees-basics/1_basic_decision_tree_for_classification.html",
    "href": "posts/2025-05-04-decision-trees-basics/1_basic_decision_tree_for_classification.html",
    "title": "Decision Trees Made Easy",
    "section": "",
    "text": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.datasets import load_iris\nfrom pprint import pprint\n\nIn this notebook, we will be building a basic decision tree to learn and familiarize ourselves with various governing foundational concepts about decision trees. For this, we will use a relatively simple dataframe containing purely numerical features for the task of classification. As our understanding about decision trees expands, we will extend the concepts learned here to handle complex and challenging dataframes (such as those with missing values, with categorical features, etc.)\nLet’s load the popular iris data. (We are using sklearn only and only to load a popular benchmark dataset. We will not use it to build decision trees. Instead, we will build our decision trees entirely from scratch in using numpy)\n\n# load the data\niris_data = load_iris()\nX = iris_data.data\ny = iris_data.target\n\n# Here X and y are numpy arrays. We do a bit of processing to convert X and y into pandas dataframe for readability\nfeature_names = iris_data.feature_names\ntarget_names = iris_data.target_names\n\ndf = pd.DataFrame(X, columns=feature_names) # start df with features i.e. X\ndf['target'] = y                            # add target column to df i.e. y\n\ndf['target'] = df['target'].apply(lambda x: target_names[x]) # Optional: convert integer labels to actual class names\ndf.head()\n\n\n\n\n\n\n\n\nsepal length (cm)\nsepal width (cm)\npetal length (cm)\npetal width (cm)\ntarget\n\n\n\n\n0\n5.1\n3.5\n1.4\n0.2\nsetosa\n\n\n1\n4.9\n3.0\n1.4\n0.2\nsetosa\n\n\n2\n4.7\n3.2\n1.3\n0.2\nsetosa\n\n\n3\n4.6\n3.1\n1.5\n0.2\nsetosa\n\n\n4\n5.0\n3.6\n1.4\n0.2\nsetosa\n\n\n\n\n\n\n\nNow, we will build a decision tree which when given 4 numerical feature values will classify the plant species as one of 'setosa', 'versicolor', 'virginica'.\nFor this, we first need to split the data into train and val sets. Then we will use the train set to build the model and test it on the val set.\n\ndef train_test_split_df(df, test_size=0.2, random_state=42):\n    \"\"\" splits the data into train and test sets\"\"\"\n\n    if isinstance(test_size, float) and test_size&lt;1:\n        test_size = int(len(df)*test_size)\n    elif isinstance(test_size, int):\n        pass\n    else:\n        raise ValueError(\"test size must be a float/ int\")\n    \n    shuffled_indices = np.random.permutation(len(df))\n    test_indices = shuffled_indices[:test_size]\n    test_df = df.iloc[test_indices]\n    train_df = df.drop(test_indices)\n    return train_df, test_df\n\n\ntrain_df, test_df = train_test_split_df(df, test_size=20, random_state=0)\nprint(f'Train size: {len(train_df)}, Test size: {len(test_df)}')\ntrain_df.head()\n\nTrain size: 130, Test size: 20\n\n\n\n\n\n\n\n\n\nsepal length (cm)\nsepal width (cm)\npetal length (cm)\npetal width (cm)\ntarget\n\n\n\n\n1\n4.9\n3.0\n1.4\n0.2\nsetosa\n\n\n2\n4.7\n3.2\n1.3\n0.2\nsetosa\n\n\n3\n4.6\n3.1\n1.5\n0.2\nsetosa\n\n\n4\n5.0\n3.6\n1.4\n0.2\nsetosa\n\n\n5\n5.4\n3.9\n1.7\n0.4\nsetosa\n\n\n\n\n\n\n\nTo build a decision tree, the dataset is split into 2 subsets using a condition - where one subset satisfies the condition and another does not.\nThe condition is nothing but thresholding of one the features. (For example, condition: sepal lenghth &lt;= 4.4 cms will split the dataset into 2 subsets - one where sepal lenghth is less than 4.4 cms and another where it is not)\nThe main question here is how we decide which feature to use and what threshold to pick?\nAnswer: Pick the feature which results in most information gain.\nNow to understand the above term information gain, we need to first familiarize ourselves with few more concepts.\n\nPurity - Measure of homogenity of a subset. For ex: if a data subset contains only red balls - it is pure. But if it contains even a single green ball - it is now impure. The extent of impurity is measured using entropy.\nEntropy - calculated as:\n  H(X) = — Σ (pi * log2 pi)\n\nwhere; X = Total number of samples, and, pi is the probability of class i\nPure dataset: - One which contains elements belonging to single class. For e.g.: All red balls - For a pure dataset: entropy = 0\nMost Impure dataset: - One which contains elements distributed equally among other classes. For e.g.: 10 blue balls and 10 red balls - For the most impure subset: entropy = 1\n\nInformation Gain - If we split the dataset, then the entropy (i.e. degree of impurity) in the children subsets should ideally be lower. This reduction in entropy is the information gain.\n Information Gain = entropy (parent) — [average entropy of ( children)]\n\nNow, based on the above concepts, we will split the dataset, using the feature that results in highest information gain.\nAnd how we do this?\nAnswer: Brute Force. Yes, Brute Force… We go through all the feature columns one at a time and for each feature column, we go through all of their possible values one at a time, splitting the data into 2 children nodes, calculating information gain, storing it and then pick one which gave us the highest information gain.\nWe repeat this process, either a fixed number of times or until the entropy of children becomes zero (i.e. children subsets become pure) and then we stop.\nLet’s see this step by step…\n\n# let's check the purity of our current data\n\ndef check_purity(df: pd.DataFrame) -&gt; bool:\n    \"\"\"\n    Check if data is pure.\n    \"\"\"\n    y = df.iloc[:, -1]\n    return len(y.unique())==1\n\nprint('Is the train data pure? -&gt;', check_purity(train_df))\n\nIs the train data pure? -&gt; False\n\n\nAs it is not pure. Let’s see how much impure it is by calculating entropy.\n\ndef calculate_entropy(df: pd.DataFrame) -&gt; float:\n    \"\"\"\n    Calculates the entropy of the data. Entropy =  — Σ (pi * log2 pi)\n    \"\"\"\n    y = df.iloc[:, -1]\n    values, counts = np.unique(y, return_counts=True)\n    probs = counts/len(y)\n    entropy = -np.sum(probs*np.log2(probs))\n    return entropy\n\nparent_entropy = calculate_entropy(train_df)\nprint(f\"Entropy of parent node: {parent_entropy}\")\n\nEntropy of parent node: 1.5848773505329046\n\n\nNow, let’s see the details of how we will split the data. The code below should be very straightforward and intuitive to understand.\nAs mentioned, now (1) we will go through all features and their all possible values to split the dataset and then (2)check the information gain. SO, let’s first create the function called get_potential_splits that does (1) for us and then we will implement determine_best_split that will do (2) for us.\n\n# Function (1)\ndef get_potential_splits(df: pd.DataFrame) -&gt; dict:\n    \"\"\"\n    Get all the possible potential splits of the data.\n    \"\"\"\n    potential_splits = {}\n    _, n_columns = df.shape\n    for column_index in range(n_columns - 1): # -1 to skip the target column\n        values = df.iloc[:, column_index]\n        unique_values = np.unique(values)\n        potential_splits[column_index] = [] # initialize a list for storing possible split values per column aka feature\n\n        # using mid-points between 2 consecutive unique values to split the data\n        for i in range(len(unique_values)-1):\n            split_value = (unique_values[i]+unique_values[i+1])/2\n            potential_splits[column_index].append(split_value)\n        \n    return potential_splits\n\n# let's see the potential splits for our data\npotential_splits = get_potential_splits(train_df)\nprint(\"Potential splits for each feature column:\")\nprint(potential_splits)\n\nPotential splits for each feature column:\n{0: [4.35, 4.45, 4.55, 4.65, 4.75, 4.85, 4.95, 5.05, 5.15, 5.25, 5.35, 5.45, 5.55, 5.65, 5.75, 5.85, 5.95, 6.05, 6.15, 6.25, 6.35, 6.45, 6.55, 6.65, 6.75, 6.85, 7.0, 7.15, 7.25, 7.35, 7.5, 7.65], 1: [2.1, 2.25, 2.3499999999999996, 2.45, 2.55, 2.6500000000000004, 2.75, 2.8499999999999996, 2.95, 3.05, 3.1500000000000004, 3.25, 3.3499999999999996, 3.45, 3.55, 3.6500000000000004, 3.75, 3.8499999999999996, 4.0, 4.15], 2: [1.05, 1.2000000000000002, 1.35, 1.45, 1.55, 1.65, 1.7999999999999998, 2.45, 3.15, 3.4, 3.55, 3.6500000000000004, 3.75, 3.8499999999999996, 3.95, 4.05, 4.15, 4.25, 4.35, 4.45, 4.55, 4.65, 4.75, 4.85, 4.95, 5.05, 5.15, 5.25, 5.35, 5.45, 5.55, 5.65, 5.75, 5.85, 5.95, 6.05, 6.199999999999999, 6.449999999999999, 6.65, 6.800000000000001], 3: [0.15000000000000002, 0.25, 0.35, 0.45, 0.55, 0.8, 1.05, 1.15, 1.25, 1.35, 1.45, 1.55, 1.65, 1.75, 1.85, 1.95, 2.05, 2.1500000000000004, 2.25, 2.3499999999999996, 2.45]}\n\n\n0: above is first column i.e. sepal length (cms), 1: is second column and so on.\nNow, we have find all the possible ways to split the data (mentioned as (1))\nNow, let’s see how to get the best split by developing determine_best_split (mentioned as (2)). For this, first create a function (2-1) that will split the data into 2 parts given a feature and its value. Then, we will use this function to split the data for all possible combinations, calculate information gain and pick the one that gives highest information gain (2-2).\n\n# Function (2-1)\ndef split_data(df: pd.DataFrame, split_column: int, split_value: float) -&gt; tuple[pd.DataFrame, pd.DataFrame]:\n    \"\"\" \n    SPlit the data into 2 subsets based on split column and split value.\n        split_column (int) : column index\n    \"\"\"\n    split_column_values = df.iloc[:, split_column]\n    left_split = df[split_column_values &lt;= split_value]\n    right_split = df[split_column_values &gt; split_value]\n\n    return left_split, right_split\n\n# Functions (2-2)\ndef determine_best_split(df: pd.DataFrame, potential_splits: dict) -&gt; tuple[int, float]:\n    \"\"\"\n    Determine the best split column and its value.\n    \"\"\"\n    best_split_column = None\n    best_split_value = None\n    best_info_gain = 0\n    parent_entropy = calculate_entropy(df) # Parent Entropy\n    \n    # (Recursive)Iterate over all possible combinations of columns and their split values\n    for column_index in potential_splits.keys():\n        for split_value in potential_splits[column_index]:\n            left_split, right_split = split_data(df, column_index, split_value)\n            average_children_entropy = calculate_average_children_entropy(left_split, right_split)\n            information_gain = parent_entropy - average_children_entropy\n            # print(\"Column:\", iris_data.feature_names[column_index], \"Split value:\", split_value, \"Information gain:\", information_gain)\n            \n            # pick the one with highest information gain\n            if information_gain &gt; best_info_gain:\n                best_info_gain = information_gain\n                best_split_column = column_index\n                best_split_value = split_value\n        \n    #print(\"Best Information Gain:\", best_info_gain)\n    return best_split_column, best_split_value\n\ndef calculate_average_children_entropy(left_split: pd.DataFrame, right_split: pd.DataFrame) -&gt; float:\n    \"\"\"\n    Calculates the overall entropy of the data after splitting i.e. average entropy of the children nodes\n    overall entropy = weighted average of children entropies = Σ (p_c * E(c))\n    \"\"\"\n    n = len(left_split) + len(right_split) # total size of data\n    w_left = len(left_split)/ n            # relative weight of left data\n    w_right = len(right_split)/ n          # relative weight of right data\n    overall_entropy = w_left * calculate_entropy(left_split) + w_right * calculate_entropy(right_split)\n    return overall_entropy\n\nAbove 2 functions should be straightforward to understand. Only new concept is: to get entropy of data after split - we calculate it as average weighted entropy of children nodes.\n(uncomment the print the statement in determine_best_split, if interested to see information gain for all possible splits)\n\nbest_split_column, best_split_value = determine_best_split(train_df, potential_splits)\nprint(\"Best split column:\", iris_data.feature_names[best_split_column], \"with value:\", best_split_value)\n\nBest split column: petal length (cm) with value: 2.45\n\n\nNote: The result one gets could be different if the seed/ random_state in train_val_split_df is changed (because it will change the underlying training data i.e. train_df)\nThe result I got: Best split column: petal length (cm) with value: 2.45\nNow, let’s create the splits\n\nleft_branch = train_df[train_df.iloc[:, best_split_column] &lt;= best_split_value] # branch that satisfies the condition: petal length (cm) &lt;= 2.45\nright_branch = train_df[train_df.iloc[:, best_split_column] &gt; best_split_value]\n\n# # or, we could also do\n# left_branch, right_branch = split_data(train_df, best_split_column, best_split_value)\n\nLet’s verify that after splitting the data has less impurity that is it has less entropy.\n(How do we do that? - By calculating weighted average entropy of children nodes)\n\nprint(f\"Before splitting,  Entropy: {parent_entropy}\")\nprint(f\"After splitting,  Entropy: {calculate_average_children_entropy(left_branch, right_branch)}\")\n\nBefore splitting,  Entropy: 1.5848773505329046\nAfter splitting,  Entropy: 0.6691669882046775\n\n\nSo, this verifies that our splitting was good.\nLet’s see if either of the child node (i.e. data split) is pure\n\ncheck_purity(left_branch), check_purity(right_branch)\n\n(True, False)\n\n\nWow! our left_branch is pure i.e. it contains all the datapoints that has single class. Thus, it would not need any further splitting.\nWhereas right_brach is not pure i.e. it contains datapoints from multiple classes. Thus, it would need further splitting.\n\nnp.unique(left_branch.target) # see classes in left_branch\n\narray(['setosa'], dtype=object)\n\n\n\nnp.unique(right_branch.target, return_counts=True)  # see classes in right_branch\n\n(array(['versicolor', 'virginica'], dtype=object),\n array([43, 44], dtype=int64))\n\n\nBased on just one condition, we can create a small subtree as follows:\nsub_tree = {\"condition\" : [\"left_split_answer\", \"right_split_answer\"]}\nIf we suppose if this small sub-tree is our final decision tree which we want to use for testing. So, if we were to classify one test_example as input, we will check it’s petal length, see if it is less than &lt;= 2.45 cm, we will return setosa as the class, else, we will pick the class with higher relative probability in the right_branch as the predicted class.\n\n# In plain english \nsub_tree = { \"petal length (cm) &lt;= 2.45\" : [\"setosa\", \"versicolor\"]} # right split is versicolor because it is dominant in right_branch\n\nAlmost Never, we create decision tree with only a single condition i.e. 2 child nodes. Usually a decision tree is composed of multiple sub-trees composing multiple conditons.\nProgramatically speaking, we repeat the process of splitting for both the left_branch and right_branch until we reach the stopping condition:\n\nchild nodes become pure\na fixed number of steps by setting hyperparameters like max_depth, min_samples, etc.\n\nNote: There should not be any doubt/confusion when I say that the condition for splitting a left_branch and right_branch belonging to same parent node could be completely different (because it depends upon the data distribution within the child node).\nLet’s build a full-fledged decision tree programatically using concepts of dynamic programming.\n\nDecision Tree code (for case 1. i.e keep splitting until child nodes become pure)N\n(Note: FYI: Case 2. i.e. splitting fo a fixed number of steps is also covered later in this notebook.)\n\ndef decision_tree_algorithm(df: pd.DataFrame) -&gt; dict:\n    data = df\n\n    # base case: If data is pure-&gt; stop and return the class of the child node\n    if check_purity(data):\n        predicted_class = np.unique(data.iloc[:, -1])[0] # only 1 unique value\n        return predicted_class\n    \n    # else: keep on splitting \n    # Recursive\n    else:\n        # for splitting: get_potential_splits -&gt; determine_best_split -&gt; split_data based on best_split_column and best_split_value\n        potential_splits = get_potential_splits(data)\n        best_split_column, best_split_value = determine_best_split(data, potential_splits)\n        left_branch, right_branch = split_data(data, best_split_column, best_split_value)\n\n        \n        condition = \"{} &lt;= {}\".format(list(df.columns)[best_split_column], best_split_value)\n        # create the sub-tree as a dictionary storing the condition as key and a list as the value. This list for a \n        # condition has either the `predicted_class` if the child node is pure or another condition that will further split the \n        # impure child node.\n        sub_tree = {condition: []}\n\n        # get the answer for the 2 child nodes we just created (Step-1) and append them to the sub-tree\n        # (Step-1): get answers\n        left_branch_answer = decision_tree_algorithm(left_branch)\n        right_branch_answer = decision_tree_algorithm(right_branch)\n\n        sub_tree[condition].append(left_branch_answer)\n        sub_tree[condition].append(right_branch_answer)\n\n    return sub_tree\n\n\nmy_tree = decision_tree_algorithm(train_df)\npprint(my_tree)\n\n{'petal length (cm) &lt;= 2.45': ['setosa',\n                               {'petal width (cm) &lt;= 1.75': [{'petal length (cm) &lt;= 4.95': [{'petal width (cm) &lt;= 1.65': ['versicolor',\n                                                                                                                          'virginica']},\n                                                                                            {'petal width (cm) &lt;= 1.55': ['virginica',\n                                                                                                                          {'sepal length (cm) &lt;= 6.95': ['versicolor',\n                                                                                                                                                         'virginica']}]}]},\n                                                             {'petal length (cm) &lt;= 4.85': [{'sepal length (cm) &lt;= 5.95': ['versicolor',\n                                                                                                                           'virginica']},\n                                                                                            'virginica']}]}]}\n\n\nAbove is the decision tree which we created, which can be read as follows. (Do not pay attention to the code but to the print block)\n\nLet’s writ some code to evaluate the decision tree we built.\n\ndef classify_example(example, tree):\n    question = list(tree.keys())[0]\n    feature_name, split_value = question.split(\" &lt;= \")\n    \n\n    # ask question\n    if example[feature_name] &lt;= float(split_value):\n        answer = tree[question][0]\n    else:\n        answer = tree[question][1]\n\n    # base case\n    if not isinstance(answer, dict): # if the answer is not a dictionary, then it is a leaf node\n        return answer\n\n    # recursive case\n    else:\n        residual_tree = answer\n        return classify_example(example, residual_tree)\n    \n\ndef calculate_accuracy(df, tree):\n    df  = df.copy()\n\n    # df[\"classification\"] = df.apply(classify_example, axis=1, args=(tree,))\n    # df[\"classification_correct\"] = df[\"classification\"] == df[\"target\"]\n\n    df.loc[:, \"classification\"] = df.apply(classify_example, axis=1, args=(tree,))\n    df.loc[:, \"classification_correct\"] = df[\"classification\"] == df[\"target\"]\n    \n    accuracy = df[\"classification_correct\"].mean()\n    \n    return accuracy\n\nSince, we created sub_trees in an uninhibited manner, it will result in perfect train accuracy.\n\ncalculate_accuracy(train_df, my_tree)\n\n1.0\n\n\nLet’s check the test accuracy\n\ncalculate_accuracy(test_df, my_tree)\n\n1.0\n\n\nSurprisingly! It also resulted in the perfect test accuracy\n\nControl the depth and min_samples in a decision tree\nIn the above case, we got test accuracy of 100%. But usually this is not the case because datasets are more complex.\nIf we allow the decision tree to grow unhibited manner then it overfits where it is possible that every leaf node would only have one data point. This is not a good decision tree because then prediction from such a tree becomes highly sensitive to small fluctuations in the data.\nHence, now we modify our code to pre-prune the tree i.e. limit its growth using max_depth and min_samples as the hyperparamters\n\n\n\nDecision Tree code (for case 2. i.e. splitting fo a fixed number of steps)\nBefore we write the actual code, we need a function to get the majority class label of the set if the subset is not pure but further splitting is not possible because stopping condition is reached.\n\ndef get_majority_class(df: pd.DataFrame) -&gt; int:\n    \"\"\"\n    Classify the data.\n    \"\"\"\n    y = df.iloc[:, -1]\n    return y.mode()[0]\n\n\ndef decision_tree_improved(df: pd.DataFrame, counter = 0,  min_samples=2, max_depth=5) -&gt; dict:\n\n    data = df\n    # base case: If data is pure or we hit max_depth or min_sample condition violates-&gt; stop and return the class of the child node\n    if check_purity(data) or (len(data) &lt; min_samples) or (counter == max_depth):\n        predicted_class = get_majority_class(data) \n        return predicted_class\n    \n    # else: keep on splitting \n    # Recursive\n    else:\n        counter+=1\n        # for splitting: get_potential_splits -&gt; determine_best_split -&gt; split_data based on best_split_column and best_split_value\n        potential_splits = get_potential_splits(data)\n        best_split_column, best_split_value = determine_best_split(data, potential_splits)\n        left_branch, right_branch = split_data(data, best_split_column, best_split_value)\n\n        \n        condition = \"{} &lt;= {}\".format(list(data.columns)[best_split_column], best_split_value)\n        # create the sub-tree as a dictionary storing the condition as key and a list as the value. This list for a \n        # condition has either the `predicted_class` if the child node is pure or another condition that will further split the \n        # impure child node.\n        sub_tree = {condition: []}\n\n        # get the answer for the 2 child nodes we just created (Step-1) and append them to the sub-tree\n        # (Step-1): get answers\n        left_branch_answer = decision_tree_improved(left_branch,  counter, min_samples, max_depth)\n        right_branch_answer = decision_tree_improved(right_branch, counter, min_samples, max_depth)\n\n        if left_branch_answer == right_branch_answer: # Example: Instead of {'petal length &lt;= 2.5': ['setosa', 'setosa']} just return 'setosa'\n            sub_tree = left_branch_answer\n\n        else:\n            sub_tree[condition].append(left_branch_answer)\n            sub_tree[condition].append(right_branch_answer)\n\n    return sub_tree\n\n\nmy_tree = decision_tree_improved(train_df, max_depth=3)\npprint(my_tree)\n\n{'petal length (cm) &lt;= 2.45': ['setosa',\n                               {'petal width (cm) &lt;= 1.75': [{'petal length (cm) &lt;= 4.95': ['versicolor',\n                                                                                            'virginica']},\n                                                             {'petal length (cm) &lt;= 4.85': ['versicolor',\n                                                                                            'virginica']}]}]}\n\n\n\n\ncalculate_accuracy(test_df, my_tree) # test accuracy with pruned tree\n\n0.95"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Me",
    "section": "",
    "text": "Mohit Gupta is a reseacher with a Ph.D. in Computer Vision from Arizona State University. Check out his website to know more about him."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "AI Blogs",
    "section": "",
    "text": "Decision Trees Made Easy\n\n\n\nmachine learning\n\n\n\n\n\n\n\n\n\nMay 4, 2025\n\n\nMohit Gupta\n\n\n\n\n\nNo matching items"
  }
]