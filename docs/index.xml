<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>AI Blogs</title>
<link>https://mgupta70.github.io/</link>
<atom:link href="https://mgupta70.github.io/index.xml" rel="self" type="application/rss+xml"/>
<description>AI/ML blogs from Mohit, Ph.D. Computer Vision</description>
<generator>quarto-1.8.1</generator>
<lastBuildDate>Mon, 09 Jun 2025 07:00:00 GMT</lastBuildDate>
<item>
  <title>GradCAM Review</title>
  <dc:creator>Mohit Gupta</dc:creator>
  <link>https://mgupta70.github.io/posts/2025-06-09-GradCAM/gradcam_project.html</link>
  <description><![CDATA[ 





<section id="full-form-of-gradcam" class="level4">
<h4 class="anchored" data-anchor-id="full-form-of-gradcam">Full-form of GradCAM</h4>
<p>Gradient-Weighted Class Activation Mapping</p>
</section>
<section id="working-principle-of-gradcam" class="level4">
<h4 class="anchored" data-anchor-id="working-principle-of-gradcam">Working principle of GradCAM?</h4>
<p><img src="https://mgupta70.github.io/posts/2025-06-09-GradCAM/media/grad_cam_workflow.webp" width="750"></p>
<p>5 step process:</p>
<p>Step 1: Forward Pass - Pass the input (image/signal) through the CNN to get the feature maps from the last convolutional layer: <img src="https://latex.codecogs.com/png.latex?A%5Ek"> - Get raw outputs (logits) before softmax</p>
<p>Step 2: Select the Target Class - Choose the class <em>c</em> we want to explain (usually the predicted class with highest score) and calculate its score (logit i.e.&nbsp;output before softmax): <img src="https://latex.codecogs.com/png.latex?y%5Ec"></p>
<p>Step 3: Compute the Gradients - Compute the gradient of the target class score <img src="https://latex.codecogs.com/png.latex?y%5Ec"> with respect to the feature maps <img src="https://latex.codecogs.com/png.latex?A%5Ek"> of the selected convolutional layer, i.e., <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20y%5Ec%7D%7B%5Cpartial%20A%5Ek%7D"></p>
<ul>
<li>These gradients show how important each feature map is for the target class.</li>
</ul>
<p>Step 4: Compute the Grad-CAM - For each filter <em>k</em>, global average pool the gradients spatially (over width <em>i</em> and height <em>j</em>) to get a single scalar weight <img src="https://latex.codecogs.com/png.latex?%7Ba_k%7D%5Ec">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Calpha_k%5Ec%20=%20%5Cfrac%7B1%7D%7BZ%7D%20%5Csum_%7Bi%7D%20%5Csum_%7Bj%7D%20%5Cfrac%7B%5Cpartial%20y%5Ec%7D%7B%5Cpartial%20A_%7Bij%7D%5Ek%7D"></p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?%5Calpha_k%5Ec"> is the importance weight for kth feature map in <img src="https://latex.codecogs.com/png.latex?A%5Ek"></li>
<li>Finally, to calculate the final Grad-CAM, multiply each feature map <img src="https://latex.codecogs.com/png.latex?A%5Ek"> by its corresponding importance weight <img src="https://latex.codecogs.com/png.latex?%5Calpha_k%5Ec"> and then sum.</li>
<li>Apply a ReLU activation to keep only the parts that positively influence the target class. This makes the Grad-CAM map focus only on features that support the class, not those that suppress it.</li>
</ul>
<p><img src="https://latex.codecogs.com/png.latex?L%5Ec_%7BGrad-CAM%7D%20=%20ReLU%20(%5Csum_%7Bk%7D%20%5Calpha_k%5Ec%20A%5Ek)"></p>
<p>Step 5: Post-processing - Resize the Grad-CAM map to the same spatial size as the input</p>
</section>
<section id="why-we-used-feature-maps-ak-from-last-convolutional-layer" class="level4">
<h4 class="anchored" data-anchor-id="why-we-used-feature-maps-ak-from-last-convolutional-layer">Why we used feature maps <img src="https://latex.codecogs.com/png.latex?A%5Ek"> from last convolutional layer?</h4>
<p>Grad-CAM uses the feature maps from the last conv layer because it typically has the most high-level, semantically rich features but still retains some spatial information. Using earlier layers would provide too much low-level information (edges, textures) and not enough conceptual understanding.</p>
</section>
<section id="global-average-pooling" class="level4">
<h4 class="anchored" data-anchor-id="global-average-pooling">Global Average Pooling?</h4>
<p>It computes the average of all pixel values within each feature map, effectively collapsing each map into a single scalar value. This process reduces the number of parameters in the model, making it less prone to overfitting and more robust to spatial translations.</p>
<p>The global average pooling means that you have a 3D 8,8,10 tensor and compute the average over the 8,8 slices, you end up with a 3D tensor of shape 1,1,10 that you reshape into a 1D vector of shape 10. And then you add a softmax operator without any operation in between. The tensor before the average pooling is supposed to have as many channels as your model has classification categories.</p>
<p>global average pooling as implemented in SqueezeNet:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1">final_conv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Conv2d(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.num_classes, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-2"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.classifier <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Sequential(</span>
<span id="cb1-3">    nn.Dropout(p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>),</span>
<span id="cb1-4">    final_conv,</span>
<span id="cb1-5">    nn.ReLU(inplace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>),</span>
<span id="cb1-6">    nn.AvgPool2d(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>)</span>
<span id="cb1-7">)</span></code></pre></div>
<p>(512 is the number of channels in the feature maps feeding in to this layer, and 13 is the number of rows and columns in the feature maps going in to this layer. You’ll need to change these depending on your network structure.)</p>
</section>
<section id="what-is-adaptive-pooling" class="level4">
<h4 class="anchored" data-anchor-id="what-is-adaptive-pooling">What is Adaptive Pooling?</h4>
<ul>
<li>In average-pooling or max-pooling, you essentially set the stride and kernel-size by your own, setting them as hyper-parameters. You will have to re-configure them if you happen to change your input size.</li>
</ul>
<p>In Adaptive Pooling on the other hand, we specify the output size instead. And the stride and kernel-size are automatically selected to adapt to the needs. The following equations are used to calculate the value in the source code.</p>
<p>Stride = (input_size//output_size)<br>
Kernel size = input_size - (output_size-1)*stride<br>
Padding = 0</p>
<p>(Not related to global average pooling as such but we can also use <code>adaptive_avg_pool2d</code> to achieve global average pooling, just set the output size to (1, 1),</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn.functional <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> F</span>
<span id="cb2-2">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.adaptive_avg_pool2d(x, (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span></code></pre></div>
<p>)</p>
</section>
<section id="other-approaches-to-xai-in-computer-vision" class="level4">
<h4 class="anchored" data-anchor-id="other-approaches-to-xai-in-computer-vision">Other Approaches to XAI in Computer Vision</h4>
<ol type="1">
<li>Visualizing features learned in different layers</li>
<li>GradCAM</li>
<li>Guided Backpropagation</li>
<li>DeepDream (Need to verify)</li>
<li>Dimensionality Reduction &amp; Feature Visualization (like PCA for last FC layers)</li>
<li>Sensitivity Analysis: (how much each part of the input image is involved in the decision of network’s classifier. The algorithm blocks out different regions of an input image with a sliding gray square and then it runs these occluded images through the network and displays their probabilities for correct class using a heatmap)</li>
<li>Saliency Map (General)</li>
<li>Local Interpretable ModelAgnostic Explanations (LIME)</li>
<li>SHapely Additive exPlanations (SHAP)</li>
</ol>
</section>
<section id="list-of-xai-works-in-computer-vision" class="level4">
<h4 class="anchored" data-anchor-id="list-of-xai-works-in-computer-vision">List of xAI works in Computer Vision</h4>
<p>Reference: <a href="https://arxiv.org/pdf/2102.01792">Paper</a></p>
<p><img src="https://mgupta70.github.io/posts/2025-06-09-GradCAM/media/xai_vision.png" width="750"> .. <img src="https://mgupta70.github.io/posts/2025-06-09-GradCAM/media/xai_vision_2.png" width="750"> .. <img src="https://mgupta70.github.io/posts/2025-06-09-GradCAM/media/xai_vision_3.png" width="750"></p>
</section>
<section id="t-sne-vs-pca" class="level4">
<h4 class="anchored" data-anchor-id="t-sne-vs-pca">t-SNE vs PCA?</h4>
<p>Ans: t-SNE for local structure; PCA for global. “In high-dimensional data, it is usually impossible to keep similar data-points close to each other using linear projections (like in PCA). Hence, non-linear methods (like t-SNE) are more suitable in such cases, as they can preserve the local structure of data very well.”</p>
</section>
<section id="why-explainability" class="level4">
<h4 class="anchored" data-anchor-id="why-explainability">Why explainability?</h4>
<p>Having appropriate answers to: - (i) Verification of the model; - (ii) Improving a model by understanding its failure points; - (iii) Extracting new insights and hidden laws of the model, and; - (iv) Identifying modules responsible for incorrect decisions.</p>
</section>
<section id="difference-bw-vgg-resnet-densenet-squeezenet-inceptionnet" class="level4">
<h4 class="anchored" data-anchor-id="difference-bw-vgg-resnet-densenet-squeezenet-inceptionnet">Difference b/w VGG, ResNet, DenseNet, SqueezeNet, InceptionNet?</h4>
<p><strong>🔷 1. VGG (e.g., VGG16, VGG19)</strong></p>
<p>Uniqueness: Very simple and deep architecture using only 3x3 convolutions and stacked layers.</p>
<p>Pros: Easy to implement and understand.</p>
<p>Cons: Large number of parameters (≈138M), leading to slow training and high memory usage.</p>
<p>Key Idea: Depth over architectural complexity.</p>
<p><strong>🔷 2. ResNet (Residual Network)</strong></p>
<p>Uniqueness: Introduces skip connections (residual connections) to allow gradient flow through very deep networks.</p>
<p>Pros: Enables training of networks with 100+ layers without vanishing gradient issues.</p>
<p>Cons: Slightly more complex architecture.</p>
<p>Key Idea: Learn residuals: F(x) + x instead of just F(x).</p>
<p><strong>🔷 3. DenseNet (Densely Connected Network)</strong></p>
<p>Uniqueness: Each layer receives input from all previous layers (dense connectivity).</p>
<p>Pros: Encourages feature reuse, fewer parameters than ResNet with similar performance.</p>
<p>Cons: High memory usage due to many connections.</p>
<p>Key Idea: Dense connectivity between layers: x_l = H([x_0, x_1, …, x_{l-1}]).</p>
<p><strong>🔷 4. SqueezeNet</strong></p>
<p>Uniqueness: Achieves AlexNet-level accuracy with 50x fewer parameters.</p>
<p>Pros: Very lightweight, ideal for edge devices or deployment in resource-constrained environments.</p>
<p>Cons: Slightly lower accuracy on large datasets.</p>
<p>Key Idea: Replace 3x3 filters with 1x1, use Fire modules (squeeze + expand).</p>
<p><strong>🔷 5. InceptionNet (GoogLeNet and its variants)</strong></p>
<p>Uniqueness: Uses Inception modules to capture multi-scale features (1x1, 3x3, 5x5 convolutions in parallel).</p>
<p>Pros: Efficient and computationally optimized, better utilization of model capacity.</p>
<p>Cons: More complex to design and tune.</p>
<p>Key Idea: Parallel filters with different sizes + dimensionality reduction via 1x1 convolutions.</p>
</section>
<section id="resources" class="level4">
<h4 class="anchored" data-anchor-id="resources">Resources</h4>
<ol type="1">
<li>https://arxiv.org/pdf/2102.01792</li>
<li>https://research.google/blog/inceptionism-going-deeper-into-neural-networks/</li>
<li>https://cs.stanford.edu/people/karpathy/convnetjs/demo/cifar10.html</li>
<li>https://cs.stanford.edu/people/karpathy/cnnembed/</li>
<li>https://github.com/jacobgil/pytorch-grad-cam</li>
<li>https://xai-tutorials.readthedocs.io/en/latest/_model_specific_xai/Grad-CAM.html</li>
</ol>


</section>

 ]]></description>
  <category>Vision</category>
  <guid>https://mgupta70.github.io/posts/2025-06-09-GradCAM/gradcam_project.html</guid>
  <pubDate>Mon, 09 Jun 2025 07:00:00 GMT</pubDate>
  <media:content url="https://mgupta70.github.io/posts/2025-06-09-GradCAM/gcam_thumb.png" medium="image" type="image/png" height="39" width="144"/>
</item>
<item>
  <title>YOLO Made Easy</title>
  <dc:creator>Mohit Gupta</dc:creator>
  <link>https://mgupta70.github.io/posts/2025-06-04-yolo/yolo.html</link>
  <description><![CDATA[ 





<p>History of Object Detection</p>
<p><img src="https://mgupta70.github.io/posts/2025-06-04-yolo/media/obj_detectors.avif" width="500"></p>
<p>Timeline</p>
<p><img src="https://mgupta70.github.io/posts/2025-06-04-yolo/media/yolo_timeline.avif" width="500"></p>
<p>Yolo Models’ performance with time</p>
<p><img src="https://mgupta70.github.io/posts/2025-06-04-yolo/media/yolo_models.webp" width="500"></p>
<section id="yolo-v1" class="level3">
<h3 class="anchored" data-anchor-id="yolo-v1">YOLO v1</h3>
<ul>
<li><p>One key advantage of YOLO over other object detection methods is its speed (~45fps), making it suitable for real-time object detection tasks.</p></li>
<li><p>However, it tends to be less accurate with small objects and objects that are close together due to the grid system it uses.</p></li>
</ul>
<p>Dataset: PASCALVOC</p>
<p>Image: 7x7 Grids</p>
<p>Image: 448x448 fixed</p>
</section>
<section id="yolo-v2" class="level3">
<h3 class="anchored" data-anchor-id="yolo-v2">YOLO v2</h3>
<ul>
<li>Introduced anchor boxes, the Darknet-19 architecture, and fully convolutional predictions.</li>
</ul>
<p>Dataset: PASCALVOC + COCO</p>
<p>Image: 13x13 Grids</p>
<p>Image: 320x320 - 608x608 for Detections for variable input size</p>
<ul>
<li><p>Anchor Boxes</p></li>
<li><p>Batch Norm</p></li>
</ul>
<p>Arch: DarkNet-19: <strong>Variant of vgg</strong></p>
</section>
<section id="yolo-v3" class="level3">
<h3 class="anchored" data-anchor-id="yolo-v3">YOLO v3</h3>
<p>Introduced <strong>Backbone</strong> + <strong>Neck</strong> based architecture naming</p>
<p>Arch: DarkNet-53: <strong>Variant of ResNet</strong></p>
<p>+Residual Connections</p>
<p>Introduces the concept of “feature pyramid networks” (FPN)</p>
<p>+Multi-scale predictions: 13x13, 26x26, 52x52 # multi-scale predictions</p>
<p><img src="https://mgupta70.github.io/posts/2025-06-04-yolo/media/yolov3_ms.png" width="500"></p>
</section>
<section id="yolo-v4" class="level3">
<h3 class="anchored" data-anchor-id="yolo-v4">YOLO V4</h3>
<p>paper with more emphasis on optimizing the network hyperparameters and an IOU-based loss function.</p>
<p>Architecture: CSP: <strong>inspired by ResNet</strong></p>
<p><strong>Backbone</strong> + <strong>Neck</strong> + <strong>Head</strong></p>
<p>k-means clustering for Anchor Boxes</p>
</section>
<section id="yolo-v5" class="level3">
<h3 class="anchored" data-anchor-id="yolo-v5">Yolo v5</h3>
<p>Arch: based on the EfficientNet</p>
<p><em>Dynamic</em> Anchor Boxes</p>
<p>CIoU loss</p>
<p>Improved SPP from Yolov4</p>
</section>
<section id="yolo-v6" class="level3">
<h3 class="anchored" data-anchor-id="yolo-v6">Yolo v6</h3>
<p>Arch: Based on EfficientNet architecture called EfficientNet-L2</p>
<p><em>Dense</em> Anchor Boxes</p>
</section>
<section id="yolo-v7" class="level3">
<h3 class="anchored" data-anchor-id="yolo-v7">Yolo v7</h3>
<p>Focal Loss</p>
<p>608x608 while earlier versions were 416x416</p>
</section>
<section id="yolov8" class="level3">
<h3 class="anchored" data-anchor-id="yolov8">YOLOv8</h3>
<p>built on these advancements, introduced features like anchor-free detection and Neural Architecture Search (NAS), making the model even more adaptive and efficient. YOLOv8 also enhanced real-time performance and accuracy, particularly in complex, dynamic environments.</p>
</section>
<section id="yolov9" class="level3">
<h3 class="anchored" data-anchor-id="yolov9">YOLOv9</h3>
<p>(released in early 2024) introduced Programmable Gradient Information (PGI) and GELAN to improve training efficiency and feature aggregation, offering faster and more accurate object detection without increasing computational costs. These innovations enhance its performance in real-time tasks.</p>
</section>
<section id="yolov10" class="level3">
<h3 class="anchored" data-anchor-id="yolov10">YOLOv10</h3>
<p>(released in May 2024) builds on these advancements with a dual-pathway system that eliminates Non-Maximum Suppression (NMS) during inference, improving both speed and accuracy. YOLOv10 also introduces large-kernel convolutions and partial self-attention, making it highly efficient for dynamic, real-time applications like autonomous driving and industrial automation​</p>
</section>
<section id="yolo-v1-1" class="level2">
<h2 class="anchored" data-anchor-id="yolo-v1-1">YOLO V1</h2>
<p><a href="https://arxiv.org/pdf/1506.02640">Official Paper</a></p>
<section id="a.-labeling-the-data" class="level3">
<h3 class="anchored" data-anchor-id="a.-labeling-the-data">A. Labeling the data:</h3>
<p>In YOLO v1 the grid size is 7 x 7.</p>
<p><img src="https://mgupta70.github.io/posts/2025-06-04-yolo/media/yolov1_labeling.jpg" width="500"></p>
<p>A grid cell is labeled to contain an object only if the center of the bounding box is in it. If the grid cell contains a center, the “objectness” is labeled 1 and 0 otherwise.</p>
</section>
<section id="b.-predictions" class="level3">
<h3 class="anchored" data-anchor-id="b.-predictions">B. Predictions:</h3>
<p>For 1 grid cell we predict: 5B + C paramters</p>
<p>For whole image divided into S x S grids, we predict: S X S X (5B + C) params</p>
<p>where,</p>
<p>5: 4 bbox values (x,y,w,h) + 1 (confidence score) : (Formally, confidence = Probab(Object) x IOU(truth,pred). If no object exists in a cell, the confidence scores should be zero. Otherwise confidence score will be equal to the IOU b/w predicted box and the ground truth.)</p>
<p>B: number of bboxes predicted per grid cell, B=2 (author’s choice) (B is not related to the number of classes.)</p>
<p>C: number of classes (class probabilities) : (conditional class probabilities, Pr(class_i|Object))</p>
<p><img src="https://mgupta70.github.io/posts/2025-06-04-yolo/media/yolov1_pred.jpg" width="500"></p>
<p>If we call P(object) the probability there is an object in a box b and P(c|object) the probability that the object is of class c, then the score for the class c in the box b in simply</p>
<p><img src="https://latex.codecogs.com/png.latex?P(c)%20=%20P(c%7C%5Ctext%7Bobject%7D)%5Ctimes%20P(%5Ctext%7Bobject%7D)"></p>
</section>
<section id="architecture" class="level3">
<h3 class="anchored" data-anchor-id="architecture">Architecture</h3>
<p>Fine-details: 1. To improve the speed of the network, they alternated convolutional layers with 3x3 kernel size and convolutional layers with 1x1 kernel size. How?</p>
<p>Ans:</p>
<p>Let’s, we have a feature map of size 56 x 56 x 192 and we want to apply a convolution layer of 256 filters of kernel size 3 x 3. For each filter, we have:</p>
<p><img src="https://latex.codecogs.com/png.latex?56%20%5Ctimes%2056%20%5Ctimes%20192%20%5Ctimes%203%20%5Ctimes%203%20=%20%205,419,008%20%5Ctext%7B%20computations%7D"></p>
<p>For all the filters we have:</p>
<p><img src="https://latex.codecogs.com/png.latex?5,419,008%20%5Ctimes%20256%20=%20%5Csim%201.4%20%5Ctext%7BB%20computations%7D"></p>
<p>vs</p>
<p>let’s apply a convolution layer of 128 filters of kernel size 1 x 1 first:</p>
<p><img src="https://latex.codecogs.com/png.latex?56%20%5Ctimes%2056%20%5Ctimes%20192%20%5Ctimes%201%20%5Ctimes%201%20%5Ctimes%20128%20=%20%2077,070,336%20%5Ctext%7B%20computations%7D"></p>
<p>and the resulting feature map is of size 56 x 56 x 128. Now, let’s apply our convolution layer of 256 filters with kernel size 3 x 3</p>
<p><img src="https://latex.codecogs.com/png.latex?56%20%5Ctimes%2056%20%5Ctimes%20128%20%5Ctimes%203%20%5Ctimes%203%20%5Ctimes%20256=%20%20924,844,032%20%5Ctext%7B%20computations%7D"></p>
<p>Adding 77,070,336 +924,844,032=1</p>
<p>Therefore applying a 1 x 1 convolution prior to the 3 x 3 convolution reduces the dimensionality of the tensors and saves ~ 0.4B computations.</p>
<p><img src="https://mgupta70.github.io/posts/2025-06-04-yolo/media/yolov1_arch.png" width="500"></p>
<p>The architecture uses Conv, Maxpool and Linear layers such that at the end the output should be 7x7x30. This was done because image was divided into 7x7 grids and for each grid, we are predicting 20 class probabs and 2 bboxes containing 5 values each (4 xywh + 1 conf). This was a customized setting applicable for PASCAL VOC dataset that had 20 classes. (Actualy the last layer is a FC layer not COnv layer. <code>nn.Linear (4096, 7*7*30)</code>)</p>
<p><img src="https://mgupta70.github.io/posts/2025-06-04-yolo/media/yolov1_arch2.png" width="500"></p>
<section id="training" class="level4">
<h4 class="anchored" data-anchor-id="training">Training</h4>
<p>For each image we prepare ground truth as 7x7x30 tensor as explained in the start. Model also outputs 7x7x30 tensor then, using the loss explained below the model was trained.</p>
</section>
<section id="loss" class="level4">
<h4 class="anchored" data-anchor-id="loss">Loss</h4>
<p>Mean squared error loss for everything!!!</p>
<p><img src="https://mgupta70.github.io/posts/2025-06-04-yolo/media/yolov1_loss.png" width="500"></p>
<p>Let’s break loss line by line</p>
<p><img src="https://mgupta70.github.io/posts/2025-06-04-yolo/media/yolov1_identity.webp" width="50"></p>
<p>The identity function is <code>0</code> when there is no object or the current bounding box isn’t the responsible one. In other words, we only calculate the loss for the best bounding box. So the first line of the equation is the sum of squared differences between the predicted and actual midpoints of the objects in all grid cells <strong>which have an object</strong> in them and are the responsible bounding box.</p>
<p>The second line is the sum of the squared differences between the square roots of the predicted and actual widths and heights in all grid cells <strong>which have an object</strong> in them. These are square rooted for reasons explained earlier.</p>
<p>The third line is just the squared difference between the predicted class probabilities and the actual class probabilities in all cells <strong>which have an object</strong>.</p>
<p>The fourth line is the same but for all cells <strong>which don’t have an object</strong> in them.</p>
<p>The reason these two (3rd and 4th lines) are split up is so that we can multiply the fourth line by the noobj coefficient to punish the model less severely if it misclassifies when there is no object present.</p>
<p><strong>Q: Why square root used for bbox size loss and not normal dimension?</strong></p>
<p>A: Because it gives different weights to bboxes of different sizes. We want to make this error larger for smaller bboxes</p>
<p>Let’s understand by example.</p>
<p>Case-1 : Actual width = 100, Predicted width = 98</p>
<p>Case-2 : Actual width = 4, Predicted width = 2</p>
<p>In both the case the deviation is same i.e.&nbsp;2 but the quality of bbox for small bbox (Case-2) is very poor while quality of BBox predicted in Case-1 is really good.</p>
<p><em>Loss with normal width</em></p>
<p>Case-1 Loss: (100-98)**2 = 4</p>
<p>Case-2 Loss: (4-2)**2 = 4</p>
<p><em>Loss with square-root width</em></p>
<p>Case-1 Loss: (10-9.899)**2 = 0.01</p>
<p>Case-2 Loss: (2-1.414)**2 = 0.343</p>
<div style="background-color:rgb(255, 0, 0); display: flex; gap: 20px; padding: 10px; justify-content: center;">
<figure style="margin: 0; text-align: center;" class="figure">
<figcaption>
<b>NO</b>
</figcaption>
<p><img src="https://mgupta70.github.io/posts/2025-06-04-yolo/media/yolov1_loss_q1.webp" width="300" class="figure-img"></p>
</figure>
<figure style="margin: 0; text-align: center;" class="figure">
<figcaption>
<b>YES</b>
</figcaption>
<img src="https://mgupta70.github.io/posts/2025-06-04-yolo/media/yolov1_loss_q.webp" width="300" class="figure-img">
</figure>
</div>
</section>
<section id="nms" class="level4">
<h4 class="anchored" data-anchor-id="nms">NMS</h4>
<ol type="1">
<li>Find all the boxes with a high objectness score. This is the level of confidence of the model that there is an object in the grid cell. We typically have a confidence threshold, so any box with a lower score is not considered.</li>
</ol>
<p><img src="https://mgupta70.github.io/posts/2025-06-04-yolo/media/iou_step1.png" width="500"></p>
<ol start="2" type="1">
<li>We then choose the box with the high confidence scores and remove the boxes that have high overlap i.e.&nbsp;IoU with the the highest confidence bbox. (Overlap is decided by IOU IoU)</li>
</ol>
<p><img src="https://mgupta70.github.io/posts/2025-06-04-yolo/media/iou_step2.png" width="500"></p>
<p><strong>Exact Algo</strong></p>
<p>Suppose we have B: bboxes preds, C_thresh: confidence thresh (objectness score) for each bbox<br>
iou_thresh: iou overlap threshold</p>
<ol type="1">
<li><p>Filter bboxes with confidence &gt; C_thresh. Suppose now B -&gt; B_new</p></li>
<li><p>Sort bboxes in B_new by confidence scores in descending order</p></li>
<li><p>Initialize a new variable F_bboxes to store final bboxes</p></li>
<li><p>while B_new is not empty:</p>
<p>4.1 for b1 bbox in B_new</p>
<p>4.2 Add b1 to F_bboxes</p>
<p>4.3 Remove b1 from B_new</p>
<p>4.4 for remaining b2 in B_new:</p>
<p>4.4.1 if IoU(b1, b2) &gt;= iou_thresh -&gt; remove b2 from B_new</p></li>
</ol>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Suppose B contains BBoxes as list of list of 5 coordinates (x,y,w,h,c) : where c is confidence (objectness score)</span></span>
<span id="cb1-2"></span>
<span id="cb1-3">B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(B, key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>], reverse<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># initial_bboxes</span></span>
<span id="cb1-4">F <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># final_bboxes</span></span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(B)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb1-7">    b1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> B.pop(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb1-8">    F.append(b1)</span>
<span id="cb1-9"></span>
<span id="cb1-10">    remaining_bboxes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb1-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> b2 <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> B:</span>
<span id="cb1-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> iou(b1, b2) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> iou_thresh:</span>
<span id="cb1-13">            remaining_bboxes.append(b2)</span>
<span id="cb1-14">    B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> b2</span></code></pre></div>
</section>
</section>
<section id="problems" class="level3">
<h3 class="anchored" data-anchor-id="problems">Problems:</h3>
<p>1.1 Did not account for this Edge case: In the case the grid cell contains 2 objects, suppose cat and a dog, we need to choose one of the classes as the label for the training data.</p>
<p>1.2 YOLO can only predict a limited number of bounding boxes per grid cell, 2 in the original research paper. And though that number can be increased, only one class prediction can be made per cell, limiting the detections when multiple objects appear in a single grid cell. Thus, it struggles with bounding groups of small objects, such as flocks of birds, or multiple small objects of different classes.</p>
<ol start="2" type="1">
<li><p>YOLO imposes strong spatial constraints on bounding box predictions since each grid cell only predicts two boxes and can only have one class. This spatial constraint limits the number of nearby objects that our model can predict.</p></li>
<li><p>The model struggled with small objects that appear in groups, such as flocks of birds</p></li>
<li><p>THeir loss function treats errors the same in small bounding boxes versus large bounding boxes. A small error in a large box is generally benign but a small error in a small box has a much greater effect on IOU</p></li>
<li><p>Detections at multi-scale not supported.</p></li>
</ol>
</section>
</section>
<section id="yolov2-aka-yolo9000" class="level2">
<h2 class="anchored" data-anchor-id="yolov2-aka-yolo9000">YOLOv2 (aka YOLO9000)</h2>
<p><a href="https://arxiv.org/pdf/1612.08242">Official Paper</a></p>
<section id="whats-different-from-yolov1" class="level3">
<h3 class="anchored" data-anchor-id="whats-different-from-yolov1">What’s different from YOLOv1?</h3>
<p>Introduced Anchor Boxes: This allows the algorithm to handle a wider range of object sizes and aspect ratios. Used BatchNorm Expanded dataset: PASCAL VOC + COCO Flexible Image Size: 320x320 to 608x608: Multi-scale training. This helps to improve the detection performance of small objects.</p>
<p>In YOLOv2 (and beyond), instead of predicting arbitrary bounding boxes directly, the model <strong>predicts offsets from a fixed set of predefined boxes</strong>, called <strong>anchor boxes</strong> or <strong>prior boxes</strong>.</p>
<p>The different classes are this time passed through a Softmax activation function and the loss function is using cross-entropy instead of MSE.</p>
<p>Grid size = 13x13 to ensure better detection of smaller objects</p>
</section>
<section id="anchor-boxes" class="level3">
<h3 class="anchored" data-anchor-id="anchor-boxes">Anchor Boxes</h3>
<p>Anchor Boxes: Sort of priors about object shapes; they guide the model in doing better predictions.</p>
<p>Instead of directly predicting the <code>x</code> &amp; <code>y</code> i.e.&nbsp;bbox centers, the model predicts <code>tx</code> and <code>ty</code> such that:</p>
<p><img src="https://latex.codecogs.com/png.latex?x%20=%20%5Csigma(t_x)"></p>
<p><img src="https://latex.codecogs.com/png.latex?y%20=%20%5Csigma(t_y)"></p>
<p>where, <img src="https://latex.codecogs.com/png.latex?%5Csigma"> is sigmoid: <img src="https://latex.codecogs.com/png.latex?%5Csigma(a)%20=%20%5Cfrac%7B1%7D%7B1%20+%20%5Cexp%20-%20a%7D"></p>
<p>To get width <code>bw</code> and <code>bh</code> for the bbox, the model predicts <code>tw</code> and <code>th</code> such that</p>
<p><img src="https://latex.codecogs.com/png.latex?b_w%20=%20p_w%20e%5E%7Bt_w%7D"></p>
<p><img src="https://latex.codecogs.com/png.latex?b_h%20=%20p_h%20e%5E%7Bt_h%7D"></p>
<p>where, <img src="https://latex.codecogs.com/png.latex?p_w"> and <img src="https://latex.codecogs.com/png.latex?p_h"> are already known when we calculated anchor boxes (explained later).</p>
<p><img src="https://mgupta70.github.io/posts/2025-06-04-yolo/media/yolov2_anchor_box.png" width="500"></p>
<p>The model predicts <code>to</code> (objectness score) also such that:</p>
<p><img src="https://latex.codecogs.com/png.latex?P(%5Ctext%7Bobject%7D)=%20%5Csigma(t_o)"></p>
<p><strong>Q: Why <img src="https://latex.codecogs.com/png.latex?%5Csigma">?</strong></p>
<p>A: Makes <code>x</code> and <code>y</code> bounded between 0 and 1 -&gt; center is always within the cell</p>
<section id="how-to-calculate-anchor-boxes" class="level4">
<h4 class="anchored" data-anchor-id="how-to-calculate-anchor-boxes">How to calculate anchor boxes?</h4>
<p>K-means algorithm with K=5 (i.e.&nbsp;compute 5 anchors) over the trainig data, clustering together similar shapes.</p>
<p>Steps:</p>
<ol type="1">
<li><p>They ran K-Means clustering on the bounding boxes in the training set.</p></li>
<li><p>Each bounding box is treated as a 2D point: [w,h]</p></li>
<li><p>Traditional K-Means uses Euclidean distance, but that doesn’t work well for boxes (e.g., a tall-skinny box and short-wide box can have the same area and Euclidean norm but behave very differently).</p></li>
<li><p>Instead, they used a custom distance function:</p></li>
</ol>
<p><strong>d=1−IoU(box,&nbsp;cluster&nbsp;center)</strong></p>
<p>So two boxes are close if their IoU is high.</p>
<ol start="5" type="1">
<li><p>After clustering:</p>
<p>5.1 They used the average width and height of each cluster to define an anchor box.</p>
<p>5.2 They selected K = 5, meaning each grid cell has 5 anchor boxes it can predict from.</p></li>
<li><p>Model Output:</p></li>
</ol>
<p>For each anchor box, YOLOv2 predicts:</p>
<p>[tx, ty, tw, th, to] Where:</p>
<p>tx,ty : offsets from the cell</p>
<p>tw ,th: log-scale offset from anchor box dimensions</p>
<p>to: objectness score</p>
<p><strong>NOTES:</strong></p>
<ol type="1">
<li>Normalize bounding box widths and heights to [0, 1] before clustering.</li>
</ol>
</section>
<section id="why-is-this-better-than-yolov1" class="level4">
<h4 class="anchored" data-anchor-id="why-is-this-better-than-yolov1">Why is this better than YOLOv1?</h4>
<p>Ans: YOLOv1 predicted 2 arbitrary boxes per grid cell, regardless of dataset statistics.</p>
<p>YOLOv2 learns K well-distributed, representative shapes — making the model better at fitting real-world object shapes.</p>
</section>
</section>
<section id="architecture-1" class="level3">
<h3 class="anchored" data-anchor-id="architecture-1">Architecture</h3>
<p><strong>Variant of vgg</strong></p>
<p>DarkNet-19: Similar to Yolov1, but had BatchNorm for regularization, replaced last linear layer with conv layer</p>
<div style="background-color: #f0f0f0; display: inline-block; padding: 10px;">
<p><img src="https://mgupta70.github.io/posts/2025-06-04-yolo/media/yolov2_arch.png" width="500"> <img src="https://mgupta70.github.io/posts/2025-06-04-yolo/media/yolov2_arch2.png" width="500"></p>
</div>
</section>
</section>
<section id="yolov3" class="level2">
<h2 class="anchored" data-anchor-id="yolov3">YOLOv3</h2>
<p><a href="https://arxiv.org/pdf/1804.02767">Original Paper</a></p>
<p>What’s different from YOLOv2?</p>
<p>Ans: 1. Introduced Residual connections 2. Multi-scale predictions: 13x13, 26x26, 52x52 3. At each scale, 3 bboxes are predicted</p>
<p><img src="https://mgupta70.github.io/posts/2025-06-04-yolo/media/yolov3_ms.png" width="500"></p>
<p>This multi-scale module is going to be referred to as “neck“</p>
<section id="anchor-boxes-1" class="level3">
<h3 class="anchored" data-anchor-id="anchor-boxes-1">Anchor Boxes</h3>
<p>At each scale 3 anchor boxes so, total 9 anchor boxes were used in Yolov3.</p>
</section>
<section id="architecture-backbone-neck" class="level3">
<h3 class="anchored" data-anchor-id="architecture-backbone-neck">Architecture (Backbone + Neck)</h3>
<p><strong>Variant of ResNet</strong></p>
<p><img src="https://mgupta70.github.io/posts/2025-06-04-yolo/media/yolov3_ms2.png" width="500"></p>
<p>At each scale, we predict 3 boxes (9 total). For each box, we predict <code>[tx, ty, tw, th, to]</code> as well as the probabilities of the different classes. If <code>C</code> is the number of classes, for each scale we predict:</p>
<p><img src="https://latex.codecogs.com/png.latex?N%5Ctimes%20N%20%5Ctimes%203%20%5Ctimes%20(5%20+%20C)%20%5Ctext%7B%20parameters%7D"></p>
<p>This multi-scale module is going to be referred to as “neck“</p>
</section>
<section id="training-1" class="level3">
<h3 class="anchored" data-anchor-id="training-1">Training:</h3>
<p>Classes and the objectness score are activated by logistic regression and optimized using cross-entropy</p>
<p><img src="https://latex.codecogs.com/png.latex?L_%7B%5Ctext%7Bobjectness%7D%7D=%5Csum_%7Bi%20%5Cin%20%5Ctext%7Bgrid%7D%7D%5Csum_%7Bj%20%5Cin%20%5Ctext%7Bboxes%7D%7DC_i%5Clog%5Chat%7BC%7D_i"></p>
<p><img src="https://latex.codecogs.com/png.latex?L_%7B%5Ctext%7Bclasses%7D%7D%20=%5Csum_%7Bi%20%5Cin%20%5Ctext%7Bgrid%7D%7D%5Cmathbb%7BI%7D_%7B%5C%7B%5Ctext%7Bif%20object%20in%20%7D%20i%5C%7D%7D%5Csum_%7Bc%5Cin%20%5Ctext%7Bclasses%7D%7D%20p_i(c)%5Clog%5Chat%7Bp%7D_i(c)"></p>
</section>
</section>
<section id="yolov4" class="level2">
<h2 class="anchored" data-anchor-id="yolov4">YOLOv4</h2>
<p><a href="https://arxiv.org/pdf/2004.10934">Original Paper</a></p>
<p><strong>Q: What’s new from YOLOv3?</strong></p>
<p>Ans:</p>
<ol type="1">
<li>Formally introduced network in 3 parts: Backbone, Neck, Head</li>
<li>LeakyReLU replaced by Mish activation</li>
<li>Residual blocks are replaced by Cross Stage Partial (CSP) blocks</li>
<li>Ability to detect even smaller sized objects: 19 x 19, 38 x 38, and 76 x 76 grids</li>
<li>Did a thorough evaluation of activation functions, bbox regression loss, data augmentation strategies, regularization methods, skip-connections, etc. in order to optimize the model</li>
<li>Introduced IoU loss (CIoU loss) for regressing bbox coordinates.</li>
</ol>
<section id="architecture-2" class="level3">
<h3 class="anchored" data-anchor-id="architecture-2">Architecture</h3>
<p><img src="https://mgupta70.github.io/posts/2025-06-04-yolo/media/yolov4_bnh.png" width="500"></p>
<ol type="1">
<li><strong>Backbone</strong>: learns the feature map representations of the image</li>
<li><strong>Neck</strong>: that is the network that improves the receptive field of the backbone and allows for multi-scale predictions.</li>
<li><strong>Head</strong>: that is the end of the model that is responsible for making the predictions.</li>
</ol>
<section id="backbone" class="level4">
<h4 class="anchored" data-anchor-id="backbone">Backbone</h4>
<p>Residual Blocks from YOLOv3 replaced by CSP Blocks</p>
<div style="background-color:rgb(10, 1, 1); display: flex; gap: 20px; padding: 10px; justify-content: center;">
<figure style="margin: 0; text-align: center;" class="figure">
<figcaption>
<b>YOLOv3 Residual Block</b>
</figcaption>
<p><img src="https://mgupta70.github.io/posts/2025-06-04-yolo/media/yolov3_residual_block.png" width="500" class="figure-img"></p>
</figure>
<figure style="margin: 0; text-align: center;" class="figure">
<figcaption>
<b>YOLOv4 CSP Block</b>
</figcaption>
<img src="https://mgupta70.github.io/posts/2025-06-04-yolo/media/yolov4_csp_block.png" width="500" class="figure-img">
</figure>
</div>
<p>And replaced leakyrelu by mish</p>
<p><img src="https://mgupta70.github.io/posts/2025-06-04-yolo/media/leaky_mish.jpg" width="500"></p>
</section>
<section id="neck" class="level4">
<h4 class="anchored" data-anchor-id="neck">Neck</h4>
<p>Neck is composed of a Spatial pyramid pooling (SPP) and a Path aggregation network (PANet).</p>
<ol type="1">
<li><strong>SPP</strong> - helps with image inputs of <strong>different sizes and resolution</strong>.</li>
<li><strong>PANet</strong> - is the network used to <strong>enable multi-scale predictions</strong>. The grid sizes are now 19 x 19, 38 x 38, and 76 x 76 allowing to detect very small objects.</li>
</ol>
<figure style="margin: 0; text-align: center;" class="figure">
<figcaption>
<b>YOLOv4 SPP</b>
</figcaption>
<img src="https://mgupta70.github.io/posts/2025-06-04-yolo/media/yolov4_neck.png" width="500" class="figure-img">
</figure>
<figure style="margin: 0; text-align: center;" class="figure">
<figcaption>
<b>YOLOv4 PANet</b>
</figcaption>
<img src="https://mgupta70.github.io/posts/2025-06-04-yolo/media/yolov4_neck_pannet.png" width="500" class="figure-img">
</figure>
</section>
<section id="training-2" class="level4">
<h4 class="anchored" data-anchor-id="training-2">Training</h4>
<p>IoU loss</p>
<p><img src="https://latex.codecogs.com/png.latex?L_%7B%5Ctext%7Bposition-shape%7D%7D%20=%201%20-%20IoU(%5Ctext%7Bpred%7D,%20%5Ctext%7Btruth%7D)"></p>
<p>However, this loss only works when the bounding boxes overlap, and would not provide any moving gradient for non-overlapping cases. This is resolved by adding a penalty term, capturing the distance between the bounding box centers:</p>
<p>CIoU Complete IoU loss</p>
<p><img src="https://latex.codecogs.com/png.latex?L_%7B%5Ctext%7Bposition-shape%7D%7D%20=%201%20-%20IoU(%5Ctext%7Bpred%7D,%20%5Ctext%7Btruth%7D)%20+%20R(%5Ctext%7Bpred%7D,%20%5Ctext%7Btruth%7D)"></p>
<p>where</p>
<p><img src="https://latex.codecogs.com/png.latex?R(%5Ctext%7Bpred%7D,%20%5Ctext%7Btruth%7D)%20=%5Cfrac%7B%5Crho%5E2(b,%20b%5E%7Bth%7D)%7D%7Bc%5E2%7D%20+%20%5Calpha%20v"></p>
<p>where <code>⍴(b, bth)</code> is the Euclidean distance between the bounding box centers, <code>c</code> is the diagonal length of the smallest enclosing box covering the two boxes, and <code>v</code> imposes the consistency of the aspect ratio.</p>
<p>Resources:</p>
<ol type="1">
<li>https://arxiv.org/pdf/1506.02640 (YOLOv1)</li>
<li>https://arxiv.org/pdf/1612.08242 (YOLOv2)</li>
<li>https://arxiv.org/pdf/1804.02767 (YOLOv3)</li>
<li>https://arxiv.org/pdf/2004.10934 (YOLOv4)</li>
<li>https://arxiv.org/pdf/2304.00501 (Comparisons from YOLOv1 to YOLOv8)</li>
<li>https://newsletter.theaiedge.io/p/deep-dive-how-yolo-works-part-1-from (Summary from YOLOv1 to YOLOv4)</li>
<li>https://www.v7labs.com/blog/yolo-object-detection (Summary from YOLOv1 to YOLOv7)</li>
<li>https://medium.com/analytics-vidhya/yolo-explained-5b6f4564f31 (Summary of Yolo v1)</li>
</ol>
<p>Questions</p>
<ol type="1">
<li>1D convolution</li>
<li>1x1 kernel size convolution</li>
<li>why 1x1 and not 3x3 ?</li>
</ol>
<p>Ans: Speeds up computation. For each prediction in 3x3, we need to perform 9 computations. whereas for 1x1 only 1 computation is required.</p>
<ol start="4" type="1">
<li>Yolov1 architecture</li>
<li>Why once? How once? Why grids? What adv? What disadv?</li>
<li>IoU loss? Modern yolo loss vs old yolo losses?</li>
<li>NMS code</li>
<li>Why LeakyRelu?</li>
<li>Why replace LeakyRelu by Mish activations?</li>
</ol>
<p><img src="https://mgupta70.github.io/posts/2025-06-04-yolo/media/leaky_mish.jpg" width="500"></p>
<ol start="10" type="1">
<li>Class label smoothing?</li>
<li>Problem with IoU loss? and solutions around it?</li>
<li>Exact difference in training pipeline of 2 stage vs 1 stage object detection</li>
<li>Code for Anchor Boxes with K-Means?</li>
</ol>


</section>
</section>
</section>

 ]]></description>
  <category>Vision</category>
  <guid>https://mgupta70.github.io/posts/2025-06-04-yolo/yolo.html</guid>
  <pubDate>Wed, 04 Jun 2025 07:00:00 GMT</pubDate>
  <media:content url="https://mgupta70.github.io/posts/2025-06-04-yolo/yolo_thumb.png" medium="image" type="image/png" height="57" width="144"/>
</item>
<item>
  <title>Stack Made Easy</title>
  <dc:creator>Mohit Gupta</dc:creator>
  <link>https://mgupta70.github.io/posts/2025-05-21-stack/stack.html</link>
  <description><![CDATA[ 





<p>In this notebook, we will understand what stack is, where we interact with stack it our daily lives and how can we build a stack in Python.</p>
<p>Before understanding what stack is, let’s see 2 most common examples of our daily life interaction with a stack which is now an integral part of modern day lives with computers, tablets and smartphones.</p>
<p><strong>Internet browsing</strong> - Suppose we are browsing the pages of a news channel CNN. Initially we are at their homepage - cnn.com, then we went to read news in the Entertainment section - cnn.com/entertainment, on this page we want to read about celebrities - cnn.comentertainment/celebrities and now we want to go back to the homepage (cnn.com) and read the news in the business world - cnn.com/business. Stack is the underlying data structure which stores our browsing history and provides a convenient way for us to go back or forward from our existing page to a page that has been visited in the past.</p>
<p><img src="https://mgupta70.github.io/posts/2025-05-21-stack/st_cnn_eg.png" width="600"></p>
<p><strong>Undo/Redo operations</strong> - If we are writing text in word document, we can conveiently press Ctrl + Z to undo or Ctrl+Y to redo becuase we are storing the user operations in a stack so that user experience is enhanced where it becomes extremly simple to either undo a change or redo it.</p>
<p>We can build stack in python by 2 ways: 1. List - okay but not ideal 2. Deque - better</p>
<section id="stack-using-list" class="level4">
<h4 class="anchored" data-anchor-id="stack-using-list">1. Stack using List</h4>
<div id="c384944f" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1">browsing_history_stack <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># initialize an empty list to store browsing history</span></span>
<span id="cb1-2"></span>
<span id="cb1-3">browsing_history_stack.append(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cnn.com'</span>)</span>
<span id="cb1-4">browsing_history_stack.append(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cnn.com/entertainment'</span>)</span>
<span id="cb1-5">browsing_history_stack.append(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cnn.com/entertainment/celebrities'</span>)</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'browsing history: '</span>, browsing_history_stack)</span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If we want to revisit the last browsing page: use pop</span></span>
<span id="cb1-10"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Last page visited was: '</span>, browsing_history_stack.pop())</span>
<span id="cb1-11"></span>
<span id="cb1-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># pop removes the last page and updates the browsing_history_stack</span></span>
<span id="cb1-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'new browsing history: '</span>, browsing_history_stack)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>browsing history:  ['cnn.com', 'cnn.com/entertainment', 'cnn.com/entertainment/celebrities']
Last page visited was:  cnn.com/entertainment/celebrities
new browsing history:  ['cnn.com', 'cnn.com/entertainment']</code></pre>
</div>
</div>
<p><strong>Q. Why a <code>List</code> is not ideal for storing the browser history i.e.&nbsp;a <code>Stack</code>?</strong></p>
<p><strong>Answer</strong> History is dynamic - There is no fixed size of history. In a session, a person can browse 5 websites or 50000. There is no limit. Hence, static arrays or list cannot be used thus, dynamic array is the only option. But with dynamic array there is memory overload problem.</p>
<p>“The issue with using a list as a stack is that list uses dymanic array internally and when it reaches its capacity it will reallocate a big chunk of memory somewhere else in memory area and copy all the elements. For example in below diagram if a list has a capacity of 10 and we try to insert 11th element, it will not allocate new memory in a different memory region, copy all 10 elements and then insert the 11th element. So overhead here is (1) allocate new memory plus (2) copy all existing elements in new memory area.”</p>
<p><img src="https://mgupta70.github.io/posts/2025-05-21-stack/st_list_not_suitable.png" width="700"></p>
</section>
<section id="stack-using-deque" class="level4">
<h4 class="anchored" data-anchor-id="stack-using-deque">2. Stack using <code>deque</code></h4>
<p>Read documentation about <code>deque</code> <a href="https://docs.python.org/3/library/collections.html#collections.deque">here</a>.</p>
<div id="0b7bf2a2" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> collections <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> deque <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># import deque</span></span>
<span id="cb3-2"></span>
<span id="cb3-3">stack <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> deque() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># initialize a stack</span></span>
<span id="cb3-4"></span>
<span id="cb3-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dir</span>(stack)      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># read what different methods are present with a deque class object</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<pre><code>['__add__',
 '__class__',
 '__class_getitem__',
 '__contains__',
 '__copy__',
 '__delattr__',
 '__delitem__',
 '__dir__',
 '__doc__',
 '__eq__',
 '__format__',
 '__ge__',
 '__getattribute__',
 '__getitem__',
 '__getstate__',
 '__gt__',
 '__hash__',
 '__iadd__',
 '__imul__',
 '__init__',
 '__init_subclass__',
 '__iter__',
 '__le__',
 '__len__',
 '__lt__',
 '__module__',
 '__mul__',
 '__ne__',
 '__new__',
 '__reduce__',
 '__reduce_ex__',
 '__repr__',
 '__reversed__',
 '__rmul__',
 '__setattr__',
 '__setitem__',
 '__sizeof__',
 '__str__',
 '__subclasshook__',
 'append',
 'appendleft',
 'clear',
 'copy',
 'count',
 'extend',
 'extendleft',
 'index',
 'insert',
 'maxlen',
 'pop',
 'popleft',
 'remove',
 'reverse',
 'rotate']</code></pre>
</div>
</div>
<p>Notice, deque has many similar attributes to that of list like <code>append</code>, <code>insert</code>, <code>pop</code>, <code>remove</code>, <code>index</code>. It means using <code>deque</code> stack is going to be exactly same as if we are handling a <code>list</code> object.</p>
<div id="ba91ae27" class="cell" data-execution_count="30">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">stack <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> deque() </span>
<span id="cb5-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># add browsing history</span></span>
<span id="cb5-3">stack.append(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cnn.com'</span>)</span>
<span id="cb5-4">stack.append(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cnn.com/entertainment'</span>)</span>
<span id="cb5-5">stack.append(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cnn.com/entertainment/celebrities'</span>)</span>
<span id="cb5-6"></span>
<span id="cb5-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use of deque is same as a list</span></span>
<span id="cb5-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'browsing history: '</span>, stack)</span>
<span id="cb5-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Last page visited was: '</span>, stack.pop())</span>
<span id="cb5-10"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'new browsing history: '</span>, stack)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>browsing history:  deque(['cnn.com', 'cnn.com/entertainment', 'cnn.com/entertainment/celebrities'])
Last page visited was:  cnn.com/entertainment/celebrities
new browsing history:  deque(['cnn.com', 'cnn.com/entertainment'])</code></pre>
</div>
</div>
<p>Can we index in or slice a <code>deque</code> stack?</p>
<div id="bbbd7cd3" class="cell" data-execution_count="35">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(stack[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># indexing</span></span>
<span id="cb7-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(stack[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># slicing</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>cnn.com/entertainment</code></pre>
</div>
<div class="cell-output cell-output-error">
<div class="ansi-escaped-output">
<pre><span class="ansi-red-fg ansi-bold">---------------------------------------------------------------------------</span>
<span class="ansi-red-fg ansi-bold">TypeError</span>                                 Traceback (most recent call last)
Cell <span class="ansi-green-fg ansi-bold">In[35], line 2</span>
<span class="ansi-green-fg">      1</span> <span style="color:rgb(0,135,0)">print</span>(stack[<span style="color:rgb(98,98,98)">1</span>]) <span style="font-style:italic;color:rgb(95,135,135)"># indexing</span>
<span class="ansi-green-fg ansi-bold">----&gt; 2</span> <span style="color:rgb(0,135,0)">print</span>(stack[:<span style="color:rgb(98,98,98)">2</span>])

<span class="ansi-red-fg ansi-bold">TypeError</span>: sequence index must be integer, not 'slice'</pre>
</div>
</div>
</div>
<p>Wow!😮</p>
<p>So, with <code>deque</code> stacks, we can :</p>
<p>perform <strong>indexing</strong> ✅</p>
<p>but <strong>slicing</strong> ❌</p>
<p><em>Q. How to perform <code>slicing</code>?</em></p>
<p><em>Ans.</em> Possible solutions:</p>
<ol type="1">
<li>convert stack to list. For eg: <code>list(stack)[:2]</code></li>
<li>get one element at a time in the index range, aggregate and return the aggregated results</li>
</ol>
</section>
<section id="writing-a-stack-class" class="level3">
<h3 class="anchored" data-anchor-id="writing-a-stack-class">Writing a <code>Stack</code> class</h3>
<p>While writing a <code>Stack</code> class, we first need to think what functionalities/methods we want our <code>Stack</code> class to support.</p>
<ol type="1">
<li>We want to add elements i.e.&nbsp;<code>push</code></li>
<li>We want to get last element i.e.&nbsp;<code>pop</code></li>
<li>We want to get the <code>size</code> of the stack (e.g.&nbsp;browsing history)</li>
<li>We want to see if the stack <code>is_empty</code></li>
<li>We want to see the last element in the stack i.e.&nbsp;<code>peek</code></li>
<li>get <code>last_k_items</code></li>
<li>print the current stack i.e.&nbsp;<code>printStack</code></li>
</ol>
<div id="9ee2c5c6" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Stack:</span>
<span id="cb9-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb9-3">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.container <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> deque()</span>
<span id="cb9-4"></span>
<span id="cb9-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> push(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, item):</span>
<span id="cb9-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.container.append(item)</span>
<span id="cb9-7">    </span>
<span id="cb9-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> pop(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb9-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.container.pop()</span>
<span id="cb9-10">    </span>
<span id="cb9-11">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> size(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb9-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.container)</span>
<span id="cb9-13">    </span>
<span id="cb9-14">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> is_empty(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb9-15">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.size()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb9-16"></span>
<span id="cb9-17">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> peek(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb9-18">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.container[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb9-19">    </span>
<span id="cb9-20">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> last_k_items(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>):</span>
<span id="cb9-21">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.container)[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>k:]</span>
<span id="cb9-22">    </span>
<span id="cb9-23">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> printStack(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb9-24">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""print the stack from bottom to top """</span></span>
<span id="cb9-25">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># make a copy because pop operation would remove elements in place</span></span>
<span id="cb9-26">        temp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.container.copy()</span>
<span id="cb9-27">        stack_str <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># initialize a string to print stack</span></span>
<span id="cb9-28">        stack_str<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"**--"</span></span>
<span id="cb9-29">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># edge case: if stack is empty</span></span>
<span id="cb9-30">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(temp)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb9-31">            stack_str<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">⚠ Stack is empty'</span></span>
<span id="cb9-32">        </span>
<span id="cb9-33">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(temp)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>: </span>
<span id="cb9-34">            stack_str<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(temp.pop())<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb9-35"></span>
<span id="cb9-36">        stack_str<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">--**"</span></span>
<span id="cb9-37">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> stack_str</span></code></pre></div>
</div>
<div id="727c5589" class="cell" data-execution_count="58">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">browsing_stack <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Stack() </span>
<span id="cb10-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># add browsing history</span></span>
<span id="cb10-3">browsing_stack.push(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cnn.com'</span>)</span>
<span id="cb10-4">browsing_stack.push(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cnn.com/entertainment'</span>)</span>
<span id="cb10-5">browsing_stack.push(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cnn.com/entertainment/celebrities'</span>)</span>
<span id="cb10-6"></span>
<span id="cb10-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test methods</span></span>
<span id="cb10-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'1. browsing history: '</span>, browsing_stack.printStack())</span>
<span id="cb10-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2. Last page visited was: '</span>, browsing_stack.pop())</span>
<span id="cb10-10"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'3. new browsing history: '</span>, browsing_stack.printStack())</span>
<span id="cb10-11"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'4. Length of history: '</span>, browsing_stack.size())</span>
<span id="cb10-12"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'5. Is browsing history empty? : '</span>, browsing_stack.is_empty())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>1. browsing history:  
**--
cnn.com/entertainment/celebrities
cnn.com/entertainment
cnn.com
--**
2. Last page visited was:  cnn.com/entertainment/celebrities
3. new browsing history:  
**--
cnn.com/entertainment
cnn.com
--**
4. Length of history:  2
5. Is browsing history empty? :  False</code></pre>
</div>
</div>
<section id="section" class="level4">
<h4 class="anchored" data-anchor-id="section"></h4>
<p>From above we can convince easily that the time complexity of <code>Stack</code> is as follows:</p>
<p><img src="https://mgupta70.github.io/posts/2025-05-21-stack/st_complexity.png" width="300"></p>
<p>In different languages, Stack can be implemented as follows:</p>
<p><img src="https://mgupta70.github.io/posts/2025-05-21-stack/st_languages.png" width="500"></p>
</section>
<section id="exercise-1-write-a-function-in-python-that-can-reverse-a-string-using-stack-data-structure-use-the-stack-class-implemented-above." class="level4">
<h4 class="anchored" data-anchor-id="exercise-1-write-a-function-in-python-that-can-reverse-a-string-using-stack-data-structure-use-the-stack-class-implemented-above."><strong>Exercise-1:</strong> Write a function in python that can reverse a string using stack data structure (use the <code>Stack</code> class implemented above.)</h4>
<p><code>reverse_string("We will conquere COVID-19")</code> should return <code>"91-DIVOC ereuqnoc lliw eW"</code></p>
<p><em>Hint:</em> Treat each character as a browing history item. So our goal is to print browsing history in reverse order</p>
<div id="5c810bbd" class="cell" data-execution_count="10">
<details class="code-fold">
<summary>Show solution code</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> reverse_string(string):</span>
<span id="cb12-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># initialize a stack</span></span>
<span id="cb12-3">    mystack <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Stack()       </span>
<span id="cb12-4"></span>
<span id="cb12-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># push one character at a time</span></span>
<span id="cb12-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> char <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> string:</span>
<span id="cb12-7">        mystack.push(char)</span>
<span id="cb12-8"></span>
<span id="cb12-9">    reversed_str <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span></span>
<span id="cb12-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(mystack.size()):</span>
<span id="cb12-11">        reversed_str<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span>mystack.pop()</span>
<span id="cb12-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> reversed_str</span>
<span id="cb12-13"></span>
<span id="cb12-14"></span>
<span id="cb12-15">reverse_string(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'We will conquere COVID-19'</span>)      </span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="10">
<pre><code>'91-DIVOC ereuqnoc lliw eW'</code></pre>
</div>
</div>
</section>
<section id="exercise-2-write-a-function-in-python-that-checks-if-paranthesis-in-the-string-are-balanced-or-not.-possible-parantheses-are-or-." class="level4">
<h4 class="anchored" data-anchor-id="exercise-2-write-a-function-in-python-that-checks-if-paranthesis-in-the-string-are-balanced-or-not.-possible-parantheses-are-or-."><strong>Exercise-2:</strong> Write a function in python that checks if paranthesis in the string are balanced or not. Possible parantheses are “{}’,”()” or “[]”.</h4>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">is_balanced(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"({a+b})"</span>)     <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb14-2">is_balanced(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"))((a+b}{"</span>)   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb14-3">is_balanced(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"((a+b))"</span>)     <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb14-4">is_balanced(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"))"</span>)          <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb14-5">is_balanced(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[a+b]*(x+2y)*{gg+kk}"</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span></code></pre></div>
<div id="59079c86" class="cell" data-execution_count="23">
<details class="code-fold">
<summary>Show solution code (Without using Stack)</summary>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This solution is probably the first solution one would think without using a Stack</span></span>
<span id="cb15-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> is_balanced(string):</span>
<span id="cb15-3"></span>
<span id="cb15-4">    normal_bracket_start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'('</span></span>
<span id="cb15-5">    curly_bracket_start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'{'</span></span>
<span id="cb15-6">    square_bracket_start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'['</span></span>
<span id="cb15-7"></span>
<span id="cb15-8">    normal_bracket_start_count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb15-9">    curly_bracket_start_count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb15-10">    square_bracket_start_count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb15-11"></span>
<span id="cb15-12">    normal_bracket_end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">')'</span></span>
<span id="cb15-13">    curly_bracket_end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'}'</span></span>
<span id="cb15-14">    square_bracket_end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">']'</span></span>
<span id="cb15-15"></span>
<span id="cb15-16">    normal_bracket_end_count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb15-17">    curly_bracket_end_count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb15-18">    square_bracket_end_count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb15-19"></span>
<span id="cb15-20">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if any of the 3 paranthesis is presnt - it has to start with '(', '{' or '['. If at any instant the count of </span></span>
<span id="cb15-21">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># any _end bracket &gt; _start of that particular bracket, it means unbalanced.</span></span>
<span id="cb15-22">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Also at end, if count of _start != _end for any bracket type =&gt; unbalanced</span></span>
<span id="cb15-23"></span>
<span id="cb15-24">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># let's iterate through the characters</span></span>
<span id="cb15-25">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> char <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> string:</span>
<span id="cb15-26">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># update the counts</span></span>
<span id="cb15-27">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> char <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> normal_bracket_start:</span>
<span id="cb15-28">            normal_bracket_start_count<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb15-29">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> char <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> normal_bracket_end:</span>
<span id="cb15-30">            normal_bracket_end_count<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb15-31">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> char <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> curly_bracket_start:</span>
<span id="cb15-32">            curly_bracket_start_count<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb15-33">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> char <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> curly_bracket_end:</span>
<span id="cb15-34">            curly_bracket_end_count<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb15-35">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> char <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> square_bracket_start:</span>
<span id="cb15-36">            square_bracket_start_count<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb15-37">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> char <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> square_bracket_end:</span>
<span id="cb15-38">            square_bracket_end_count<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb15-39">        </span>
<span id="cb15-40">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if at any instant count of _end bracket &gt; _start of that particular bracket</span></span>
<span id="cb15-41">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> normal_bracket_end_count<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>normal_bracket_start_count <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> curly_bracket_end_count<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>curly_bracket_start_count <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> square_bracket_end_count<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>square_bracket_start_count:</span>
<span id="cb15-42">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb15-43"></span>
<span id="cb15-44">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># at end</span></span>
<span id="cb15-45">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> normal_bracket_end_count<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span>normal_bracket_start_count <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> curly_bracket_end_count<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span>curly_bracket_start_count <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> square_bracket_end_count<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span>square_bracket_start_count:</span>
<span id="cb15-46">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb15-47">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb15-48"></span>
<span id="cb15-49"></span>
<span id="cb15-50"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test</span></span>
<span id="cb15-51"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(is_balanced(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"({a+b})"</span>))</span>
<span id="cb15-52"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(is_balanced(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"))((a+b}{"</span>))</span>
<span id="cb15-53"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(is_balanced(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"((a+b))"</span>))  </span>
<span id="cb15-54"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(is_balanced(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"))"</span>))   </span>
<span id="cb15-55"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(is_balanced(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[a+b]*(x+2y)*{gg+kk}"</span>))</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>True
False
True
False
True</code></pre>
</div>
</div>
<div id="d3768d3a" class="cell" data-execution_count="22">
<details class="code-fold">
<summary>Show solution code (using Stack)</summary>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For balanced brackets, the closing brackets would appear in a reverse order. FOr ex:</span></span>
<span id="cb17-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if at start we have first normal and then curly like ( { then for closing we will first have a curly and then normal like }) ---(A)</span></span>
<span id="cb17-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># We can use stack, where we would store just the opening brackets and the whenever a closing bracket occurs, we pop the last element in the stack. </span></span>
<span id="cb17-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Because the last element of the stack has to be the counterpart of the closing bracket just encountered (as explained in ---(A))</span></span>
<span id="cb17-5"></span>
<span id="cb17-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> is_match(ch1, ch2):</span>
<span id="cb17-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">""" check whether the counterpart of ch1 and ch2 are same or not """</span></span>
<span id="cb17-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># storing the counterparts for the closing brackets</span></span>
<span id="cb17-9">    match_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb17-10">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">')'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'('</span>,</span>
<span id="cb17-11">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'}'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'{'</span>,</span>
<span id="cb17-12">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">']'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'['</span></span>
<span id="cb17-13">    }</span>
<span id="cb17-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> match_dict[ch1]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span>ch2</span>
<span id="cb17-15"></span>
<span id="cb17-16"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> is_balanced(string):</span>
<span id="cb17-17">    stack <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Stack()</span>
<span id="cb17-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> char <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> string:</span>
<span id="cb17-19">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># only add opening brackets to the stack</span></span>
<span id="cb17-20">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> char<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'('</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> char<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'{'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> char<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'['</span>:</span>
<span id="cb17-21">            stack.push(char)</span>
<span id="cb17-22">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if char is closing bracket</span></span>
<span id="cb17-23">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> char<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">')'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> char<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'}'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> char<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">']'</span>:</span>
<span id="cb17-24">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if there is no opening bracket in the stack and closing bracket starts</span></span>
<span id="cb17-25">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> stack.size()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb17-26">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb17-27">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb17-28">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># pop the last element in the stack by checking if it is indeed the counter part else return False</span></span>
<span id="cb17-29">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> is_match(char, stack.pop()): <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># stack.pop() gives the last element</span></span>
<span id="cb17-30">                    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb17-31">    </span>
<span id="cb17-32">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> stack.size()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb17-33">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb17-34">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb17-35">    </span>
<span id="cb17-36"></span>
<span id="cb17-37"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test</span></span>
<span id="cb17-38"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(is_balanced(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"({a+b})"</span>))</span>
<span id="cb17-39"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(is_balanced(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"))((a+b}{"</span>))</span>
<span id="cb17-40"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(is_balanced(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"((a+b))"</span>))  </span>
<span id="cb17-41"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(is_balanced(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"))"</span>))   </span>
<span id="cb17-42"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(is_balanced(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[a+b]*(x+2y)*{gg+kk}"</span>))</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>True
False
True
False
True</code></pre>
</div>
</div>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">######################</span></span>
<span id="cb19-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># code refactoring tip</span></span>
<span id="cb19-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">######################</span></span>
<span id="cb19-4"></span>
<span id="cb19-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Instead of writing 3 lines:</span></span>
<span id="cb19-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> stack.size()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb19-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb19-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb19-9"></span>
<span id="cb19-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># simply write this 1 line:</span></span>
<span id="cb19-11"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> stack.size()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span></code></pre></div>
</section>
</section>
<section id="resources" class="level3">
<h3 class="anchored" data-anchor-id="resources">Resources:</h3>
<p>Codebasics <a href="https://www.youtube.com/watch?v=zwb3GmNAtFk&amp;list=PLeo1K3hjS3uu_n_a__MI_KktGTLYopZ12&amp;index=7&amp;ab_channel=codebasics">Lecture 7</a> on Stack</p>


</section>

 ]]></description>
  <category>DSA</category>
  <guid>https://mgupta70.github.io/posts/2025-05-21-stack/stack.html</guid>
  <pubDate>Wed, 21 May 2025 07:00:00 GMT</pubDate>
  <media:content url="https://mgupta70.github.io/posts/2025-05-21-stack/stack_thumb.png" medium="image" type="image/png" height="49" width="144"/>
</item>
<item>
  <title>Hash Table Made Easy</title>
  <dc:creator>Mohit Gupta</dc:creator>
  <link>https://mgupta70.github.io/posts/2025-05-20-hash-map/Hash Table.html</link>
  <description><![CDATA[ 





<p>In this notebook, we will understand and build Hash Table aka Dictionary in Python from scratch. We will build it step-by-step after understanding its core concepts.</p>
<div id="1305cfc1" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># type hints</span></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> typing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> List, Union</span></code></pre></div>
</div>
<p><strong>Q. Why do we need Dictionary or a Hash map? Why not simply use array?</strong></p>
<p>Answer: 2 reasons</p>
<ol type="1">
<li>Searching in array has O(n) time-complexity whereas searching in dictionary has a constant O(1) time-complexity.</li>
</ol>
<p><img src="https://mgupta70.github.io/posts/2025-05-20-hash-map/ht_vs_list_search_bigO.png" alt="node" width="800" height="450"></p>
<ol start="2" type="1">
<li>Another reason for using Hash table/ Hash map is that it make its use more intuitive. For example: in dictionary to find price on march 6, simply write <code>stock_prices['march 6']</code> whereas, if we are using array, we need to write a for loop as shown above. It makes the code complex, inefficient and not super-intuitive to write.</li>
</ol>
<section id="hash-function" class="level3">
<h3 class="anchored" data-anchor-id="hash-function">Hash function</h3>
<p>In Hash Table, we use a <strong>Hash Function - which converts a string key into a index value</strong> (integer).</p>
<p>For example: march 6 is converted to 9 by using sum of its ascii values and its mod with 10 as the hash function (assuming we are making a dictionary contaning only 10 elements). In Python, we can get ascii value of a character by using <code>ord</code></p>
<p><img src="https://mgupta70.github.io/posts/2025-05-20-hash-map/ht_hf.png" alt="hash_fnc" width="250" height="250"></p>
<p>Let’s write a code to do this i.e.&nbsp;convert a string key into an index</p>
<div id="58d8fcf4" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_hash(key):</span>
<span id="cb2-2">    total <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb2-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> char <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> key:</span>
<span id="cb2-4">        total<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">ord</span>(char)</span>
<span id="cb2-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> total<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># assuming 10 is the size of array</span></span>
<span id="cb2-6"></span>
<span id="cb2-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'march 6: hashes into the index value = '</span>, get_hash(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'march 6'</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>march 6: hashes into the index value =  9</code></pre>
</div>
</div>
<p>Great! it works. Now, we can try writing the code for <code>HashTable</code> class.</p>
</section>
<section id="hashtable" class="level3">
<h3 class="anchored" data-anchor-id="hashtable">HashTable</h3>
<p>Before diving into the code, it’s a good idea to pause for a moment and think what different methods/functionalities we want our <code>HashTable</code>to support. Once we have a clear understanding of these requirements, writing the code becomes much simpler.</p>
<p>Throughout this blog, I will include visual diagrams to help illustrate what we’re aiming to build with the <code>HashTable</code>. These images will serve as mental maps, making it easier to write and understand the code. (Being able to visualize how data structures work is key to mastering them. Once you can visualize them, you’ll be able to code them effortlessly—without memorizing a single line.)</p>
<p><strong>Q. What functions we want in <code>HashTable</code>?</strong></p>
<p><strong>Answer: </strong></p>
<ol type="1">
<li><p>We want to <code>add</code> a key-value pair</p></li>
<li><p>We want to <code>get</code> value by supplying key</p></li>
<li><p>We want to <code>remove</code> by supplying key</p></li>
</ol>
<p>To implement any of the above functionalities, we’ll first need a way to hash a key into an integer index—since computers operate on numbers, not strings. (Technically, computers can handle strings, but only by converting them to numerical codes, which is abstracted away from us.)</p>
<p>Once we have this index, we’ll use it to internally manipulate data in the array to achieve the desired functionality.</p>
<p>Based on the information presented above, the simplest signature of <code>HashTable</code> would look like this:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> HashTable:</span>
<span id="cb4-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb4-3">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">pass</span></span>
<span id="cb4-4"></span>
<span id="cb4-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_hash(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, key: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>):</span>
<span id="cb4-6">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">""" converts a key into index (int) """</span></span>
<span id="cb4-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">pass</span></span>
<span id="cb4-8"></span>
<span id="cb4-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> add(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, key: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, value: Union[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>]):</span>
<span id="cb4-10">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">""" adds a key-value pair """</span></span>
<span id="cb4-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">pass</span></span>
<span id="cb4-12"></span>
<span id="cb4-13">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, key: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>):</span>
<span id="cb4-14">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">""" outputs value given a key """</span></span>
<span id="cb4-15">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">pass</span></span>
<span id="cb4-16"></span>
<span id="cb4-17">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> remove(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, key:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>):</span>
<span id="cb4-18">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">""" removes key-value given a key """</span></span>
<span id="cb4-19">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">pass</span></span></code></pre></div>
<p>Let’s start coding it.</p>
<p>We will try to test it for a simple case illustrated below:</p>
<p><img src="https://mgupta70.github.io/posts/2025-05-20-hash-map/ht_sample_data.png" alt="node" width="300" height="200"></p>
<div id="3afe3559" class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> HashTable:</span>
<span id="cb5-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb5-3">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.MAX <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># assume 10 is the size of dictionary</span></span>
<span id="cb5-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.arr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.MAX)] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># allocate memory</span></span>
<span id="cb5-5"></span>
<span id="cb5-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_hash(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, key: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>):</span>
<span id="cb5-7">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">""" converts a key into index (int) """</span></span>
<span id="cb5-8">        total <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb5-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> char <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> key:</span>
<span id="cb5-10">            total<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">ord</span>(char)</span>
<span id="cb5-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> total<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.MAX</span>
<span id="cb5-12"></span>
<span id="cb5-13">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> add(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, key: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, value: Union[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>]):</span>
<span id="cb5-14">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">""" adds a key-value pair """</span></span>
<span id="cb5-15">        idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.get_hash(key) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get the index for a key</span></span>
<span id="cb5-16">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.arr[idx] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> value    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># insert value at the calculated index</span></span>
<span id="cb5-17"></span>
<span id="cb5-18">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, key: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>):</span>
<span id="cb5-19">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">""" outputs value given a key """</span></span>
<span id="cb5-20">        idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.get_hash(key) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get the index for a key</span></span>
<span id="cb5-21">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.arr[idx]     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># return the value at the calculated index</span></span>
<span id="cb5-22"></span>
<span id="cb5-23">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> remove(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, key:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>):</span>
<span id="cb5-24">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">""" removes value given a key """</span></span>
<span id="cb5-25">        idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.get_hash(key) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get the index for a key</span></span>
<span id="cb5-26">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.arr[idx] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># set the value to None at the calculated index</span></span></code></pre></div>
</div>
<div id="41e0d1af" class="cell" data-execution_count="34">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Let's test the code we created so far </span></span>
<span id="cb6-2">ht <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> HashTable()</span>
<span id="cb6-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'array on initialization'</span>, ht.arr)</span>
<span id="cb6-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># add values</span></span>
<span id="cb6-5">ht.add(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'march 6'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">310</span>)</span>
<span id="cb6-6">ht.add(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'march 7'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">340</span>)</span>
<span id="cb6-7">ht.add(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'march 8'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">380</span>)</span>
<span id="cb6-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'after adding data'</span>, ht.arr)</span>
<span id="cb6-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get value</span></span>
<span id="cb6-10"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'value on march 6 is: '</span>, ht.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'march 6'</span>))</span>
<span id="cb6-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># remove value</span></span>
<span id="cb6-12">ht.remove(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'march 8'</span>)</span>
<span id="cb6-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'after removal: value on march 8 is: '</span>, ht.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'march 8'</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>array on initialization [None, None, None, None, None, None, None, None, None, None]
after adding data [340, 380, None, None, None, None, None, None, None, 310]
value on march 6 is:  310
after removal: value on march 8 is:  None</code></pre>
</div>
</div>
<p>Great! this works as expected! Now let’s do testing on edge cases.</p>
<div id="4b4be24f" class="cell" data-execution_count="35">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Edge case-1: get value for a non-existent key</span></span>
<span id="cb8-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'value on march 17 is: '</span>, ht.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'march 17'</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>value on march 17 is:  310</code></pre>
</div>
</div>
<p>Oops!</p>
<p><strong>Why are we getting the value for a non-existent key like <code>march 17</code> to be the same as the value for <code>march 6</code>?</strong></p>
<p><strong>Answer:</strong> This happened because both <code>march 17</code> and <code>march 6</code> produced the same index - 9 - when passed through our <code>get_hash</code> function. And, since our <code>get</code> method relies solely on this index and ddoesn’t verify whether the actual string key exists at that index, it ends up returning an incorrect value.</p>
<p><em>Note:</em> In fact, there can be <strong>multiple string keys</strong> that can generate the same hash value (in this case, <code>9</code>) when processed by our hash function, <code>get_hash</code>.This phenomenon is known as a hash <strong>collision</strong>, and it’s the reason why we got a misleading result for <code>march 17</code>.</p>
<div id="dbd75f4a" class="cell" data-execution_count="37">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Edge case-2: add a new key-value pair</span></span>
<span id="cb10-2">ht.add(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'march 17'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">459</span>)</span>
<span id="cb10-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Now get the value of march 6</span></span>
<span id="cb10-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'value on march 6 is: '</span>, ht.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'march 6'</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>value on march 6 is:  459</code></pre>
</div>
</div>
<p>Oops!</p>
<p><strong>Why are we getting a wrong value for <code>march 6</code>? Initially it was <code>310</code> and now it comes out as <code>459</code>. Why?</strong></p>
<p>Answer: This happened because of the same index problem that we discussed above. Since the index of both <code>march 17</code> and <code>march 6</code> is 9, when we added <code>march 17</code>’s data, it <strong>overwrote</strong> at index <code>9</code> (which was for <code>march 6</code>) with the new valu the new value of <code>459</code> and removed <code>310</code>. That’s why we don’t see the original value. As mentioned previously, this is called as <strong>Collision</strong></p>
<p><img src="https://mgupta70.github.io/posts/2025-05-20-hash-map/ht_collision_9.png" width="300"></p>
<p>To solve both these challenges (Edge cases 1 &amp; 2), we need to modify our code to start <strong>storing the key along with value as a tuple</strong>., We can do this by initializing the array as an array of arrays (or lists).</p>
<p>But before we implement this change, let’s first refactor our code to use Python’s standard operators like <code>__getitem__</code>, <code>__setitem__</code>, and <code>__delitem__</code> to make use of <code>HashTable</code> more intuitive.</p>
<div id="9471dedd" class="cell" data-execution_count="43">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> HashTable:</span>
<span id="cb12-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb12-3">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.MAX <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># assume 10 is the size of dictionary</span></span>
<span id="cb12-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.arr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.MAX)] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># allocate memory</span></span>
<span id="cb12-5"></span>
<span id="cb12-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_hash(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, key: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>):</span>
<span id="cb12-7">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">""" converts a key into index (int) """</span></span>
<span id="cb12-8">        total <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb12-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> char <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> key:</span>
<span id="cb12-10">            total<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">ord</span>(char)</span>
<span id="cb12-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> total<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.MAX</span>
<span id="cb12-12"></span>
<span id="cb12-13">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__setitem__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, key: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, value: Union[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>]):</span>
<span id="cb12-14">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">""" adds a key-value pair """</span></span>
<span id="cb12-15">        idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.get_hash(key) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get the index for a key</span></span>
<span id="cb12-16">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.arr[idx] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> value    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># insert value at the calculated index</span></span>
<span id="cb12-17"></span>
<span id="cb12-18">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__getitem__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, key: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>):</span>
<span id="cb12-19">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">""" outputs value given a key """</span></span>
<span id="cb12-20">        idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.get_hash(key) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get the index for a key</span></span>
<span id="cb12-21">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.arr[idx]     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># return the value at the calculated index</span></span>
<span id="cb12-22"></span>
<span id="cb12-23">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__delitem__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, key:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>):</span>
<span id="cb12-24">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">""" removes value given a key """</span></span>
<span id="cb12-25">        idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.get_hash(key) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get the index for a key</span></span>
<span id="cb12-26">        <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">del</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.arr[idx]     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># delete value at the calculated index</span></span></code></pre></div>
</div>
<div id="c4299fcf" class="cell" data-execution_count="45">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Let's test the code we created so far </span></span>
<span id="cb13-2">ht <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> HashTable()</span>
<span id="cb13-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># add values</span></span>
<span id="cb13-4">ht[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'march 6'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">310</span></span>
<span id="cb13-5">ht[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'march 7'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">340</span></span>
<span id="cb13-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'after adding data'</span>, ht.arr)</span>
<span id="cb13-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get value</span></span>
<span id="cb13-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'value on march 6 is: '</span>, ht[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'march 6'</span>])</span>
<span id="cb13-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># remove value</span></span>
<span id="cb13-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">del</span> ht[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'march 7'</span>]</span>
<span id="cb13-11"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'after removal of march 7: '</span>, ht.arr)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>after adding data [340, None, None, None, None, None, None, None, None, 310]
value on march 6 is:  310
after removal of march 7:  [None, None, None, None, None, None, None, None, 310]</code></pre>
</div>
</div>
</section>
<section id="handling-collisions" class="level3">
<h3 class="anchored" data-anchor-id="handling-collisions">Handling Collisions</h3>
<p>There are 2 ways to handle collisions.</p>
<section id="chaining" class="level4">
<h4 class="anchored" data-anchor-id="chaining">1. Chaining:</h4>
<p><img src="https://mgupta70.github.io/posts/2025-05-20-hash-map/ht_chaining.png" width="600"></p>
<p>Here, we do 2 things.</p>
<ol type="A">
<li><p>we store a <strong>list</strong> at each index instead of single element (as briefly discussed earlier).</p></li>
<li><p>Each element in this list is a <strong>tuple</strong> of <code>(key, value)</code> pair.</p></li>
</ol>
<p>Time complexity to retrieve an element in this case is O(n) in the worst-case, because we may need to scan through all elements in the list at a given index to find the correct key.</p>
</section>
<section id="linear-probing" class="level4">
<h4 class="anchored" data-anchor-id="linear-probing">2. Linear Probing:</h4>
<p><img src="https://mgupta70.github.io/posts/2025-05-20-hash-map/ht_linear_probing.png" width="700"></p>
<p>Instead of using lists at each index, <strong>linear probing</strong> handles collisions by searching for the next available empty slot in the array.</p>
<p>For eg. in the above image (LEFT), a collision occurs at index <code>9</code>. To insert the key <code>march 17</code>, we look at the following indices one by one. Since index <code>9</code> is already occupied and it’s the end of the array, we wrap around to the beginning. We find that index <code>1</code> is empty, so we store the <code>(march 17, 459)</code> pair there, as shown on the RIGHT.</p>
<p>Now, let’s build hash table first with Chaining technique to handle collision and then Linear Probing.</p>
</section>
<section id="chaining-1" class="level4">
<h4 class="anchored" data-anchor-id="chaining-1">Chaining</h4>
<div id="6d59462b" class="cell" data-execution_count="98">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> HashTable:</span>
<span id="cb15-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb15-3">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.MAX <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> </span>
<span id="cb15-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.arr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [[] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.MAX)] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># initialize list in each memory location instead of None</span></span>
<span id="cb15-5"></span>
<span id="cb15-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_hash(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, key: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>):</span>
<span id="cb15-7">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">""" converts a key into index (int) """</span></span>
<span id="cb15-8">        total <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb15-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> char <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> key:</span>
<span id="cb15-10">            total<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">ord</span>(char)</span>
<span id="cb15-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> total<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.MAX</span>
<span id="cb15-12"></span>
<span id="cb15-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">############################################</span></span>
<span id="cb15-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># # Partially correct but Incorrect 💔 😢</span></span>
<span id="cb15-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#############################################</span></span>
<span id="cb15-16">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># def __setitem__(self, key: str, value: Union[str, int]):</span></span>
<span id="cb15-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     """ adds a key-value pair """</span></span>
<span id="cb15-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     idx = self.get_hash(key)              # get the index for a key</span></span>
<span id="cb15-19">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     self.arr[idx].append((key, value))    # append (key, value) tuple to the list</span></span>
<span id="cb15-20">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">### The problem with above function is - if we add same key twice with different values, it will store both (key, value) tuples.</span></span>
<span id="cb15-21">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">### Ideally, it should update the old value by the new balue for the repeated key.</span></span>
<span id="cb15-22"></span>
<span id="cb15-23">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">############################################</span></span>
<span id="cb15-24">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># # Partially correct but Incorrect 💔 😢</span></span>
<span id="cb15-25">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#############################################</span></span>
<span id="cb15-26">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># def __setitem__(self, key: str, value: Union[str, int]):</span></span>
<span id="cb15-27">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     """ adds a key-value pair """</span></span>
<span id="cb15-28">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     idx = self.get_hash(key) # get the index for a key</span></span>
<span id="cb15-29"></span>
<span id="cb15-30">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     # if there is no k-v tuple yet, simply add the k-v tuple</span></span>
<span id="cb15-31">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     if len(self.arr[idx])==0:</span></span>
<span id="cb15-32">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#         self.arr[idx].append((key, value))</span></span>
<span id="cb15-33">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#         return # STOP</span></span>
<span id="cb15-34">        </span>
<span id="cb15-35">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     # else check if the key exist, and if it does then remove the existing k-v tuple and then add new k-v tuple</span></span>
<span id="cb15-36">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     existing_keys = []</span></span>
<span id="cb15-37">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     for kv in self.arr[idx]:</span></span>
<span id="cb15-38">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#         k, v = kv</span></span>
<span id="cb15-39">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#         if k==key:</span></span>
<span id="cb15-40">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#             v = value # update the value -&gt; Sadly, this won't work. Because this does not change the self.arr</span></span>
<span id="cb15-41"></span>
<span id="cb15-42">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__setitem__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, key: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, value: Union[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>]):</span>
<span id="cb15-43">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">""" adds a key-value pair """</span></span>
<span id="cb15-44">        idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.get_hash(key) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get the index for a key</span></span>
<span id="cb15-45"></span>
<span id="cb15-46">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if there is no k-v tuple yet, simply add the k-v tuple</span></span>
<span id="cb15-47">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.arr[idx])<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb15-48">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.arr[idx].append((key, value))</span>
<span id="cb15-49">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># STOP</span></span>
<span id="cb15-50">        </span>
<span id="cb15-51">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># else check if the key exist, and if it does then remove the existing k-v tuple and then add new k-v tuple</span></span>
<span id="cb15-52">        found <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb15-53">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, kv <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.arr[idx]):</span>
<span id="cb15-54">            k, v <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> kv</span>
<span id="cb15-55">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if key exists (i.e. we need to update the old value by new value), break the loop, delete the tuple at index i </span></span>
<span id="cb15-56">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span>key:</span>
<span id="cb15-57">                found <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb15-58">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span></span>
<span id="cb15-59"></span>
<span id="cb15-60">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> found:</span>
<span id="cb15-61">            <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">del</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.arr[idx][i] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># OR self.arr[idx][i] = (key,val); return</span></span>
<span id="cb15-62">        </span>
<span id="cb15-63">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Now add the new k-v tuple</span></span>
<span id="cb15-64">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.arr[idx].append((key, value))</span>
<span id="cb15-65"></span>
<span id="cb15-66"></span>
<span id="cb15-67">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__getitem__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, key: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>):</span>
<span id="cb15-68">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">""" outputs value given a key """</span></span>
<span id="cb15-69">        idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.get_hash(key) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get the index for a key</span></span>
<span id="cb15-70"></span>
<span id="cb15-71">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if the key exist, return the appropriate value else return None</span></span>
<span id="cb15-72">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> kv <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.arr[idx]:</span>
<span id="cb15-73">            k, v <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> kv</span>
<span id="cb15-74">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if key exists, return the value</span></span>
<span id="cb15-75">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span>key:</span>
<span id="cb15-76">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> v</span>
<span id="cb15-77">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># else return None</span></span>
<span id="cb15-78">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>     </span>
<span id="cb15-79"></span>
<span id="cb15-80">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__delitem__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, key:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>):</span>
<span id="cb15-81">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">""" removes value given a key """</span></span>
<span id="cb15-82">        idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.get_hash(key) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get the index for a key</span></span>
<span id="cb15-83"></span>
<span id="cb15-84">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if the key exist-&gt; delete, else raise error that key not found</span></span>
<span id="cb15-85">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, kv <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.arr[idx]):</span>
<span id="cb15-86">            k, v <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> kv</span>
<span id="cb15-87">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if key exists, return the value</span></span>
<span id="cb15-88">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span>key:</span>
<span id="cb15-89">                <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">del</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.arr[idx][i]</span>
<span id="cb15-90">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># STOP</span></span>
<span id="cb15-91">            </span>
<span id="cb15-92">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># else raise error</span></span>
<span id="cb15-93">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>((<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'⚠ key = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>key<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> not found'</span>)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># OR raise Exception(f'key = {key} not found')</span></span></code></pre></div>
</div>
<div id="70d76bf2" class="cell" data-execution_count="99">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Let's test the code we created so far </span></span>
<span id="cb16-2">ht <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> HashTable()</span>
<span id="cb16-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'array on initialization'</span>, ht.arr)</span>
<span id="cb16-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># add values</span></span>
<span id="cb16-5">ht[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'march 6'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">310</span></span>
<span id="cb16-6">ht[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'march 7'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">340</span></span>
<span id="cb16-7">ht[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'march 17'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">459</span></span>
<span id="cb16-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'after adding data'</span>, ht.arr)</span>
<span id="cb16-9"></span>
<span id="cb16-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Edge case-1: get value for a non-existent key</span></span>
<span id="cb16-11"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-- Edge case-1 -- "</span>)</span>
<span id="cb16-12"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'value on a non-existing key (march 18) is: '</span>, ht[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'march 18'</span>])</span>
<span id="cb16-13"></span>
<span id="cb16-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Edge case-2: Finding value of a key whose hash_mapping is shared across multiple data points</span></span>
<span id="cb16-15"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-- Edge case-2 -- "</span>)</span>
<span id="cb16-16"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'value on march 6 is: '</span>, ht[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'march 6'</span>])</span>
<span id="cb16-17"></span>
<span id="cb16-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># try deleting</span></span>
<span id="cb16-19"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">del</span> ht[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'march 6'</span>]</span>
<span id="cb16-20"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'after deleting an existing key (march 6): '</span>, ht.arr)</span>
<span id="cb16-21"></span>
<span id="cb16-22"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">del</span> ht[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'march 19'</span>]</span>
<span id="cb16-23"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'after deleting a non-existing key (march 19): '</span>, ht.arr)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>array on initialization [[], [], [], [], [], [], [], [], [], []]
after adding data [[('march 7', 340)], [], [], [], [], [], [], [], [], [('march 6', 310), ('march 17', 459)]]
-- Edge case-1 -- 
value on a non-existing key (march 18) is:  None
-- Edge case-2 -- 
value on march 6 is:  310
after deleting an existing key (march 6):  [[('march 7', 340)], [], [], [], [], [], [], [], [], [('march 17', 459)]]
⚠ key = march 19 not found
after deleting a non-existing key (march 19):  [[('march 7', 340)], [], [], [], [], [], [], [], [], [('march 17', 459)]]</code></pre>
</div>
</div>
<p>Great! this worked as expected.</p>
</section>
</section>
<section id="exercise-1-implement-hash-table-where-collisions-are-handled-using-linear-probing." class="level3">
<h3 class="anchored" data-anchor-id="exercise-1-implement-hash-table-where-collisions-are-handled-using-linear-probing.">Exercise-1: Implement hash table where collisions are handled using <strong>linear probing</strong>.</h3>
<p>You can use the same example as shown in the image</p>
<p><img src="https://mgupta70.github.io/posts/2025-05-20-hash-map/ht_linear_probing.png" width="700"></p>
<div id="ad33d651" class="cell" data-execution_count="100">
<details class="code-fold">
<summary>Show solution code</summary>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> HashTable:</span>
<span id="cb18-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb18-3">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.MAX <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> </span>
<span id="cb18-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.arr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.MAX)] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize the array with None at each index (not a list of lists like in Chaining)</span></span>
<span id="cb18-5"></span>
<span id="cb18-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_hash(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, key: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>):</span>
<span id="cb18-7">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">""" converts a key into index (int) """</span></span>
<span id="cb18-8">        total <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb18-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> char <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> key:</span>
<span id="cb18-10">            total<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">ord</span>(char)</span>
<span id="cb18-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> total<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.MAX</span>
<span id="cb18-12"></span>
<span id="cb18-13"></span>
<span id="cb18-14">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__setitem__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, key: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, value: Union[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>]):</span>
<span id="cb18-15">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">""" adds a key-value pair """</span></span>
<span id="cb18-16">        idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.get_hash(key) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get the index for a key</span></span>
<span id="cb18-17"></span>
<span id="cb18-18">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if slot is empty i.e. k-v does not exist for idx, insert the (key, value) pair directly</span></span>
<span id="cb18-19">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.arr[idx] <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb18-20">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.arr[idx] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (key, value)</span>
<span id="cb18-21">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># STOP</span></span>
<span id="cb18-22">        </span>
<span id="cb18-23">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># else if k-v tuple already exists and k is same as key, then update it to new (key, value) tuple</span></span>
<span id="cb18-24">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.arr[idx][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> key:</span>
<span id="cb18-25">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.arr[idx] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (key, value)</span>
<span id="cb18-26"></span>
<span id="cb18-27">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># else if k-v tuple already exists and k is different than key, search for an empty location (i.e. perform linear probing) and insert the (key, value) tuple</span></span>
<span id="cb18-28">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>: </span>
<span id="cb18-29">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.arr[idx] <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb18-30">                idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> idx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb18-31">                idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> idx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.MAX <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># to keep index in range from 0 to MAX-1. Also, it makes sure if we are at end, we start again from top</span></span>
<span id="cb18-32">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># above loop breaks as soon as idx reaches at memory space which is empty. Now insert the (key, value) tuple</span></span>
<span id="cb18-33">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.arr[idx] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (key, value)</span>
<span id="cb18-34"></span>
<span id="cb18-35"></span>
<span id="cb18-36">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__getitem__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, key: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>):</span>
<span id="cb18-37">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">""" outputs value given a key """</span></span>
<span id="cb18-38">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># As such, there is no point of using hash function, get_hash to get idx for a key. Because for collision cases, we are storing (key, value) tuple at next available locations.</span></span>
<span id="cb18-39">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># So, those cases will not be directly retrievable by indexing at idx. We would require to search through whole array arr to ensure that we do not miss it.</span></span>
<span id="cb18-40">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># We can do this linear search for any given key without coding the part where we get idx and just simply code the linear search for all key values.</span></span>
<span id="cb18-41">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># But, we will want to use get_hash to make the program run faster for cases that did not have collision.</span></span>
<span id="cb18-42"></span>
<span id="cb18-43">        idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.get_hash(key)</span>
<span id="cb18-44">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if key at idx is same as key in the argument</span></span>
<span id="cb18-45">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.arr[idx][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span>key:</span>
<span id="cb18-46">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.arr[idx][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb18-47">        </span>
<span id="cb18-48">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb18-49">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># iterate throughout the entire arr linearly, and see if key exists</span></span>
<span id="cb18-50">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> kv <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.arr:</span>
<span id="cb18-51">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> kv <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>: <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if kv is None, we won't be able to index k,v as mentioned in line below</span></span>
<span id="cb18-52">                    k, v <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> kv</span>
<span id="cb18-53">                    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> key:</span>
<span id="cb18-54">                        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> v</span>
<span id="cb18-55">                    </span>
<span id="cb18-56">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Key was not found      </span></span>
<span id="cb18-57">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"⚠ key = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>key<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> not found"</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># OR raise Exception(f"key = {key} not found") </span></span>
<span id="cb18-58">        </span>
<span id="cb18-59"></span>
<span id="cb18-60"></span>
<span id="cb18-61">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__delitem__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, key:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>):</span>
<span id="cb18-62">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">""" removes value given a key """</span></span>
<span id="cb18-63">        idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.get_hash(key) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get the index for a key</span></span>
<span id="cb18-64"></span>
<span id="cb18-65">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if key at idx is same as key in the argument</span></span>
<span id="cb18-66">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.arr[idx][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span>key:</span>
<span id="cb18-67">            <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">del</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.arr[idx]</span>
<span id="cb18-68">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># STOP</span></span>
<span id="cb18-69">        </span>
<span id="cb18-70">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb18-71">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># iterate throughout the entire arr linearly, and see if key exists</span></span>
<span id="cb18-72">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, kv <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.arr):</span>
<span id="cb18-73">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> kv <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb18-74">                    k, v <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> kv</span>
<span id="cb18-75">                    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> key:</span>
<span id="cb18-76">                        <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">del</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.arr[i]</span>
<span id="cb18-77">                        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span></span>
<span id="cb18-78">            </span>
<span id="cb18-79">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Key was not found</span></span>
<span id="cb18-80">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"⚠ key = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>key<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> not found"</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># OR raise Exception(f"key = {key} not found") </span></span>
<span id="cb18-81"></span>
<span id="cb18-82"></span>
<span id="cb18-83"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">##########################</span></span>
<span id="cb18-84"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test the code developed</span></span>
<span id="cb18-85"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">##########################</span></span>
<span id="cb18-86">ht <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> HashTable()</span>
<span id="cb18-87"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'array on initialization'</span>, ht.arr)</span>
<span id="cb18-88"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># add values</span></span>
<span id="cb18-89">ht[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'march 6'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">310</span></span>
<span id="cb18-90">ht[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'march 7'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">340</span></span>
<span id="cb18-91">ht[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'march 17'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">459</span></span>
<span id="cb18-92"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'after adding data'</span>, ht.arr)</span>
<span id="cb18-93"></span>
<span id="cb18-94"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Edge case-1: get value for a non-existent key</span></span>
<span id="cb18-95"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-- Edge case-1 -- "</span>)</span>
<span id="cb18-96"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'value on a non-existing key (march 18) is: '</span>, ht[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'march 18'</span>])</span>
<span id="cb18-97"></span>
<span id="cb18-98"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Edge case-2: Finding value of a key whose hash_mapping is shared across multiple data points</span></span>
<span id="cb18-99"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-- Edge case-2 -- "</span>)</span>
<span id="cb18-100"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'value on march 6 is: '</span>, ht[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'march 6'</span>])</span>
<span id="cb18-101"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'value on march 17 is: '</span>, ht[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'march 17'</span>])</span>
<span id="cb18-102"></span>
<span id="cb18-103"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># try deleting</span></span>
<span id="cb18-104"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">del</span> ht[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'march 6'</span>]</span>
<span id="cb18-105"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'after deleting an existing key (march 6): '</span>, ht.arr)</span>
<span id="cb18-106"></span>
<span id="cb18-107"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">del</span> ht[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'march 19'</span>]</span>
<span id="cb18-108"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'after deleting a non-existing key (march 19): '</span>, ht.arr)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>array on initialization [None, None, None, None, None, None, None, None, None, None]
after adding data [('march 7', 340), ('march 17', 459), None, None, None, None, None, None, None, ('march 6', 310)]
-- Edge case-1 -- 
⚠ key = march 18 not found
value on a non-existing key (march 18) is:  None
-- Edge case-2 -- 
value on march 6 is:  310
value on march 17 is:  459
after deleting an existing key (march 6):  [('march 7', 340), ('march 17', 459), None, None, None, None, None, None, None]
⚠ key = march 19 not found
after deleting a non-existing key (march 19):  [('march 7', 340), ('march 17', 459), None, None, None, None, None, None, None]</code></pre>
</div>
</div>
<p>We can notice that <code>march 17</code> is stored at index 1 same as what is shown in the figure attached with the question. 😎</p>
</section>
<section id="resources" class="level3">
<h3 class="anchored" data-anchor-id="resources">Resources:</h3>
<p>Codebasics <a href="https://www.youtube.com/watch?v=ea8BRGxGmlA&amp;list=PLeo1K3hjS3uu_n_a__MI_KktGTLYopZ12&amp;index=7&amp;ab_channel=codebasics">Lecture 5</a>, <a href="https://www.youtube.com/watch?v=54iv1si4YCM&amp;list=PLeo1K3hjS3uu_n_a__MI_KktGTLYopZ12&amp;index=6&amp;ab_channel=codebasics">Lecture 6</a> on Hash Table</p>


</section>

 ]]></description>
  <category>DSA</category>
  <guid>https://mgupta70.github.io/posts/2025-05-20-hash-map/Hash Table.html</guid>
  <pubDate>Tue, 20 May 2025 07:00:00 GMT</pubDate>
  <media:content url="https://mgupta70.github.io/posts/2025-05-20-hash-map/ht_thumb.png" medium="image" type="image/png" height="96" width="144"/>
</item>
<item>
  <title>Linked List Made Easy</title>
  <dc:creator>Mohit Gupta</dc:creator>
  <link>https://mgupta70.github.io/posts/2025-05-19-linked-list/Linked_List.html</link>
  <description><![CDATA[ 





<p>In this notebook, we will understand and build Linked List from scratch. We will build it step-by-step after understanding its core concepts. I will also perform testing and debugging of the code to show how we read errors, understand and debug them. This is going to be a long blog but quick to read since most of the code is copy pasted multiple times within the notebook.</p>
<div id="1305cfc1" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># type hints</span></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> typing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> List, Union</span></code></pre></div>
</div>
<p>A Linked List is made up of nodes, where nodes contain data and a pointer to the next node.</p>
<p><img src="https://mgupta70.github.io/posts/2025-05-19-linked-list/ll_node.png" alt="node" width="500" height="200"></p>
<p>Let’s create a <code>Node</code> class which will have 2 attributes: data &amp; a pointer to the next node</p>
<div id="58d8fcf4" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Node:</span>
<span id="cb2-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb2-3">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data</span>
<span id="cb2-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span></span></code></pre></div>
</div>
<p>Let’s build a LinkedList in baby steps.</p>
<p>First, we will build 2 functions in linked list. One to create a linked list by adding data and another to print it so that we can visualize and debug.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> LinkedList:</span>
<span id="cb3-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb3-3">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">pass</span></span>
<span id="cb3-4"></span>
<span id="cb3-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> insert_at_beginning(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, data):</span>
<span id="cb3-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">pass</span></span>
<span id="cb3-7"></span>
<span id="cb3-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb3-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">pass</span></span></code></pre></div>
<p>Once we build the above class with 2 simple functions - <code>insert_at_beginning</code> and <code>print</code>, it will be much simpler to complete the remaining functions to add different functionalities to LinkedList</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> LinkedList:</span>
<span id="cb4-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb4-3">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">pass</span></span>
<span id="cb4-4"></span>
<span id="cb4-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> insert_at_beginning(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, data):</span>
<span id="cb4-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">pass</span></span>
<span id="cb4-7"></span>
<span id="cb4-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb4-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">pass</span></span>
<span id="cb4-10"></span>
<span id="cb4-11">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> insert_at_end(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, data):</span>
<span id="cb4-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">pass</span></span>
<span id="cb4-13"></span>
<span id="cb4-14">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> insert_values(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, data_list):</span>
<span id="cb4-15">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">pass</span></span>
<span id="cb4-16"></span>
<span id="cb4-17">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_length(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb4-18">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">pass</span></span>
<span id="cb4-19"></span>
<span id="cb4-20">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> insert_at(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, index):</span>
<span id="cb4-21">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">pass</span></span>
<span id="cb4-22"></span>
<span id="cb4-23">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> remove_at(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, index):</span>
<span id="cb4-24">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">pass</span></span></code></pre></div>
<p>It is important to realize whether inputs are required for creating any function. If not, why not. If yes, what type of inputs.</p>
<p>Let’s get started.</p>
<p><strong>Concepts: </strong></p>
<ol type="1">
<li><p>We will add <code>data</code> by creating <code>Node</code>s.</p></li>
<li><p>We use <code>head</code> to control any operation on Linked List we want to perform.</p></li>
</ol>
<p><strong><code>head</code> is an object always pointing towards the start of&nbsp;the&nbsp;linked&nbsp;list.</strong> (<em><code>head</code></em> means top/start)</p>
<p><img src="https://mgupta70.github.io/posts/2025-05-19-linked-list/ll_insert_at_beginning.png" alt="node" width="800" height="400"></p>
<div id="3afe3559" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> LinkedList:</span>
<span id="cb5-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb5-3">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># head is an object always pointing towards the head i.e. start of&nbsp;the&nbsp;linked&nbsp;list</span></span>
<span id="cb5-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step-1: initialize head to none. this will be updated once we add data to the linked list</span></span>
<span id="cb5-5"></span>
<span id="cb5-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> insert_at_beginning(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, data):</span>
<span id="cb5-7">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># In insert_at_beginning, we add element at the start of the linked list</span></span>
<span id="cb5-8">        </span>
<span id="cb5-9">        node <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Node(data, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Steps-2&amp;3: create a node with data and next pointer to the current head</span></span>
<span id="cb5-10">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> node             <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step-4: update the current head to the new node just added       </span></span>
<span id="cb5-11"></span>
<span id="cb5-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb5-13">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># to print we iterate on the node starting from the first node</span></span>
<span id="cb5-14">        itr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head</span>
<span id="cb5-15">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> itr.data <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb5-16">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Linked List is empty"</span>)</span>
<span id="cb5-17">        llstr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span></span>
<span id="cb5-18">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> itr:</span>
<span id="cb5-19">            llstr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(itr.data)</span>
<span id="cb5-20">            llstr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--&gt;'</span></span>
<span id="cb5-21">            itr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> itr.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span></span>
<span id="cb5-22">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(llstr)</span></code></pre></div>
</div>
<div id="41e0d1af" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Let's test the code we created so far by creating a linked list and adding elements at the beginning</span></span>
<span id="cb6-2">ll <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LinkedList()</span>
<span id="cb6-3">ll.insert_at_beginning(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">292</span>)</span>
<span id="cb6-4">ll.insert_at_beginning(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">301</span>)</span>
<span id="cb6-5">ll.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>301--&gt;292--&gt;</code></pre>
</div>
</div>
<div id="d93732ac" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># let's test for an edge case of empty list</span></span>
<span id="cb8-2">ll <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LinkedList()</span>
<span id="cb8-3">ll.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>()</span></code></pre></div>
<div class="cell-output cell-output-error">
<div class="ansi-escaped-output">
<pre><span class="ansi-red-fg ansi-bold">---------------------------------------------------------------------------</span>
<span class="ansi-red-fg ansi-bold">AttributeError</span>                            Traceback (most recent call last)
Cell <span class="ansi-green-fg ansi-bold">In[11], line 3</span>
<span class="ansi-green-fg">      1</span> <span style="font-style:italic;color:rgb(95,135,135)"># let's test for an edge case of empty list</span>
<span class="ansi-green-fg">      2</span> ll <span style="color:rgb(98,98,98)">=</span> LinkedList()
<span class="ansi-green-fg ansi-bold">----&gt; 3</span> ll<span style="color:rgb(98,98,98)">.</span>print()

Cell <span class="ansi-green-fg ansi-bold">In[9], line 15</span>, in <span class="ansi-cyan-fg">LinkedList.print</span><span class="ansi-blue-fg ansi-bold">(self)</span>
<span class="ansi-green-fg">     12</span> <span style="font-weight:bold;color:rgb(0,135,0)">def</span> <span style="color:rgb(0,0,255)">print</span>(<span style="color:rgb(0,135,0)">self</span>):
<span class="ansi-green-fg">     13</span>     <span style="font-style:italic;color:rgb(95,135,135)"># to print we iterate on the node starting from the first node</span>
<span class="ansi-green-fg">     14</span>     itr <span style="color:rgb(98,98,98)">=</span> <span style="color:rgb(0,135,0)">self</span><span style="color:rgb(98,98,98)">.</span>head
<span class="ansi-green-fg ansi-bold">---&gt; 15</span>     <span style="font-weight:bold;color:rgb(0,135,0)">if</span> itr<span style="color:rgb(98,98,98)">.</span>data <span style="font-weight:bold;color:rgb(175,0,255)">is</span> <span style="font-weight:bold;color:rgb(0,135,0)">None</span>:
<span class="ansi-green-fg">     16</span>         <span style="color:rgb(0,135,0)">print</span>(<span style="color:rgb(175,0,0)">"</span><span style="color:rgb(175,0,0)">Linked List is empty</span><span style="color:rgb(175,0,0)">"</span>)
<span class="ansi-green-fg">     17</span>     llstr <span style="color:rgb(98,98,98)">=</span> <span style="color:rgb(175,0,0)">"</span><span style="color:rgb(175,0,0)">"</span>

<span class="ansi-red-fg ansi-bold">AttributeError</span>: 'NoneType' object has no attribute 'data'</pre>
</div>
</div>
</div>
<p>We are getting an <code>AttributeError</code> because we are trying to refer an attribute <code>data</code> that does not even exist for an empty list. So, issue is for an empty list. It is so because empty list contains <code>None</code> element as <code>head</code> (<code>self.head = None</code>). You can see the topmost figue in insert at beginning. This <code>None</code> head does not have <code>data</code> attribute.</p>
<p>So, we need to change the code slightly and condition over the <code>self.head</code> to check for an empty list</p>
<div id="c4299fcf" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> LinkedList:</span>
<span id="cb9-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb9-3">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># head is an object always pointing towards the head i.e. start of&nbsp;the&nbsp;linked&nbsp;list</span></span>
<span id="cb9-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step-1: initialize head to none. this will be updated once we add data to the linked list</span></span>
<span id="cb9-5"></span>
<span id="cb9-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> insert_at_beginning(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, data):</span>
<span id="cb9-7">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># In insert_at_beginning, we add element at the start of the linked list</span></span>
<span id="cb9-8">        </span>
<span id="cb9-9">        node <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Node(data, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Steps-2&amp;3: create a node with data and next pointer to the current head</span></span>
<span id="cb9-10">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> node             <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step-4: update the current head to the new node just added       </span></span>
<span id="cb9-11"></span>
<span id="cb9-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):        </span>
<span id="cb9-13">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># edge case: if ll is empty</span></span>
<span id="cb9-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb9-15">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Linked List is empty!"</span>)</span>
<span id="cb9-16">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># to print we iterate on the node starting from the first node</span></span>
<span id="cb9-17">        itr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head</span>
<span id="cb9-18">        llstr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span></span>
<span id="cb9-19">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> itr:</span>
<span id="cb9-20">            llstr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(itr.data)</span>
<span id="cb9-21">            llstr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--&gt;'</span></span>
<span id="cb9-22">            itr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> itr.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span></span>
<span id="cb9-23">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(llstr)</span></code></pre></div>
</div>
<div id="6d59462b" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># let's test for an edge case of empty list</span></span>
<span id="cb10-2">ll <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LinkedList()</span>
<span id="cb10-3">ll.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Linked List is empty!
</code></pre>
</div>
</div>
<p>Great! this works as expected. Now, let’s add <code>insert_at_end</code></p>
<div id="0de37826" class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> LinkedList:</span>
<span id="cb12-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb12-3">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># head is an object always pointing towards the head i.e. start of&nbsp;the&nbsp;linked&nbsp;list</span></span>
<span id="cb12-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step-1: initialize head to none. this will be updated once we add data to the linked list</span></span>
<span id="cb12-5"></span>
<span id="cb12-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> insert_at_beginning(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, data):</span>
<span id="cb12-7">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># In insert_at_beginning, we add element at the start of the linked list</span></span>
<span id="cb12-8">        </span>
<span id="cb12-9">        node <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Node(data, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Steps-2&amp;3: create a node with data and next pointer to the current head</span></span>
<span id="cb12-10">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> node             <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step-4: update the current head to the new node just added      </span></span>
<span id="cb12-11"></span>
<span id="cb12-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):        </span>
<span id="cb12-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb12-14">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Linked List is empty"</span>)</span>
<span id="cb12-15">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># to print we iterate on the node starting from the first node</span></span>
<span id="cb12-16">        itr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head</span>
<span id="cb12-17">        llstr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span></span>
<span id="cb12-18">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> itr:</span>
<span id="cb12-19">            llstr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(itr.data)</span>
<span id="cb12-20">            llstr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--&gt;'</span></span>
<span id="cb12-21">            itr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> itr.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span></span>
<span id="cb12-22">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(llstr)</span>
<span id="cb12-23"></span>
<span id="cb12-24">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> insert_at_end(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, data):</span>
<span id="cb12-25">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remember - we use head as the iterator</span></span>
<span id="cb12-26">        itr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># start from the beginning of the list</span></span>
<span id="cb12-27">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> itr.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span>:</span>
<span id="cb12-28">            itr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> itr.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># reach the end</span></span>
<span id="cb12-29">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># once we reach end, do 2 things:</span></span>
<span id="cb12-30">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1. make the node of new data and point it to None because it is the end</span></span>
<span id="cb12-31">        node <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Node(data, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb12-32">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2. update the old end's next to the new node</span></span>
<span id="cb12-33">        itr.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> node</span>
<span id="cb12-34">        </span>
<span id="cb12-35">        </span></code></pre></div>
</div>
<p>In <code>print</code> I used while itr:, whereas in <code>insert_at_end</code>, I used <code>while itr.next</code>. Draw a diagram and think why this makes sense.</p>
<p><img src="https://mgupta70.github.io/posts/2025-05-19-linked-list/ll_itrvsitrnext.png" width="600"></p>
<p>In fact, print could be rewritten as:</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb13-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># edge case</span></span>
<span id="cb13-3">    itr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head</span>
<span id="cb13-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> itr.data <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb13-5">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Linked List is empty"</span>)</span>
<span id="cb13-6">    llstr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span></span>
<span id="cb13-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> itr.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span>: </span>
<span id="cb13-8">        llstr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(itr.data)</span>
<span id="cb13-9">        llstr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--&gt;'</span></span>
<span id="cb13-10">        itr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> itr.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span></span>
<span id="cb13-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># above code end by reaching the last node</span></span>
<span id="cb13-12">    llstr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(itr.data) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># add data about the last node</span></span>
<span id="cb13-13">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(llstr)</span></code></pre></div>
<p><img src="https://mgupta70.github.io/posts/2025-05-19-linked-list/ll_insert_at_end.png" width="400"></p>
<div id="4510dd8c" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Let's test the code we created so far:</span></span>
<span id="cb14-2">ll <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LinkedList()</span>
<span id="cb14-3">ll.insert_at_beginning(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">292</span>)</span>
<span id="cb14-4">ll.insert_at_beginning(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">301</span>)</span>
<span id="cb14-5">ll.insert_at_end(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>)</span>
<span id="cb14-6">ll.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>301--&gt;292--&gt;512--&gt;</code></pre>
</div>
</div>
<p>Now let’s code <code>insert_values</code> - which creates a new linked list from the values given as a list.</p>
<div id="9197dbda" class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> LinkedList:</span>
<span id="cb16-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb16-3">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># head is an object always pointing towards the head i.e. start of&nbsp;the&nbsp;linked&nbsp;list</span></span>
<span id="cb16-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step-1: initialize head to none. this will be updated once we add data to the linked list</span></span>
<span id="cb16-5"></span>
<span id="cb16-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> insert_at_beginning(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, data):</span>
<span id="cb16-7">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># In insert_at_beginning, we add element at the start of the linked list</span></span>
<span id="cb16-8">        </span>
<span id="cb16-9">        node <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Node(data, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Steps-2&amp;3: create a node with data and next pointer to the current head</span></span>
<span id="cb16-10">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> node             <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step-4: update the current head to the new node just added      </span></span>
<span id="cb16-11"></span>
<span id="cb16-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):        </span>
<span id="cb16-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb16-14">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Linked List is empty"</span>)</span>
<span id="cb16-15">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># to print we iterate on the node starting from the first node</span></span>
<span id="cb16-16">        itr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head</span>
<span id="cb16-17">        llstr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span></span>
<span id="cb16-18">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> itr:</span>
<span id="cb16-19">            llstr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(itr.data)</span>
<span id="cb16-20">            llstr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--&gt;'</span></span>
<span id="cb16-21">            itr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> itr.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span></span>
<span id="cb16-22">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(llstr)</span>
<span id="cb16-23"></span>
<span id="cb16-24">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> insert_at_end(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, data:  Union[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>]):</span>
<span id="cb16-25">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remember - we use head as the iterator</span></span>
<span id="cb16-26">        itr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># start from the beginning of the list</span></span>
<span id="cb16-27">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> itr.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span>:</span>
<span id="cb16-28">            itr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> itr.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># reach the end</span></span>
<span id="cb16-29">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># once we reach end, do 2 things:</span></span>
<span id="cb16-30">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1. make the node of new data and point it to None because it is the end</span></span>
<span id="cb16-31">        node <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Node(data, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb16-32">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2. update the old end's next to the new node</span></span>
<span id="cb16-33">        itr.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> node</span>
<span id="cb16-34"></span>
<span id="cb16-35">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> insert_values(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, data_list: List):</span>
<span id="cb16-36">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># initialize a new linked list</span></span>
<span id="cb16-37">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb16-38"></span>
<span id="cb16-39">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use the insert_at_beginning function</span></span>
<span id="cb16-40">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> data <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> data_list:</span>
<span id="cb16-41">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.insert_at_beginning(data)</span></code></pre></div>
</div>
<div id="53db5a24" class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Let's test the code we created so far:</span></span>
<span id="cb17-2">ll <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LinkedList()</span>
<span id="cb17-3">ll.insert_at_beginning(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">292</span>)</span>
<span id="cb17-4">ll.insert_at_beginning(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">301</span>)</span>
<span id="cb17-5">ll.insert_at_end(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>)</span>
<span id="cb17-6">ll.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>()</span>
<span id="cb17-7">new_data_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>]</span>
<span id="cb17-8">ll <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LinkedList()</span>
<span id="cb17-9">ll.insert_values(new_data_list)</span>
<span id="cb17-10">ll.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>301--&gt;292--&gt;512--&gt;
9--&gt;7--&gt;5--&gt;3--&gt;1--&gt;</code></pre>
</div>
</div>
<p>Oops! it added elements in reverse order because we used <code>insert_at_beginning</code>. To correct this, there are 2 options: 1. reverse the <code>data_list</code> and use <code>insert_at_beginning</code>: not recommended because it creates computational burden of reversing the list 2. modify the code to use <code>insert_at_end</code></p>
<p>Method-1:reverse the <code>data_list</code> and use <code>insert_at_beginning</code></p>
<div id="eb7b85bc" class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> LinkedList:</span>
<span id="cb19-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb19-3">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># head is an object always pointing towards the head i.e. start of&nbsp;the&nbsp;linked&nbsp;list</span></span>
<span id="cb19-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step-1: initialize head to none. this will be updated once we add data to the linked list</span></span>
<span id="cb19-5"></span>
<span id="cb19-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> insert_at_beginning(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, data):</span>
<span id="cb19-7">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># In insert_at_beginning, we add element at the start of the linked list</span></span>
<span id="cb19-8">        </span>
<span id="cb19-9">        node <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Node(data, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Steps-2&amp;3: create a node with data and next pointer to the current head</span></span>
<span id="cb19-10">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> node             <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step-4: update the current head to the new node just added</span></span>
<span id="cb19-11"></span>
<span id="cb19-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):        </span>
<span id="cb19-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb19-14">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Linked List is empty"</span>)</span>
<span id="cb19-15">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># to print we iterate on the node starting from the first node</span></span>
<span id="cb19-16">        itr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head</span>
<span id="cb19-17">        llstr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span></span>
<span id="cb19-18">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> itr:</span>
<span id="cb19-19">            llstr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(itr.data)</span>
<span id="cb19-20">            llstr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--&gt;'</span></span>
<span id="cb19-21">            itr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> itr.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span></span>
<span id="cb19-22">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(llstr)</span>
<span id="cb19-23"></span>
<span id="cb19-24">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> insert_at_end(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, data:  Union[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>]):</span>
<span id="cb19-25">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remember - we use head as the iterator</span></span>
<span id="cb19-26">        itr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># start from the beginning of the list</span></span>
<span id="cb19-27">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> itr.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span>:</span>
<span id="cb19-28">            itr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> itr.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># reach the end</span></span>
<span id="cb19-29">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># once we reach end, do 2 things:</span></span>
<span id="cb19-30">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1. make the node of new data and point it to None because it is the end</span></span>
<span id="cb19-31">        node <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Node(data, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb19-32">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2. update the old end's next to the new node</span></span>
<span id="cb19-33">        itr.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> node</span>
<span id="cb19-34"></span>
<span id="cb19-35">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> insert_values(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, data_list: List):</span>
<span id="cb19-36">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># initialize a new linked list</span></span>
<span id="cb19-37">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb19-38"></span>
<span id="cb19-39">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use the insert_at_beginning function</span></span>
<span id="cb19-40">        data_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data_list[::<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># reverse it</span></span>
<span id="cb19-41">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> data <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> data_list:</span>
<span id="cb19-42">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.insert_at_beginning(data)</span></code></pre></div>
</div>
<div id="bf081b0d" class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Let's test the code we created so far:</span></span>
<span id="cb20-2">new_data_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>]</span>
<span id="cb20-3">ll <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LinkedList()</span>
<span id="cb20-4">ll.insert_values(new_data_list)</span>
<span id="cb20-5">ll.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>1--&gt;3--&gt;5--&gt;7--&gt;9--&gt;</code></pre>
</div>
</div>
<p>Method-2: Modify the code and use <code>insert_at_end</code></p>
<div id="35145161" class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> LinkedList:</span>
<span id="cb22-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb22-3">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># head is an object always pointing towards the head i.e. start of&nbsp;the&nbsp;linked&nbsp;list</span></span>
<span id="cb22-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step-1: initialize head to none. this will be updated once we add data to the linked list</span></span>
<span id="cb22-5"></span>
<span id="cb22-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> insert_at_beginning(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, data):</span>
<span id="cb22-7">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># In insert_at_beginning, we add element at the start of the linked list</span></span>
<span id="cb22-8">        </span>
<span id="cb22-9">        node <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Node(data, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Steps-2&amp;3: create a node with data and next pointer to the current head</span></span>
<span id="cb22-10">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> node             <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step-4: update the current head to the new node just added    </span></span>
<span id="cb22-11"></span>
<span id="cb22-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):        </span>
<span id="cb22-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb22-14">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Linked List is empty"</span>)</span>
<span id="cb22-15">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># to print we iterate on the node starting from the first node</span></span>
<span id="cb22-16">        itr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head</span>
<span id="cb22-17">        llstr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span></span>
<span id="cb22-18">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> itr:</span>
<span id="cb22-19">            llstr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(itr.data)</span>
<span id="cb22-20">            llstr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--&gt;'</span></span>
<span id="cb22-21">            itr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> itr.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span></span>
<span id="cb22-22">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(llstr)</span>
<span id="cb22-23"></span>
<span id="cb22-24">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> insert_at_end(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, data:  Union[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>]):</span>
<span id="cb22-25">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remember - we use head as the iterator</span></span>
<span id="cb22-26">        itr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># start from the beginning of the list</span></span>
<span id="cb22-27">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> itr.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span>:</span>
<span id="cb22-28">            itr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> itr.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># reach the end</span></span>
<span id="cb22-29">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># once we reach end, do 2 things:</span></span>
<span id="cb22-30">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1. make the node of new data and point it to None because it is the end</span></span>
<span id="cb22-31">        node <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Node(data, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb22-32">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2. update the old end's next to the new node</span></span>
<span id="cb22-33">        itr.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> node</span>
<span id="cb22-34"></span>
<span id="cb22-35">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> insert_values(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, data_list: List):</span>
<span id="cb22-36">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># initialize a new linked list</span></span>
<span id="cb22-37">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb22-38"></span>
<span id="cb22-39">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use the insert_at_end function</span></span>
<span id="cb22-40">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> data <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> data_list:</span>
<span id="cb22-41">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.insert_at_end(data)</span></code></pre></div>
</div>
<div id="d3ffe125" class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Let's test the code we created so far:</span></span>
<span id="cb23-2">new_data_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>]</span>
<span id="cb23-3">ll <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LinkedList()</span>
<span id="cb23-4">ll.insert_values(new_data_list)</span>
<span id="cb23-5">ll.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>()</span></code></pre></div>
<div class="cell-output cell-output-error">
<div class="ansi-escaped-output">
<pre><span class="ansi-red-fg ansi-bold">---------------------------------------------------------------------------</span>
<span class="ansi-red-fg ansi-bold">AttributeError</span>                            Traceback (most recent call last)
Cell <span class="ansi-green-fg ansi-bold">In[21], line 4</span>
<span class="ansi-green-fg">      2</span> new_data_list <span style="color:rgb(98,98,98)">=</span> [<span style="color:rgb(98,98,98)">1</span>,<span style="color:rgb(98,98,98)">3</span>,<span style="color:rgb(98,98,98)">5</span>,<span style="color:rgb(98,98,98)">7</span>,<span style="color:rgb(98,98,98)">9</span>]
<span class="ansi-green-fg">      3</span> ll <span style="color:rgb(98,98,98)">=</span> LinkedList()
<span class="ansi-green-fg ansi-bold">----&gt; 4</span> ll<span style="color:rgb(98,98,98)">.</span>insert_values(new_data_list)
<span class="ansi-green-fg">      5</span> ll<span style="color:rgb(98,98,98)">.</span>print()

Cell <span class="ansi-green-fg ansi-bold">In[20], line 41</span>, in <span class="ansi-cyan-fg">LinkedList.insert_values</span><span class="ansi-blue-fg ansi-bold">(self, data_list)</span>
<span class="ansi-green-fg">     39</span> <span style="font-style:italic;color:rgb(95,135,135)"># Use the insert_at_end function</span>
<span class="ansi-green-fg">     40</span> <span style="font-weight:bold;color:rgb(0,135,0)">for</span> data <span style="font-weight:bold;color:rgb(175,0,255)">in</span> data_list:
<span class="ansi-green-fg ansi-bold">---&gt; 41</span>     <span style="color:rgb(0,135,0)">self</span><span style="color:rgb(98,98,98)">.</span>insert_at_end(data)

Cell <span class="ansi-green-fg ansi-bold">In[20], line 27</span>, in <span class="ansi-cyan-fg">LinkedList.insert_at_end</span><span class="ansi-blue-fg ansi-bold">(self, data)</span>
<span class="ansi-green-fg">     24</span> <span style="font-weight:bold;color:rgb(0,135,0)">def</span> <span style="color:rgb(0,0,255)">insert_at_end</span>(<span style="color:rgb(0,135,0)">self</span>, data:  Union[<span style="color:rgb(0,135,0)">str</span>, <span style="color:rgb(0,135,0)">int</span>]):
<span class="ansi-green-fg">     25</span>     <span style="font-style:italic;color:rgb(95,135,135)"># Remember - we use head as the iterator</span>
<span class="ansi-green-fg">     26</span>     itr <span style="color:rgb(98,98,98)">=</span> <span style="color:rgb(0,135,0)">self</span><span style="color:rgb(98,98,98)">.</span>head <span style="font-style:italic;color:rgb(95,135,135)"># start from the beginning of the list</span>
<span class="ansi-green-fg ansi-bold">---&gt; 27</span>     <span style="font-weight:bold;color:rgb(0,135,0)">while</span> itr<span style="color:rgb(98,98,98)">.</span>next:
<span class="ansi-green-fg">     28</span>         itr <span style="color:rgb(98,98,98)">=</span> itr<span style="color:rgb(98,98,98)">.</span>next <span style="font-style:italic;color:rgb(95,135,135)"># reach the end</span>
<span class="ansi-green-fg">     29</span>     <span style="font-style:italic;color:rgb(95,135,135)"># once we reach end, do 2 things:</span>
<span class="ansi-green-fg">     30</span>     <span style="font-style:italic;color:rgb(95,135,135)"># 1. make the node of new data and point it to None because it is the end</span>

<span class="ansi-red-fg ansi-bold">AttributeError</span>: 'NoneType' object has no attribute 'next'</pre>
</div>
</div>
</div>
<p>Oops! we got an error! This error is similar to what we saw earlier in <code>print</code> function.</p>
<p>We can see that it arises <code>insert_at_end</code> function. So, to debug, first inspect the <code>insert_at_end</code> for edge case of an empty list</p>
<div id="2bc13b0f" class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">ll <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LinkedList()</span>
<span id="cb24-2">ll.insert_at_end(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">23</span>)</span>
<span id="cb24-3">ll.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>()</span></code></pre></div>
<div class="cell-output cell-output-error">
<div class="ansi-escaped-output">
<pre><span class="ansi-red-fg ansi-bold">---------------------------------------------------------------------------</span>
<span class="ansi-red-fg ansi-bold">AttributeError</span>                            Traceback (most recent call last)
Cell <span class="ansi-green-fg ansi-bold">In[22], line 2</span>
<span class="ansi-green-fg">      1</span> ll <span style="color:rgb(98,98,98)">=</span> LinkedList()
<span class="ansi-green-fg ansi-bold">----&gt; 2</span> ll<span style="color:rgb(98,98,98)">.</span>insert_at_end(<span style="color:rgb(98,98,98)">23</span>)
<span class="ansi-green-fg">      3</span> ll<span style="color:rgb(98,98,98)">.</span>print()

Cell <span class="ansi-green-fg ansi-bold">In[20], line 27</span>, in <span class="ansi-cyan-fg">LinkedList.insert_at_end</span><span class="ansi-blue-fg ansi-bold">(self, data)</span>
<span class="ansi-green-fg">     24</span> <span style="font-weight:bold;color:rgb(0,135,0)">def</span> <span style="color:rgb(0,0,255)">insert_at_end</span>(<span style="color:rgb(0,135,0)">self</span>, data:  Union[<span style="color:rgb(0,135,0)">str</span>, <span style="color:rgb(0,135,0)">int</span>]):
<span class="ansi-green-fg">     25</span>     <span style="font-style:italic;color:rgb(95,135,135)"># Remember - we use head as the iterator</span>
<span class="ansi-green-fg">     26</span>     itr <span style="color:rgb(98,98,98)">=</span> <span style="color:rgb(0,135,0)">self</span><span style="color:rgb(98,98,98)">.</span>head <span style="font-style:italic;color:rgb(95,135,135)"># start from the beginning of the list</span>
<span class="ansi-green-fg ansi-bold">---&gt; 27</span>     <span style="font-weight:bold;color:rgb(0,135,0)">while</span> itr<span style="color:rgb(98,98,98)">.</span>next:
<span class="ansi-green-fg">     28</span>         itr <span style="color:rgb(98,98,98)">=</span> itr<span style="color:rgb(98,98,98)">.</span>next <span style="font-style:italic;color:rgb(95,135,135)"># reach the end</span>
<span class="ansi-green-fg">     29</span>     <span style="font-style:italic;color:rgb(95,135,135)"># once we reach end, do 2 things:</span>
<span class="ansi-green-fg">     30</span>     <span style="font-style:italic;color:rgb(95,135,135)"># 1. make the node of new data and point it to None because it is the end</span>

<span class="ansi-red-fg ansi-bold">AttributeError</span>: 'NoneType' object has no attribute 'next'</pre>
</div>
</div>
</div>
<p>Now we see the error! Earlier we did not see it because we used <code>insert_at_end</code> to a non-empty Linked List.</p>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">ll <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LinkedList()</span>
<span id="cb25-2">ll.insert_at_beginning(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">292</span>)</span>
<span id="cb25-3">ll.insert_at_beginning(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">301</span>)</span>
<span id="cb25-4">ll.insert_at_end(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># -&gt; adding at the end to a non-empty list and that's why we didn't see this error</span></span>
<span id="cb25-5">ll.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>()</span></code></pre></div>
<p>It is always a good idea to try visualize what would be happening, if linked list is empty or has 1 element. Then the mental visualization can be extended into a code smoothly for n numbers of elements.</p>
<p>Perhaps this could help you visualize:</p>
<p><img src="https://mgupta70.github.io/posts/2025-05-19-linked-list/ll_insert_at_end_detailed.png" width="600"></p>
<div id="c3fc78e5" class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> LinkedList:</span>
<span id="cb26-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb26-3">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># head is an object always pointing towards the head i.e. start of&nbsp;the&nbsp;linked&nbsp;list</span></span>
<span id="cb26-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step-1: initialize head to none. this will be updated once we add data to the linked list</span></span>
<span id="cb26-5"></span>
<span id="cb26-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> insert_at_beginning(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, data):</span>
<span id="cb26-7">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># In insert_at_beginning, we add element at the start of the linked list</span></span>
<span id="cb26-8">        </span>
<span id="cb26-9">        node <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Node(data, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Steps-2&amp;3: create a node with data and next pointer to the current head</span></span>
<span id="cb26-10">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> node             <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step-4: update the current head to the new node just added  </span></span>
<span id="cb26-11"></span>
<span id="cb26-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):        </span>
<span id="cb26-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb26-14">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Linked List is empty"</span>)</span>
<span id="cb26-15">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># to print we iterate on the node starting from the first node</span></span>
<span id="cb26-16">        itr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head</span>
<span id="cb26-17">        llstr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span></span>
<span id="cb26-18">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> itr:</span>
<span id="cb26-19">            llstr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(itr.data)</span>
<span id="cb26-20">            llstr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--&gt;'</span></span>
<span id="cb26-21">            itr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> itr.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span></span>
<span id="cb26-22">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(llstr)</span>
<span id="cb26-23"></span>
<span id="cb26-24">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> insert_at_end(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, data:  Union[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>]):</span>
<span id="cb26-25">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if linked list is empty, we simply add the node and make it as head</span></span>
<span id="cb26-26">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb26-27">            node <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Node(data, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create a node and point it to None because it is end</span></span>
<span id="cb26-28">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> node        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># make this node as new head so that we could iterate later</span></span>
<span id="cb26-29"></span>
<span id="cb26-30">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remember - we use head as the iterator</span></span>
<span id="cb26-31">        itr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># start from the beginning of the list</span></span>
<span id="cb26-32">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> itr.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span>:</span>
<span id="cb26-33">            itr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> itr.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># reach the end</span></span>
<span id="cb26-34">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># once we reach end, do 2 things:</span></span>
<span id="cb26-35">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1. make the node of new data and point it to None because it is the end</span></span>
<span id="cb26-36">        node <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Node(data, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb26-37">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2. update the old end's next to the new node</span></span>
<span id="cb26-38">        itr.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> node</span>
<span id="cb26-39"></span>
<span id="cb26-40">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> insert_values(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, data_list: List):</span>
<span id="cb26-41">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># initialize a new linked list</span></span>
<span id="cb26-42">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb26-43"></span>
<span id="cb26-44">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use the insert_at_end function</span></span>
<span id="cb26-45">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> data <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> data_list:</span>
<span id="cb26-46">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.insert_at_end(data)</span></code></pre></div>
</div>
<div id="96e57435" class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"></span>
<span id="cb27-2">ll <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LinkedList()</span>
<span id="cb27-3">ll.insert_at_end(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">23</span>)</span>
<span id="cb27-4">ll.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>23--&gt;23--&gt;</code></pre>
</div>
</div>
<div id="97049c17" class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1"></span>
<span id="cb29-2">ll <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LinkedList()</span>
<span id="cb29-3">ll.insert_at_end(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">23</span>)</span>
<span id="cb29-4">ll.insert_at_end(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">43</span>)</span>
<span id="cb29-5">ll.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>23--&gt;23--&gt;43--&gt;</code></pre>
</div>
</div>
<p>Here we see the first element getting repeated twice! <strong>Why?</strong></p>
<p>Because initially, when the Linked List is empty! we added the element but then we did not stop the code after adding the new node to run.</p>
<p><strong>Simply</strong> - To do so, add a <code>return</code> statement</p>
<div id="d222d6e9" class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> LinkedList:</span>
<span id="cb31-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb31-3">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># head is an object always pointing towards the head i.e. start of&nbsp;the&nbsp;linked&nbsp;list</span></span>
<span id="cb31-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step-1: initialize head to none. this will be updated once we add data to the linked list</span></span>
<span id="cb31-5"></span>
<span id="cb31-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> insert_at_beginning(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, data):</span>
<span id="cb31-7">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># In insert_at_beginning, we add element at the start of the linked list</span></span>
<span id="cb31-8">        </span>
<span id="cb31-9">        node <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Node(data, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Steps-2&amp;3: create a node with data and next pointer to the current head</span></span>
<span id="cb31-10">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> node             <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step-4: update the current head to the new node just added    </span></span>
<span id="cb31-11"></span>
<span id="cb31-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):        </span>
<span id="cb31-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb31-14">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Linked List is empty"</span>)</span>
<span id="cb31-15">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if linked list is empty, no need to run the below code. So, return</span></span>
<span id="cb31-16">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># to print we iterate on the node starting from the first node</span></span>
<span id="cb31-17">        itr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head</span>
<span id="cb31-18">        llstr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span></span>
<span id="cb31-19">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> itr:</span>
<span id="cb31-20">            llstr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(itr.data)</span>
<span id="cb31-21">            llstr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--&gt;'</span></span>
<span id="cb31-22">            itr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> itr.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span></span>
<span id="cb31-23">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(llstr)</span>
<span id="cb31-24"></span>
<span id="cb31-25">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> insert_at_end(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, data:  Union[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>]):</span>
<span id="cb31-26">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if linked list is empty</span></span>
<span id="cb31-27">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb31-28">            node <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Node(data, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create a node and point it to None because it is end</span></span>
<span id="cb31-29">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> node        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># make this node as new head (because until now there is no head i.e. linked list is empty)</span></span>
<span id="cb31-30">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># to stop the below code from running after adding the node to an empty Linked List</span></span>
<span id="cb31-31">        </span>
<span id="cb31-32">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remember - we use head as the iterator</span></span>
<span id="cb31-33">        itr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># start from the beginning of the list</span></span>
<span id="cb31-34">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> itr.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span>:</span>
<span id="cb31-35">            itr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> itr.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># reach the end</span></span>
<span id="cb31-36">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># once we reach end, do 2 things:</span></span>
<span id="cb31-37">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1. make the node of new data and point it to None because it is the end</span></span>
<span id="cb31-38">        node <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Node(data, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb31-39">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2. update the old end's next to the new node</span></span>
<span id="cb31-40">        itr.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> node</span>
<span id="cb31-41"></span>
<span id="cb31-42">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> insert_values(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, data_list: List):</span>
<span id="cb31-43">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># initialize a new linked list</span></span>
<span id="cb31-44">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb31-45"></span>
<span id="cb31-46">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use the insert_at_end function</span></span>
<span id="cb31-47">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> data <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> data_list:</span>
<span id="cb31-48">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.insert_at_end(data)</span></code></pre></div>
</div>
<div id="f440da7f" class="cell" data-execution_count="27">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">ll <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LinkedList()</span>
<span id="cb32-2">ll.insert_at_end(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">23</span>)</span>
<span id="cb32-3">ll.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>()</span>
<span id="cb32-4"></span>
<span id="cb32-5">ll <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LinkedList()</span>
<span id="cb32-6">ll.insert_at_end(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">23</span>)</span>
<span id="cb32-7">ll.insert_at_end(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">43</span>)</span>
<span id="cb32-8">ll.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>23--&gt;
23--&gt;43--&gt;</code></pre>
</div>
</div>
<p>Now, let’s test it for <code>insert_values</code></p>
<div id="a3d95d7c" class="cell" data-execution_count="28">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Let's test the code we created so far:</span></span>
<span id="cb34-2">new_data_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>]</span>
<span id="cb34-3">ll <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LinkedList()</span>
<span id="cb34-4">ll.insert_values(new_data_list)</span>
<span id="cb34-5">ll.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>1--&gt;3--&gt;5--&gt;7--&gt;9--&gt;</code></pre>
</div>
</div>
<p>Let’s now complete the code for <code>LinkedList</code> class.</p>
<p>Some helpful images for visualization for:</p>
<section id="insert_at" class="level4">
<h4 class="anchored" data-anchor-id="insert_at"><code>insert_at</code></h4>
<p><img src="https://mgupta70.github.io/posts/2025-05-19-linked-list/ll_insert_at.png" alt="node" width="800" height="400"></p>
<div id="9018c52a" class="cell">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> LinkedList:</span>
<span id="cb36-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb36-3">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># head is an object always pointing towards the head i.e. start of&nbsp;the&nbsp;linked&nbsp;list</span></span>
<span id="cb36-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step-1: initialize head to none. this will be updated once we add data to the linked list</span></span>
<span id="cb36-5"></span>
<span id="cb36-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> insert_at_beginning(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, data):</span>
<span id="cb36-7">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># In insert_at_beginning, we add element at the start of the linked list</span></span>
<span id="cb36-8">        </span>
<span id="cb36-9">        node <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Node(data, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Steps-2&amp;3: create a node with data and next pointer to the current head</span></span>
<span id="cb36-10">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> node             <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step-4: update the current head to the new node just added    </span></span>
<span id="cb36-11"></span>
<span id="cb36-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):        </span>
<span id="cb36-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb36-14">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Linked List is empty"</span>)</span>
<span id="cb36-15">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if linked list is empty, no need to run the below code. So, return</span></span>
<span id="cb36-16">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># to print we iterate on the node starting from the first node</span></span>
<span id="cb36-17">        itr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head</span>
<span id="cb36-18">        llstr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span></span>
<span id="cb36-19">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> itr:</span>
<span id="cb36-20">            llstr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(itr.data)</span>
<span id="cb36-21">            llstr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--&gt;'</span></span>
<span id="cb36-22">            itr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> itr.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span></span>
<span id="cb36-23">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(llstr)</span>
<span id="cb36-24"></span>
<span id="cb36-25">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> insert_at_end(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, data:  Union[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>]):</span>
<span id="cb36-26">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if linked list is empty</span></span>
<span id="cb36-27">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb36-28">            node <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Node(data, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create a node and point it to None because it is end</span></span>
<span id="cb36-29">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> node        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># make this node as new head (because until now there is no head i.e. linked list is empty)</span></span>
<span id="cb36-30">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># to stop the below code from running after adding the node to an empty Linked List</span></span>
<span id="cb36-31">        </span>
<span id="cb36-32">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remember - we use head as the iterator</span></span>
<span id="cb36-33">        itr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># start from the beginning of the list</span></span>
<span id="cb36-34">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> itr.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span>:</span>
<span id="cb36-35">            itr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> itr.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># reach the end</span></span>
<span id="cb36-36">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># once we reach end, do 2 things:</span></span>
<span id="cb36-37">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1. make the node of new data and point it to None because it is the end</span></span>
<span id="cb36-38">        node <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Node(data, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb36-39">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2. update the old end's next to the new node</span></span>
<span id="cb36-40">        itr.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> node</span>
<span id="cb36-41"></span>
<span id="cb36-42">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> insert_values(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, data_list: List):</span>
<span id="cb36-43">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># initialize a new linked list</span></span>
<span id="cb36-44">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb36-45"></span>
<span id="cb36-46">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use the insert_at_end function</span></span>
<span id="cb36-47">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> data <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> data_list:</span>
<span id="cb36-48">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.insert_at_end(data)</span>
<span id="cb36-49">    </span>
<span id="cb36-50">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_length(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb36-51">        counter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb36-52">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Edge case: if linked list is empty. Then we need to check the `head`</span></span>
<span id="cb36-53">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb36-54">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb36-55">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># else, iterate over head</span></span>
<span id="cb36-56">        itr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head</span>
<span id="cb36-57">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> itr:</span>
<span id="cb36-58">            itr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> itr.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span></span>
<span id="cb36-59">            counter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb36-60">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> counter</span>
<span id="cb36-61">    </span>
<span id="cb36-62">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> insert_at(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, index: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>, data: Union[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>]):</span>
<span id="cb36-63">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Edgecases: adding element at the start, or at the end </span></span>
<span id="cb36-64">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb36-65">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.insert_at_beginning(data)</span>
<span id="cb36-66">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.get_length():</span>
<span id="cb36-67">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.insert_at_end(data)</span>
<span id="cb36-68">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.get_length():</span>
<span id="cb36-69">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Exception</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Out of range"</span>)</span>
<span id="cb36-70">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># By now, we are adding element in a non-empty list and somewhere in the middle</span></span>
<span id="cb36-71">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># begin from the head (i.e. start of a lInked list)</span></span>
<span id="cb36-72">        itr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head</span>
<span id="cb36-73">        counter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb36-74">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> counter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb36-75">            itr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> itr.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span></span>
<span id="cb36-76">            counter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb36-77">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># above loop will break as soon as we are at node just before where we want to add the new data</span></span>
<span id="cb36-78">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># now add new data as a node and pointing to the next node in the original linked list</span></span>
<span id="cb36-79">        node <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Node(data, itr.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span>)</span>
<span id="cb36-80">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># now point the previous node's next pointer to the new node just added</span></span>
<span id="cb36-81">        itr.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> node</span>
<span id="cb36-82"></span>
<span id="cb36-83">        </span></code></pre></div>
</div>
<div id="027dc36e" class="cell" data-execution_count="30">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Let's test the code for get_length:</span></span>
<span id="cb37-2">new_data_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>]</span>
<span id="cb37-3">ll <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LinkedList()</span>
<span id="cb37-4">ll.insert_values(new_data_list)</span>
<span id="cb37-5">ll.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>()</span>
<span id="cb37-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(ll.get_length())</span>
<span id="cb37-7"></span>
<span id="cb37-8">new_data_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb37-9">ll <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LinkedList()</span>
<span id="cb37-10">ll.insert_values(new_data_list)</span>
<span id="cb37-11">ll.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>()</span>
<span id="cb37-12"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(ll.get_length())</span>
<span id="cb37-13"></span>
<span id="cb37-14">ll <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LinkedList()</span>
<span id="cb37-15">ll.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>()</span>
<span id="cb37-16"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(ll.get_length())</span>
<span id="cb37-17"></span>
<span id="cb37-18">ll <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LinkedList()</span>
<span id="cb37-19">ll.insert_at_beginning(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">23</span>)</span>
<span id="cb37-20">ll.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>()</span>
<span id="cb37-21"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(ll.get_length())</span>
<span id="cb37-22"></span>
<span id="cb37-23">ll <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LinkedList()</span>
<span id="cb37-24">ll.insert_at_end(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">23</span>)</span>
<span id="cb37-25">ll.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>()</span>
<span id="cb37-26"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(ll.get_length())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>1--&gt;3--&gt;5--&gt;7--&gt;9--&gt;
5
1--&gt;
1
Linked List is empty
0
23--&gt;
1
23--&gt;
1</code></pre>
</div>
</div>
<div id="ff09f3e6" class="cell" data-execution_count="31">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Let's test the code for insert_at:</span></span>
<span id="cb39-2">new_data_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'figs'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'banana'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mango'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'grapes'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'orange'</span>]</span>
<span id="cb39-3">ll <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LinkedList()</span>
<span id="cb39-4">ll.insert_values(new_data_list)</span>
<span id="cb39-5">ll.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>()</span>
<span id="cb39-6">ll.insert_at(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'jackfruit'</span>)</span>
<span id="cb39-7">ll.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>figs--&gt;banana--&gt;mango--&gt;grapes--&gt;orange--&gt;
figs--&gt;banana--&gt;jackfruit--&gt;mango--&gt;grapes--&gt;orange--&gt;</code></pre>
</div>
</div>
<div id="86cbceb3" class="cell" data-execution_count="32">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Let's test the code for insert_at:</span></span>
<span id="cb41-2">new_data_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'figs'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'banana'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mango'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'grapes'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'orange'</span>]</span>
<span id="cb41-3">ll <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LinkedList()</span>
<span id="cb41-4">ll.insert_values(new_data_list)</span>
<span id="cb41-5">ll.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>()</span>
<span id="cb41-6">ll.insert_at(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'jackfruit'</span>)</span>
<span id="cb41-7">ll.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>()</span>
<span id="cb41-8"></span>
<span id="cb41-9">new_data_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'figs'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'banana'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mango'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'grapes'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'orange'</span>]</span>
<span id="cb41-10">ll <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LinkedList()</span>
<span id="cb41-11">ll.insert_values(new_data_list)</span>
<span id="cb41-12">ll.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>()</span>
<span id="cb41-13">ll.insert_at(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'jackfruit'</span>)</span>
<span id="cb41-14">ll.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>figs--&gt;banana--&gt;mango--&gt;grapes--&gt;orange--&gt;
jackfruit--&gt;jackfruit--&gt;figs--&gt;banana--&gt;mango--&gt;grapes--&gt;orange--&gt;
figs--&gt;banana--&gt;mango--&gt;grapes--&gt;orange--&gt;
figs--&gt;banana--&gt;mango--&gt;grapes--&gt;orange--&gt;jackfruit--&gt;jackfruit--&gt;</code></pre>
</div>
</div>
<p>This is same error! We forgot to use <code>return</code> statement</p>
<div id="4970ff50" class="cell">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> LinkedList:</span>
<span id="cb43-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb43-3">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># head is an object always pointing towards the head i.e. start of&nbsp;the&nbsp;linked&nbsp;list</span></span>
<span id="cb43-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step-1: initialize head to none. this will be updated once we add data to the linked list</span></span>
<span id="cb43-5"></span>
<span id="cb43-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> insert_at_beginning(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, data):</span>
<span id="cb43-7">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># In insert_at_beginning, we add element at the start of the linked list</span></span>
<span id="cb43-8">        </span>
<span id="cb43-9">        node <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Node(data, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Steps-2&amp;3: create a node with data and next pointer to the current head</span></span>
<span id="cb43-10">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> node             <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step-4: update the current head to the new node just added    </span></span>
<span id="cb43-11"></span>
<span id="cb43-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):        </span>
<span id="cb43-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb43-14">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Linked List is empty"</span>)</span>
<span id="cb43-15">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if linked list is empty, no need to run the below code. So, return</span></span>
<span id="cb43-16">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># to print we iterate on the node starting from the first node</span></span>
<span id="cb43-17">        itr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head</span>
<span id="cb43-18">        llstr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span></span>
<span id="cb43-19">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> itr:</span>
<span id="cb43-20">            llstr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(itr.data)</span>
<span id="cb43-21">            llstr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--&gt;'</span></span>
<span id="cb43-22">            itr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> itr.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span></span>
<span id="cb43-23">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(llstr)</span>
<span id="cb43-24"></span>
<span id="cb43-25">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> insert_at_end(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, data:  Union[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>]):</span>
<span id="cb43-26">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if linked list is empty</span></span>
<span id="cb43-27">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb43-28">            node <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Node(data, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create a node and point it to None because it is end</span></span>
<span id="cb43-29">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> node        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># make this node as new head (because until now there is no head i.e. linked list is empty)</span></span>
<span id="cb43-30">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># to stop the below code from running after adding the node to an empty Linked List</span></span>
<span id="cb43-31">        </span>
<span id="cb43-32">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remember - we use head as the iterator</span></span>
<span id="cb43-33">        itr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># start from the beginning of the list</span></span>
<span id="cb43-34">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> itr.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span>:</span>
<span id="cb43-35">            itr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> itr.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># reach the end</span></span>
<span id="cb43-36">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># once we reach end, do 2 things:</span></span>
<span id="cb43-37">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1. make the node of new data and point it to None because it is the end</span></span>
<span id="cb43-38">        node <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Node(data, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb43-39">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2. update the old end's next to the new node</span></span>
<span id="cb43-40">        itr.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> node</span>
<span id="cb43-41"></span>
<span id="cb43-42">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> insert_values(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, data_list: List):</span>
<span id="cb43-43">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># initialize a new linked list</span></span>
<span id="cb43-44">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb43-45"></span>
<span id="cb43-46">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use the insert_at_end function</span></span>
<span id="cb43-47">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> data <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> data_list:</span>
<span id="cb43-48">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.insert_at_end(data)</span>
<span id="cb43-49">    </span>
<span id="cb43-50">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_length(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb43-51">        counter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb43-52">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Edge case: if linked list is empty. Then we need to check the `head`</span></span>
<span id="cb43-53">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb43-54">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb43-55">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># else, iterate over head</span></span>
<span id="cb43-56">        itr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head</span>
<span id="cb43-57">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> itr:</span>
<span id="cb43-58">            itr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> itr.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span></span>
<span id="cb43-59">            counter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb43-60">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> counter</span>
<span id="cb43-61">    </span>
<span id="cb43-62">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> insert_at(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, index: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>, data: Union[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>]):</span>
<span id="cb43-63">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Edgecases: adding element at the start, or at the end </span></span>
<span id="cb43-64">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb43-65">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.insert_at_beginning(data)</span>
<span id="cb43-66">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span></span>
<span id="cb43-67">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.get_length():</span>
<span id="cb43-68">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.insert_at_end(data)</span>
<span id="cb43-69">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span></span>
<span id="cb43-70">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.get_length():</span>
<span id="cb43-71">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Exception</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Out of range"</span>)</span>
<span id="cb43-72">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># By now, we are adding element in a non-empty list and somewhere in the middle</span></span>
<span id="cb43-73">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># begin from the head (i.e. start of a lInked list)</span></span>
<span id="cb43-74">        itr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head</span>
<span id="cb43-75">        counter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb43-76">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> counter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb43-77">            itr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> itr.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span></span>
<span id="cb43-78">            counter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb43-79">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># above loop will break as soon as we are at node just before where we want to add the new data</span></span>
<span id="cb43-80">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># now add new data as a node and pointing to the next node in the original linked list</span></span>
<span id="cb43-81">        node <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Node(data, itr.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span>)</span>
<span id="cb43-82">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># now point the previous node's next pointer to the new node just added</span></span>
<span id="cb43-83">        itr.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> node</span>
<span id="cb43-84"></span>
<span id="cb43-85">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> remove_at(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, index: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>):</span>
<span id="cb43-86">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.get_length()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb43-87">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Exception</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Out of range"</span>)</span>
<span id="cb43-88">        </span>
<span id="cb43-89">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Edgecases: removing element at the start, or at the end </span></span>
<span id="cb43-90">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb43-91">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Cannot remove from an empty list'</span>)</span>
<span id="cb43-92">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span></span>
<span id="cb43-93">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># remove the first element: simply update the head</span></span>
<span id="cb43-94">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb43-95">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># update the head(i.e. start) to the next node</span></span>
<span id="cb43-96">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># DO NOT MISS THIS</span></span>
<span id="cb43-97">        </span>
<span id="cb43-98">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># By now, we are removing element in a non-empty list and somewhere in the middle or at the end</span></span>
<span id="cb43-99">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># begin from the head (i.e. start of a lInked list)</span></span>
<span id="cb43-100">        itr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head</span>
<span id="cb43-101">        counter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb43-102">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> counter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb43-103">            itr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> itr.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span></span>
<span id="cb43-104">            counter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb43-105">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># above loop will break as soon as we are at node just before where we want to remove the data</span></span>
<span id="cb43-106">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># now we remove the node by pointing the current node to the next's next node skipping the node at index = index</span></span>
<span id="cb43-107">        itr.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> itr.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span></span></code></pre></div>
</div>
<div id="a105d765" class="cell" data-execution_count="34">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Let's test the code for insert_at:</span></span>
<span id="cb44-2">new_data_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'figs'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'banana'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mango'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'grapes'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'orange'</span>]</span>
<span id="cb44-3">ll <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LinkedList()</span>
<span id="cb44-4">ll.insert_values(new_data_list)</span>
<span id="cb44-5">ll.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>()</span>
<span id="cb44-6">ll.insert_at(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'jackfruit'</span>)</span>
<span id="cb44-7">ll.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>()</span>
<span id="cb44-8"></span>
<span id="cb44-9">new_data_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'figs'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'banana'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mango'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'grapes'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'orange'</span>]</span>
<span id="cb44-10">ll <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LinkedList()</span>
<span id="cb44-11">ll.insert_values(new_data_list)</span>
<span id="cb44-12">ll.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>()</span>
<span id="cb44-13">ll.insert_at(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'jackfruit'</span>)</span>
<span id="cb44-14">ll.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>figs--&gt;banana--&gt;mango--&gt;grapes--&gt;orange--&gt;
jackfruit--&gt;figs--&gt;banana--&gt;mango--&gt;grapes--&gt;orange--&gt;
figs--&gt;banana--&gt;mango--&gt;grapes--&gt;orange--&gt;
figs--&gt;banana--&gt;mango--&gt;grapes--&gt;orange--&gt;jackfruit--&gt;</code></pre>
</div>
</div>
<div id="432b5b1b" class="cell" data-execution_count="35">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Let's test the code for remove_at:</span></span>
<span id="cb46-2">new_data_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'figs'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'banana'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mango'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'grapes'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'orange'</span>]</span>
<span id="cb46-3">ll <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LinkedList()</span>
<span id="cb46-4">ll.insert_values(new_data_list)</span>
<span id="cb46-5">ll.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>()</span>
<span id="cb46-6">ll.remove_at(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb46-7">ll.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>()</span>
<span id="cb46-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>)</span>
<span id="cb46-9"></span>
<span id="cb46-10">new_data_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'figs'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'banana'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mango'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'grapes'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'orange'</span>]</span>
<span id="cb46-11">ll <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LinkedList()</span>
<span id="cb46-12">ll.insert_values(new_data_list)</span>
<span id="cb46-13">ll.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>()</span>
<span id="cb46-14">ll.remove_at(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb46-15">ll.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>()</span>
<span id="cb46-16"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>)</span>
<span id="cb46-17">new_data_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'figs'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'banana'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mango'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'grapes'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'orange'</span>]</span>
<span id="cb46-18">ll <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LinkedList()</span>
<span id="cb46-19">ll.insert_values(new_data_list)</span>
<span id="cb46-20">ll.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>()</span>
<span id="cb46-21">ll.remove_at(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb46-22">ll.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>()</span>
<span id="cb46-23"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>figs--&gt;banana--&gt;mango--&gt;grapes--&gt;orange--&gt;
banana--&gt;mango--&gt;grapes--&gt;orange--&gt;

figs--&gt;banana--&gt;mango--&gt;grapes--&gt;orange--&gt;
figs--&gt;banana--&gt;mango--&gt;grapes--&gt;

figs--&gt;banana--&gt;mango--&gt;grapes--&gt;orange--&gt;
figs--&gt;mango--&gt;grapes--&gt;orange--&gt;
</code></pre>
</div>
</div>
</section>
<section id="exercise-1-add-following-2-methods" class="level3">
<h3 class="anchored" data-anchor-id="exercise-1-add-following-2-methods">Exercise-1: add following 2 methods:</h3>
<div class="sourceCode" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> insert_after_value(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, data_after, data_to_insert):</span>
<span id="cb48-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Search for first occurance of data_after value in linked list</span></span>
<span id="cb48-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Now insert data_to_insert after data_after node</span></span>
<span id="cb48-4"></span>
<span id="cb48-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> remove_by_value(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, data):</span>
<span id="cb48-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove first node that contains data</span></span></code></pre></div>
<div id="ad33d651" class="cell">
<details class="code-fold">
<summary>Show solution code</summary>
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> LinkedList:</span>
<span id="cb49-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb49-3">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># head is an object always pointing towards the head i.e. start of&nbsp;the&nbsp;linked&nbsp;list</span></span>
<span id="cb49-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step-1: initialize head to none. this will be updated once we add data to the linked list</span></span>
<span id="cb49-5"></span>
<span id="cb49-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> insert_at_beginning(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, data):</span>
<span id="cb49-7">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># In insert_at_beginning, we add element at the start of the linked list</span></span>
<span id="cb49-8">        </span>
<span id="cb49-9">        node <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Node(data, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Steps-2&amp;3: create a node with data and next pointer to the current head</span></span>
<span id="cb49-10">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> node             <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step-4: update the current head to the new node just added</span></span>
<span id="cb49-11"></span>
<span id="cb49-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):        </span>
<span id="cb49-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb49-14">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Linked List is empty"</span>)</span>
<span id="cb49-15">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if linked list is empty, no need to run the below code. So, return</span></span>
<span id="cb49-16">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># to print we iterate on the node starting from the first node</span></span>
<span id="cb49-17">        itr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head</span>
<span id="cb49-18">        llstr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span></span>
<span id="cb49-19">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> itr:</span>
<span id="cb49-20">            llstr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(itr.data)</span>
<span id="cb49-21">            llstr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--&gt;'</span></span>
<span id="cb49-22">            itr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> itr.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span></span>
<span id="cb49-23">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(llstr)</span>
<span id="cb49-24"></span>
<span id="cb49-25">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> insert_at_end(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, data:  Union[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>]):</span>
<span id="cb49-26">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if linked list is empty</span></span>
<span id="cb49-27">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb49-28">            node <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Node(data, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create a node and point it to None because it is end</span></span>
<span id="cb49-29">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> node        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># make this node as new head (because until now there is no head i.e. linked list is empty)</span></span>
<span id="cb49-30">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># to stop the below code from running after adding the node to an empty Linked List</span></span>
<span id="cb49-31">        </span>
<span id="cb49-32">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remember - we use head as the iterator</span></span>
<span id="cb49-33">        itr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># start from the beginning of the list</span></span>
<span id="cb49-34">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> itr.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span>:</span>
<span id="cb49-35">            itr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> itr.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># reach the end</span></span>
<span id="cb49-36">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># once we reach end, do 2 things:</span></span>
<span id="cb49-37">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1. make the node of new data and point it to None because it is the end</span></span>
<span id="cb49-38">        node <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Node(data, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb49-39">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2. update the old end's next to the new node</span></span>
<span id="cb49-40">        itr.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> node</span>
<span id="cb49-41"></span>
<span id="cb49-42">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> insert_values(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, data_list: List):</span>
<span id="cb49-43">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># initialize a new linked list</span></span>
<span id="cb49-44">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb49-45"></span>
<span id="cb49-46">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use the insert_at_end function</span></span>
<span id="cb49-47">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> data <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> data_list:</span>
<span id="cb49-48">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.insert_at_end(data)</span>
<span id="cb49-49">    </span>
<span id="cb49-50">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_length(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb49-51">        counter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb49-52">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Edge case: if linked list is empty. Then we need to check the `head`</span></span>
<span id="cb49-53">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb49-54">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb49-55">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># else, iterate over head</span></span>
<span id="cb49-56">        itr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head</span>
<span id="cb49-57">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> itr:</span>
<span id="cb49-58">            itr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> itr.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span></span>
<span id="cb49-59">            counter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb49-60">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> counter</span>
<span id="cb49-61">    </span>
<span id="cb49-62">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> insert_at(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, index: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>, data: Union[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>]):</span>
<span id="cb49-63">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Edgecases: adding element at the start, or at the end </span></span>
<span id="cb49-64">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb49-65">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.insert_at_beginning(data)</span>
<span id="cb49-66">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span></span>
<span id="cb49-67">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.get_length():</span>
<span id="cb49-68">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.insert_at_end(data)</span>
<span id="cb49-69">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span></span>
<span id="cb49-70">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.get_length():</span>
<span id="cb49-71">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Exception</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Out of range"</span>)</span>
<span id="cb49-72">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># By now, we are adding element in a non-empty list and somewhere in the middle</span></span>
<span id="cb49-73">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># begin from the head (i.e. start of a lInked list)</span></span>
<span id="cb49-74">        itr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head</span>
<span id="cb49-75">        counter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb49-76">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> counter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb49-77">            itr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> itr.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span></span>
<span id="cb49-78">            counter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb49-79">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># above loop will break as soon as we are at node just before where we want to add the new data</span></span>
<span id="cb49-80">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># now add new data as a node and pointing to the next node in the original linked list</span></span>
<span id="cb49-81">        node <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Node(data, itr.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span>)</span>
<span id="cb49-82">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># now point the previous node's next pointer to the new node just added</span></span>
<span id="cb49-83">        itr.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> node</span>
<span id="cb49-84"></span>
<span id="cb49-85">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> remove_at(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, index: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>):</span>
<span id="cb49-86">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.get_length()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb49-87">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Exception</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Out of range"</span>)</span>
<span id="cb49-88">        </span>
<span id="cb49-89">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Edgecases: removing element at the start, or at the end </span></span>
<span id="cb49-90">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb49-91">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Cannot remove from an empty list'</span>)</span>
<span id="cb49-92">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span></span>
<span id="cb49-93">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># remove the first element: simply update the head</span></span>
<span id="cb49-94">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb49-95">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># update the head(i.e. start) to the next node</span></span>
<span id="cb49-96">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># DO NOT MISS THIS</span></span>
<span id="cb49-97">        </span>
<span id="cb49-98">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># By now, we are removing element in a non-empty list and somewhere in the middle or at the end</span></span>
<span id="cb49-99">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># begin from the head (i.e. start of a lInked list)</span></span>
<span id="cb49-100">        itr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head</span>
<span id="cb49-101">        counter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb49-102">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> counter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb49-103">            itr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> itr.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span></span>
<span id="cb49-104">            counter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb49-105">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># above loop will break as soon as we are at node just before where we want to remove the data</span></span>
<span id="cb49-106">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># now we remove the node by pointing the current node to the next's next node skipping the node at index = index</span></span>
<span id="cb49-107">        itr.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> itr.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span></span>
<span id="cb49-108">        </span>
<span id="cb49-109">        </span>
<span id="cb49-110">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> insert_after_value(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, data_after: Union[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>], data_to_insert: Union[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>]):</span>
<span id="cb49-111">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if linked list is empty, we cannot index the data_after, hence, raise error </span></span>
<span id="cb49-112">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb49-113">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Exception</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"list is empty!"</span>)</span>
<span id="cb49-114">        </span>
<span id="cb49-115">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># else iterate over linked list, and as we find the value, we insert using insert_at</span></span>
<span id="cb49-116">        itr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># initialize the iterator at the start of the head</span></span>
<span id="cb49-117">        counter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb49-118">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> itr:</span>
<span id="cb49-119">            value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> itr.data</span>
<span id="cb49-120">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> data_after:</span>
<span id="cb49-121">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span></span>
<span id="cb49-122">            counter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb49-123">            itr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> itr.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span></span>
<span id="cb49-124"></span>
<span id="cb49-125">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> counter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.get_length(): <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># means we could not find data_after in the linked list</span></span>
<span id="cb49-126">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Exception</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'data_after = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>data_after<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> not found in the Linked List.'</span>)</span>
<span id="cb49-127">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># else, insert at 1 index away from where we found data_after</span></span>
<span id="cb49-128">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.insert_at(counter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>data_to_insert)</span>
<span id="cb49-129">        </span>
<span id="cb49-130">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> remove_by_value(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, data: Union[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>]):</span>
<span id="cb49-131">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if linked list is empty, we cannot remove anything from it</span></span>
<span id="cb49-132">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb49-133">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Exception</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"list is empty!"</span>)</span>
<span id="cb49-134">        </span>
<span id="cb49-135">         <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># else iterate over linked list, and as we find the value, we remove using remove_at</span></span>
<span id="cb49-136">        itr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># initialize the iterator at the start of the head</span></span>
<span id="cb49-137">        counter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb49-138">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> itr:</span>
<span id="cb49-139">            value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> itr.data</span>
<span id="cb49-140">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> data:</span>
<span id="cb49-141">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span></span>
<span id="cb49-142">            counter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb49-143">            itr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> itr.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span></span>
<span id="cb49-144"></span>
<span id="cb49-145">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> counter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.get_length(): <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># means we could not find data to remove in the linked list</span></span>
<span id="cb49-146">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Exception</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'data = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> not found in the Linked List.'</span>)</span>
<span id="cb49-147">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># else, remove the same index where we found data</span></span>
<span id="cb49-148">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.remove_at(counter)</span>
<span id="cb49-149"></span>
<span id="cb49-150"></span>
<span id="cb49-151"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">##########################</span></span>
<span id="cb49-152"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test the code developed</span></span>
<span id="cb49-153"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">##########################</span></span>
<span id="cb49-154">new_data_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'figs'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'banana'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mango'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'grapes'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'orange'</span>]</span>
<span id="cb49-155">ll <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LinkedList()</span>
<span id="cb49-156">ll.insert_values(new_data_list)</span>
<span id="cb49-157"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Original'</span>)</span>
<span id="cb49-158">ll.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>()</span>
<span id="cb49-159">ll.insert_after_value(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'banana'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Mousami'</span>)</span>
<span id="cb49-160"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Modified'</span>)</span>
<span id="cb49-161">ll.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>()</span>
<span id="cb49-162"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>)</span>
<span id="cb49-163">ll.insert_after_value(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'orange'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Pineapple'</span>)</span>
<span id="cb49-164"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Modified-2'</span>)</span>
<span id="cb49-165">ll.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>()</span>
<span id="cb49-166"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>)</span>
<span id="cb49-167">ll.insert_after_value(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Apple'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Custard Apple'</span>)</span>
<span id="cb49-168"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Modified-3'</span>)</span>
<span id="cb49-169">ll.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>()</span>
<span id="cb49-170"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>)</span>
<span id="cb49-171"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># test remove_by_value</span></span>
<span id="cb49-172">new_data_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'figs'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'banana'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mango'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'grapes'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'orange'</span>]</span>
<span id="cb49-173">ll <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LinkedList()</span>
<span id="cb49-174">ll.insert_values(new_data_list)</span>
<span id="cb49-175"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Original'</span>)</span>
<span id="cb49-176">ll.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>()</span>
<span id="cb49-177">ll.remove_by_value(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mango'</span>)</span>
<span id="cb49-178"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Modified'</span>)</span>
<span id="cb49-179">ll.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>()</span>
<span id="cb49-180">ll.remove_by_value(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'figs'</span>)</span>
<span id="cb49-181"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Modified-2'</span>)</span>
<span id="cb49-182">ll.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>()</span>
<span id="cb49-183">ll.remove_by_value(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mango'</span>)</span>
<span id="cb49-184"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Modified-3'</span>)</span>
<span id="cb49-185">ll.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>()</span></code></pre></div>
</details>
</div>
</section>
<section id="exercise-2-can-you-test-for-yourself-by-looking-at-the-code-above-why-this-table-is-correct" class="level3">
<h3 class="anchored" data-anchor-id="exercise-2-can-you-test-for-yourself-by-looking-at-the-code-above-why-this-table-is-correct">Exercise-2: Can you test for yourself by looking at the code above why this table is correct?</h3>
<p><img src="https://mgupta70.github.io/posts/2025-05-19-linked-list/ll_bigO.png" alt="node" width="500" height="300"></p>
</section>
<section id="excercise-3-try-creating-a-doubly-linked-list-by-yourself." class="level3">
<h3 class="anchored" data-anchor-id="excercise-3-try-creating-a-doubly-linked-list-by-yourself.">Excercise-3: Try creating a <strong>doubly Linked List</strong> by yourself.</h3>
<p><strong>Hint</strong>:The only difference with regular linked list is that double linked has prev node reference as well. That way you can iterate in forward and backward direction. Your node class will look this this:</p>
<div class="sourceCode" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb50-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Node:</span>
<span id="cb50-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, prev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb50-3">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data</span>
<span id="cb50-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span></span>
<span id="cb50-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.prev <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prev</span></code></pre></div>
<section id="insert_at-1" class="level4">
<h4 class="anchored" data-anchor-id="insert_at-1">insert_at</h4>
<p><img src="https://mgupta70.github.io/posts/2025-05-19-linked-list/dll_insert_at.png" alt="dll" width="500" height="250"></p>
<div id="bd898bbf" class="cell">
<details class="code-fold">
<summary>Show solution code</summary>
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb51-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Node:</span>
<span id="cb51-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, prev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb51-3">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data</span>
<span id="cb51-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span></span>
<span id="cb51-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.prev <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prev</span>
<span id="cb51-6">    </span>
<span id="cb51-7">    </span>
<span id="cb51-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> DoublyLinkedList:</span>
<span id="cb51-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb51-10">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># initialize an empty doubly linked list. head is the start node (always)</span></span>
<span id="cb51-11">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># make a None start node as head</span></span>
<span id="cb51-12">    </span>
<span id="cb51-13">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> insert_at_beginning(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, data: Union[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>]):</span>
<span id="cb51-14"></span>
<span id="cb51-15">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Case-1: We start with an empty Linked List</span></span>
<span id="cb51-16">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb51-17">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># make a node of the data, point next of this node to old head, point prev of this node to null/None as it is the new head (i.e. start)</span></span>
<span id="cb51-18">            node <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Node(data, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head, prev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb51-19">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> node <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># make the new node as the new head (i.e. start)</span></span>
<span id="cb51-20">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span></span>
<span id="cb51-21">        </span>
<span id="cb51-22">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb51-23">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Case-2: We have some nodes in place</span></span>
<span id="cb51-24">            node <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Node(data, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head, prev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># make a node, point next to old head, point prev to none</span></span>
<span id="cb51-25">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head.prev <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> node <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># point old head's prev to new node</span></span>
<span id="cb51-26">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> node <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># make the new node as the new head (i.e. start)</span></span>
<span id="cb51-27"></span>
<span id="cb51-28">    </span>
<span id="cb51-29">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> print_forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb51-30">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb51-31">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Linked List is empty!"</span>)</span>
<span id="cb51-32">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span></span>
<span id="cb51-33">        </span>
<span id="cb51-34">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># else we will print it. </span></span>
<span id="cb51-35">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Iterate over the head, starting from the first node and moving 1 step further.</span></span>
<span id="cb51-36">        itr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head</span>
<span id="cb51-37">        llstr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span></span>
<span id="cb51-38">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> itr:</span>
<span id="cb51-39">            llstr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(itr.data)</span>
<span id="cb51-40">            llstr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--&gt;'</span></span>
<span id="cb51-41">            itr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> itr.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span></span>
<span id="cb51-42">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(llstr)</span>
<span id="cb51-43"></span>
<span id="cb51-44">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_last_node(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb51-45">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb51-46">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Linked List is empty!"</span>)</span>
<span id="cb51-47">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span></span>
<span id="cb51-48">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># else, iterate and get the last node</span></span>
<span id="cb51-49">        itr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head</span>
<span id="cb51-50">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> itr.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span>: <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># NOT itr. Can you reason-Why?🤔</span></span>
<span id="cb51-51">            itr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> itr.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span></span>
<span id="cb51-52">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> itr</span>
<span id="cb51-53"></span>
<span id="cb51-54"></span>
<span id="cb51-55">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> print_backward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb51-56">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb51-57">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Linked List is empty!"</span>)</span>
<span id="cb51-58">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span></span>
<span id="cb51-59">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># else we will print it. </span></span>
<span id="cb51-60">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Iterate over the head, starting from the first node and moving 1 step further.</span></span>
<span id="cb51-61">        itr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.get_last_node()</span>
<span id="cb51-62">        llstr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span></span>
<span id="cb51-63">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> itr:</span>
<span id="cb51-64">            llstr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(itr.data)</span>
<span id="cb51-65">            llstr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--&gt;'</span></span>
<span id="cb51-66">            itr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> itr.prev</span>
<span id="cb51-67">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(llstr)</span>
<span id="cb51-68"></span>
<span id="cb51-69">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> insert_at_end(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, data: Union[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>]):</span>
<span id="cb51-70"></span>
<span id="cb51-71">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Case-1: We start with an empty Linked List</span></span>
<span id="cb51-72">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb51-73">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># make a node of the data, point next of this node to old head, point prev of this node to null/None as it is the new head (i.e. start)</span></span>
<span id="cb51-74">            node <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Node(data, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head, prev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb51-75">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> node <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># make the new node as the new head (i.e. start)</span></span>
<span id="cb51-76">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span></span>
<span id="cb51-77">        </span>
<span id="cb51-78">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb51-79">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Case-2: We have some nodes in place</span></span>
<span id="cb51-80">            last_node <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.get_last_node() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get the last node</span></span>
<span id="cb51-81">            node <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Node(data, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, prev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>last_node) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># make a node, point next to None, point prev to last node in linked_list</span></span>
<span id="cb51-82">            last_node.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> node <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># point last node's next to new node</span></span>
<span id="cb51-83"></span>
<span id="cb51-84">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_length(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb51-85">        counter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb51-86">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Edge case: if linked list is empty. Then we need to check the `head`</span></span>
<span id="cb51-87">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb51-88">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb51-89">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># else, iterate over head</span></span>
<span id="cb51-90">        itr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head</span>
<span id="cb51-91">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> itr:</span>
<span id="cb51-92">            itr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> itr.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span></span>
<span id="cb51-93">            counter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb51-94">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> counter</span>
<span id="cb51-95">            </span>
<span id="cb51-96"></span>
<span id="cb51-97">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> insert_at(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, index: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>, data: Union[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>]):</span>
<span id="cb51-98">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Edgecases: adding element at the start, or at the end </span></span>
<span id="cb51-99">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb51-100">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.insert_at_beginning(data)</span>
<span id="cb51-101">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span></span>
<span id="cb51-102">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.get_length():</span>
<span id="cb51-103">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.insert_at_end(data)</span>
<span id="cb51-104">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span></span>
<span id="cb51-105">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.get_length():</span>
<span id="cb51-106">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Exception</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"index= </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>index<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> is Out of Range!"</span>)</span>
<span id="cb51-107">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># By now, we are adding element in a non-empty list and somewhere in the middle</span></span>
<span id="cb51-108">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># begin from the head (i.e. start of a doubly linked list)</span></span>
<span id="cb51-109">        itr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head</span>
<span id="cb51-110">        counter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb51-111">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> counter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb51-112">            itr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> itr.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span></span>
<span id="cb51-113">            counter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb51-114">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># above loop will break as soon as we are at node just before where we want to add the new data</span></span>
<span id="cb51-115">        </span>
<span id="cb51-116">        node <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Node(data, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>itr.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span>, prev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>itr)<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create node of new data; point it's next to the next node in the original linked list; point it's prev to current itr node</span></span>
<span id="cb51-117">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> node.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span>:</span>
<span id="cb51-118">            node.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span>.prev <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> node <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if next node exists, point its prev to new node</span></span>
<span id="cb51-119">        itr.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> node <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># point previous node's next pointer to the new node just added</span></span>
<span id="cb51-120"></span>
<span id="cb51-121">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> insert_values(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, data_list: List):</span>
<span id="cb51-122">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># initialize a new linked list</span></span>
<span id="cb51-123">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb51-124"></span>
<span id="cb51-125">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use the insert_at_end function</span></span>
<span id="cb51-126">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> data <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> data_list:</span>
<span id="cb51-127">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.insert_at_end(data)</span>
<span id="cb51-128"></span>
<span id="cb51-129"></span>
<span id="cb51-130"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">##########################</span></span>
<span id="cb51-131"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test the code developed</span></span>
<span id="cb51-132"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">##########################</span></span>
<span id="cb51-133">dll <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DoublyLinkedList()</span>
<span id="cb51-134">dll.print_forward()</span>
<span id="cb51-135">dll.print_backward()</span>
<span id="cb51-136"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># insert_at_beginning</span></span>
<span id="cb51-137">dll.insert_at_beginning(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'apple'</span>)</span>
<span id="cb51-138">dll.insert_at_beginning(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'banana'</span>)</span>
<span id="cb51-139">dll.insert_at_beginning(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mango'</span>)</span>
<span id="cb51-140">dll.print_forward()</span>
<span id="cb51-141">dll.print_backward()</span>
<span id="cb51-142"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># insert_at_end</span></span>
<span id="cb51-143">dll.insert_at_end(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'grapes'</span>)</span>
<span id="cb51-144">dll.print_forward()</span>
<span id="cb51-145"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># insert_at</span></span>
<span id="cb51-146">dll.insert_at(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mausami'</span>)</span>
<span id="cb51-147">dll.print_forward()</span>
<span id="cb51-148">dll.insert_at(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'0'</span>)</span>
<span id="cb51-149">dll.print_forward()</span>
<span id="cb51-150">dll.insert_at(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'6'</span>)</span>
<span id="cb51-151">dll.print_forward()</span>
<span id="cb51-152"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># insert_values</span></span>
<span id="cb51-153">dll <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DoublyLinkedList()</span>
<span id="cb51-154">fruits_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'apple'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'banana'</span>]</span>
<span id="cb51-155">dll.insert_values(fruits_list)</span>
<span id="cb51-156">dll.print_forward()</span></code></pre></div>
</details>
</div>
</section>
</section>
<section id="resources" class="level3">
<h3 class="anchored" data-anchor-id="resources">Resources:</h3>
<p><a href="https://www.youtube.com/watch?v=qp8u-frRAnU&amp;list=PLeo1K3hjS3uu_n_a__MI_KktGTLYopZ12&amp;index=4&amp;ab_channel=codebasics">Codebasics Lecture on Linked List</a></p>


</section>

 ]]></description>
  <category>DSA</category>
  <guid>https://mgupta70.github.io/posts/2025-05-19-linked-list/Linked_List.html</guid>
  <pubDate>Mon, 19 May 2025 07:00:00 GMT</pubDate>
  <media:content url="https://mgupta70.github.io/posts/2025-05-19-linked-list/ll_thumbnail.png" medium="image" type="image/png" height="66" width="144"/>
</item>
<item>
  <title>Linear Regression Made Easy</title>
  <dc:creator>Mohit Gupta</dc:creator>
  <link>https://mgupta70.github.io/posts/2025-05-18-linear-regression-basics/2_linear_regression.html</link>
  <description><![CDATA[ 





<p>In this notebook, we will be building a Linear Regression model from scratch to learn and familiarize ourselves with various governing foundational concepts about it. For this, we will use a <code>sklearn.datasets.make_regression</code> function to create a simple synthetic dataset in one variable. We can extend the concepts learned here to build multi-variate linear regression models.</p>
<div id="cell-2" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import necessary libraries</span></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.datasets <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> make_regression</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pprint <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pprint</span></code></pre></div>
</div>
<div id="cell-3" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate the data</span></span>
<span id="cb2-2">X,y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> make_regression(n_samples<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, n_features<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, noise<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>) </span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Here, </span></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># X.shape: (n_samples, n_features) = (100, 1)</span></span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># y.shape: (n_samples, ) = (100, )</span></span>
<span id="cb2-6"></span>
<span id="cb2-7">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(figsize <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span>
<span id="cb2-8">ax.scatter(X,y)</span>
<span id="cb2-9">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://mgupta70.github.io/posts/2025-05-18-linear-regression-basics/2_linear_regression_files/figure-html/cell-3-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>We can see that X axis varies from -2 to 2. It implies that our feature space is already normalized.😄</p>
<p>However, if we are dealing with multiple features, then it is common to have different features in different range. For ex. in a dataset of house price prediction, the house area can range from 100-5000 while number of bedrooms typically range from 1-5. To make the linear regression model to give equal importance to all the features, it is a good practise to bring all the features in same range. So, we normalize the features. There are multiple ways to normalize:</p>
<ol type="1">
<li>X/max: new feature range is 0 to 1</li>
<li>X-mean/std: new feature range is -3 to 3 mostly (except outliers)</li>
<li>(X-min)/(max-min): new feature range is 0 to 1</li>
</ol>
<p>In Machine Learning, whenever, we want to build any model, we usually split it into 2 sets - train and val. We build algo on train and finetune its hyperparameters to optimise the loss/error function on val set. This step is mandatory. So, let’s build a helper function</p>
<div id="cell-6" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> train_test_split(X, y, test_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>):</span>
<span id="cb3-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">""" splits the data into train and test sets"""</span></span>
<span id="cb3-3"></span>
<span id="cb3-4">    np.random.seed(random_state)</span>
<span id="cb3-5">    n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb3-6"></span>
<span id="cb3-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(test_size, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> test_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb3-8">        test_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>test_size)</span>
<span id="cb3-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(test_size, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>):</span>
<span id="cb3-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">pass</span></span>
<span id="cb3-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb3-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"test size must be a float/ int"</span>)</span>
<span id="cb3-13">    </span>
<span id="cb3-14">    shuffled_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.permutation(n)</span>
<span id="cb3-15">    test_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> shuffled_indices[:test_size]</span>
<span id="cb3-16">    train_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> shuffled_indices[test_size:]</span>
<span id="cb3-17">    X_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X[train_indices]</span>
<span id="cb3-18">    X_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X[test_indices]</span>
<span id="cb3-19">    y_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y[train_indices]</span>
<span id="cb3-20">    y_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y[test_indices]</span>
<span id="cb3-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> X_train, X_test, y_train, y_test</span></code></pre></div>
</div>
<div id="cell-7" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">X_train, X_val, y_train, y_val <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_test_split(X,y, test_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb4-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Train size: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>X_train<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, Test size: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>X_val<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plot the train and val data to see the split</span></span>
<span id="cb4-5">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(figsize <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span>
<span id="cb4-6">ax.scatter(X_train,y_train, c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'blue'</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span>)</span>
<span id="cb4-7">ax.scatter(X_val,y_val, c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'val'</span>)</span>
<span id="cb4-8">ax.legend()</span>
<span id="cb4-9">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Train size: 80, Test size: 20</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://mgupta70.github.io/posts/2025-05-18-linear-regression-basics/2_linear_regression_files/figure-html/cell-5-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p><strong>Now, the question is how do we decide the size of <code>val</code> set and how we should create it?</strong></p>
<p>Answer: There is no strict metric on how to decide the size of <code>val</code> set. The most important aspect to consider while creating <code>val</code> set is - it should be a representative of <code>train</code> set. This means, the points in the val set should have a good spread throughout the training data. What does this mean ? - Suppose, all <code>val</code> points (red) occur together and not separated from one another, then it is not a good split. Because this <code>val</code> data does not capture the distribution of <code>train</code> data and since the ultimate use of <code>val</code> data is to optimize the model, then it means we will end up optimizing the model only for a short spread of the data and not the entirety of it. Hence, we mostly perform random sampling to make sure that we get different and spread-out points in the hope that they would be a representative set of the entire training data. To achieve this, we can choose 20% of the data or 30% or 5% depending upon the distrubution of the data we are dealing with. Typical value is 15-25% sampled randomly. <em>(But both the val data percentage and sampling method will vary depending upon the nature of the problem. Read more <a href="https://www.fast.ai/posts/2017-11-13-validation-sets.html">here</a> )</em></p>
<p>After creating the splits of <code>train</code> and <code>val</code> data, we can now write code to build a regression model.</p>
<p>(FYI, if normalization of features is required as mentioned above, then normalization is performed after the data splitting. Various normalization constants are calculated from the <code>train</code> split of the data and stored for processing <code>val</code> and real <code>test</code> data that comes during the production stage.)</p>
<p>We are now writing a code for a simplistic model: yhat = wx + b</p>
<p>where w and b are randomly initialized and</p>
<p>optimized by Gradient Descent</p>
<p>In Linear regression, we use mean square error as loss function for optimiztion via Gradient Descent</p>
<div id="cell-12" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># hyperparameter</span></span>
<span id="cb6-2">lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.001</span></span>
<span id="cb6-3">epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">101</span></span>
<span id="cb6-4"></span>
<span id="cb6-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># initialize weights and biases randomly</span></span>
<span id="cb6-6">w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.rand()</span>
<span id="cb6-7">b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.rand()</span>
<span id="cb6-8"></span>
<span id="cb6-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Gradient Descent </span></span>
<span id="cb6-10">train_losses <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb6-11">val_losses <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb6-12"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> epoch <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(epochs):</span>
<span id="cb6-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Go through TRAIN data</span></span>
<span id="cb6-14">    yhat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> w<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>X_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b</span>
<span id="cb6-15">    yhat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.squeeze(yhat)</span>
<span id="cb6-16">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># mean square error loss</span></span>
<span id="cb6-17">    mse_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean((y_train<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>yhat)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb6-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (epoch)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb6-19">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"EPOCH: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>epoch<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, Train LOSS:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(mse_loss, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb6-20">    train_losses.append(mse_loss)</span>
<span id="cb6-21">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># step of Gradient Descent</span></span>
<span id="cb6-22">    w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(yhat<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>y_train)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>X_train</span>
<span id="cb6-23">    x0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.ones((X_train.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb6-24">    b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(yhat<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>y_train)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>x0 <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># or : b = b - lr * np.sum(yhat - y_train)</span></span>
<span id="cb6-25">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Monitor performance on VAL data</span></span>
<span id="cb6-26">    yhat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> w<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>X_val <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b</span>
<span id="cb6-27">    yhat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.squeeze(yhat)</span>
<span id="cb6-28">    mse_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean((y_val<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>yhat)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb6-29">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (epoch)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb6-30">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"EPOCH: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>epoch<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, Val LOSS:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(mse_loss, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb6-31">    val_losses.append(mse_loss)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>EPOCH: 0, Train LOSS:1567.608
EPOCH: 0, Val LOSS:1552.406
EPOCH: 20, Train LOSS:145.819
EPOCH: 20, Val LOSS:168.799
EPOCH: 40, Train LOSS:40.83
EPOCH: 40, Val LOSS:73.231
EPOCH: 60, Train LOSS:31.699
EPOCH: 60, Val LOSS:68.759
EPOCH: 80, Train LOSS:30.857
EPOCH: 80, Val LOSS:69.459
EPOCH: 100, Train LOSS:30.777
EPOCH: 100, Val LOSS:69.843</code></pre>
</div>
</div>
<div id="cell-13" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(figsize <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span>
<span id="cb8-2">ax.plot(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(epochs),train_losses, c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>, label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train loss'</span>)</span>
<span id="cb8-3">ax.plot(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(epochs),val_losses, c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'val loss'</span>)</span>
<span id="cb8-4">ax.legend()</span>
<span id="cb8-5">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://mgupta70.github.io/posts/2025-05-18-linear-regression-basics/2_linear_regression_files/figure-html/cell-7-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Usually, you should see decreasing error/loss values. If this does not happen, few things need to be checked: 1. Reduce learning rate, <code>lr</code> and retry 2. Always, check if the shapes of variables are correct. For ex: bias, <code>b</code> shape must be (1,); <code>w</code>: (1, ), <code>mse_loss</code>: (1,), yhat: (num_samples in train/val, ) and so on. I have seen many times, while working with numpy, if you are not careful of matrix multiplication and dot product rules, the shapes of your variables become incorrect causing weird model training. You could also see an <strong>up and down behaviour in train loss</strong>. For example: If you miss to account for <code>x0</code> while calculating bias <code>b</code> -&gt; it will cause massive shape issues throughout.</p>
<p>Anyhow, for our case, we did not encounter any such strange behavior. Let’s see the model we trained:</p>
<div id="cell-15" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Linear Regression Model: wx+b = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>w<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">*x+</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>b<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Linear Regression Model: wx+b = [44.0082033]*x+[0.38012626]</code></pre>
</div>
</div>
<div id="cell-16" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">xmin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(X)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> yhat_min  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> w<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>xmin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>b</span>
<span id="cb11-2">xmax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(X)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> yhat_max  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> w<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>xmax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>b</span>
<span id="cb11-3"></span>
<span id="cb11-4">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(figsize <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span>
<span id="cb11-5">ax.scatter(X,y, label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data'</span>)</span>
<span id="cb11-6">ax.plot([xmin, xmax], [yhat_min, yhat_max], c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'fitted model'</span>)</span>
<span id="cb11-7">ax.legend()</span>
<span id="cb11-8">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://mgupta70.github.io/posts/2025-05-18-linear-regression-basics/2_linear_regression_files/figure-html/cell-9-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>The trained model fits really well visually. <strong>But how do we quantify the quality of fit?</strong></p>
<p>Answer: r2-score</p>
<p>I often used to forget the formula for r2-score, until I understood the reasoning behind it and then, I no longer needed to memorize it. I could reproduce the formula within seconds by following pure logic. In fact, I feel this is the best way to also sharpen your data understanding skills. Being able to reason about the data stuff and write it in terms of maths - this is the skill that will make you a data scientist with sharp eyes and mind.</p>
<section id="r2-score-forumla" class="level4">
<h4 class="anchored" data-anchor-id="r2-score-forumla">r2-score forumla</h4>
<p>Let’s understand the r2-score and derive its formula by asking just basic questions i.e.&nbsp;first principle thinking.</p>
<p>Q. What is the simplest model we could use without any fancy math?</p>
<p>A. use mean i.e.&nbsp;the average as the answer, <code>yhat</code> for any given <code>x</code></p>
<p>Q. Now, if we use the simplest model, what is the sum of squares of error?</p>
<p>A. np.sum((y-mean)**2)</p>
<p>Q. What is the sum of squares of error from our model?</p>
<p>A. np.sum((y-yhat)**2)</p>
<p>Q. If we have trained a good model, it should be better than baseline (simplest model, where we predict average no matter what X is). That is, sum of squares of error from trained model &lt; sum of squares of error from simplest model. But how much better?</p>
<p>A. 1 - np.sum((y-yhat)^2) /np.sum((y-mean)^2)</p>
<div id="cell-20" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># simplest model </span></span>
<span id="cb12-2">ymean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(y_train) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># use train to calculate the model, where model = mean</span></span>
<span id="cb12-3">SST <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>((y_val <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> ymean)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># calculte sum of square of error on val data</span></span>
<span id="cb12-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'SST: '</span>, SST)</span>
<span id="cb12-5"></span>
<span id="cb12-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># trained model</span></span>
<span id="cb12-7">yhat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> w<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>X_val <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b</span>
<span id="cb12-8">yhat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.squeeze(yhat)</span>
<span id="cb12-9">RSS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>((y_val<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>yhat)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb12-10"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'RSS: '</span>, RSS)</span>
<span id="cb12-11"></span>
<span id="cb12-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># R2-score</span></span>
<span id="cb12-13">r2_score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>RSS<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>SST</span>
<span id="cb12-14"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r2_score: '</span>, r2_score)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>SST:  37726.247861497875
RSS:  1396.867522387115
r2_score:  0.9629735899653908</code></pre>
</div>
</div>
<p>For simplest model,</p>
<p><code>model = ymean</code>, sum of square of error is called <strong>SST</strong> = Total sum of squares</p>
<p>For trained model,</p>
<p><code>model = wx+b</code>, sum of square of error is called <strong>RSS</strong> = Sum of square of Residuals</p>
<p><code>r2_score</code> close to 1 means the model <em>explains</em> the data well.</p>
<p><code>r2_score</code> ranges from 0 to 1. <strong>Can you think what what does r² = 0 mean?</strong></p>


</section>

 ]]></description>
  <category>Core ML</category>
  <guid>https://mgupta70.github.io/posts/2025-05-18-linear-regression-basics/2_linear_regression.html</guid>
  <pubDate>Sun, 18 May 2025 07:00:00 GMT</pubDate>
  <media:content url="https://mgupta70.github.io/posts/2025-05-18-linear-regression-basics/linear_reg_thumbnail.png" medium="image" type="image/png" height="96" width="144"/>
</item>
<item>
  <title>Decision Trees Made Easy</title>
  <dc:creator>Mohit Gupta</dc:creator>
  <link>https://mgupta70.github.io/posts/2025-05-04-decision-trees-basics/1_basic_decision_tree_for_classification.html</link>
  <description><![CDATA[ 





<p>In this notebook, we will be building a basic decision tree to learn and familiarize ourselves with various governing foundational concepts about decision trees. For this, we will use a relatively simple dataframe containing purely numerical features for the task of <strong>classification</strong>. As our understanding about decision trees expands, we will extend the concepts learned here to handle complex and challenging dataframes (such as those with missing values, with categorical features, etc.)</p>
<p>Let’s load the popular iris data. (We are using sklearn only and only to load a popular benchmark dataset. We will not use it to build decision trees. Instead, we will build our decision trees entirely from scratch in using numpy)</p>
<div id="cell-3" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import necessary libraries</span></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.datasets <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_iris</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pprint <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pprint</span></code></pre></div>
</div>
<div id="cell-4" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># load the data</span></span>
<span id="cb2-2">iris_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load_iris()</span>
<span id="cb2-3">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> iris_data.data</span>
<span id="cb2-4">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> iris_data.target</span>
<span id="cb2-5"></span>
<span id="cb2-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Here X and y are numpy arrays. We do a bit of processing to convert X and y into pandas dataframe for readability</span></span>
<span id="cb2-7">feature_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> iris_data.feature_names</span>
<span id="cb2-8">target_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> iris_data.target_names</span>
<span id="cb2-9"></span>
<span id="cb2-10">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(X, columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>feature_names) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># start df with features i.e. X</span></span>
<span id="cb2-11">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'target'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y                            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># add target column to df i.e. y</span></span>
<span id="cb2-12"></span>
<span id="cb2-13">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'target'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'target'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: target_names[x]) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Optional: convert integer labels to actual class names</span></span>
<span id="cb2-14">df.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">sepal length (cm)</th>
<th data-quarto-table-cell-role="th">sepal width (cm)</th>
<th data-quarto-table-cell-role="th">petal length (cm)</th>
<th data-quarto-table-cell-role="th">petal width (cm)</th>
<th data-quarto-table-cell-role="th">target</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>5.1</td>
<td>3.5</td>
<td>1.4</td>
<td>0.2</td>
<td>setosa</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>4.9</td>
<td>3.0</td>
<td>1.4</td>
<td>0.2</td>
<td>setosa</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>4.7</td>
<td>3.2</td>
<td>1.3</td>
<td>0.2</td>
<td>setosa</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>4.6</td>
<td>3.1</td>
<td>1.5</td>
<td>0.2</td>
<td>setosa</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>5.0</td>
<td>3.6</td>
<td>1.4</td>
<td>0.2</td>
<td>setosa</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>Now, we will build a decision tree which when given 4 numerical feature values will classify the plant species as one of <code>'setosa', 'versicolor', 'virginica'</code>.</p>
<p>For this, we first need to split the data into train and val sets. Then we will use the train set to build the model and test it on the val set.</p>
<div id="cell-6" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> train_test_split_df(df, test_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>):</span>
<span id="cb3-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">""" splits the data into train and test sets"""</span></span>
<span id="cb3-3"></span>
<span id="cb3-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(test_size, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> test_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb3-5">        test_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(df)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>test_size)</span>
<span id="cb3-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(test_size, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>):</span>
<span id="cb3-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">pass</span></span>
<span id="cb3-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb3-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"test size must be a float/ int"</span>)</span>
<span id="cb3-10">    </span>
<span id="cb3-11">    shuffled_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.permutation(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(df))</span>
<span id="cb3-12">    test_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> shuffled_indices[:test_size]</span>
<span id="cb3-13">    test_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.iloc[test_indices]</span>
<span id="cb3-14">    train_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.drop(test_indices)</span>
<span id="cb3-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> train_df, test_df</span></code></pre></div>
</div>
<div id="cell-7" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">train_df, test_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_test_split_df(df, test_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb4-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Train size: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(train_df)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, Test size: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(test_df)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb4-3">train_df.head()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Train size: 130, Test size: 20</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="4">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">sepal length (cm)</th>
<th data-quarto-table-cell-role="th">sepal width (cm)</th>
<th data-quarto-table-cell-role="th">petal length (cm)</th>
<th data-quarto-table-cell-role="th">petal width (cm)</th>
<th data-quarto-table-cell-role="th">target</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">1</td>
<td>4.9</td>
<td>3.0</td>
<td>1.4</td>
<td>0.2</td>
<td>setosa</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">2</td>
<td>4.7</td>
<td>3.2</td>
<td>1.3</td>
<td>0.2</td>
<td>setosa</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">3</td>
<td>4.6</td>
<td>3.1</td>
<td>1.5</td>
<td>0.2</td>
<td>setosa</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">4</td>
<td>5.0</td>
<td>3.6</td>
<td>1.4</td>
<td>0.2</td>
<td>setosa</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">5</td>
<td>5.4</td>
<td>3.9</td>
<td>1.7</td>
<td>0.4</td>
<td>setosa</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>To build a decision tree, the dataset is split into 2 subsets using a condition - where one subset satisfies the condition and another does not.</p>
<p>The condition is nothing but thresholding of one the features. (For example, condition: <code>sepal lenghth &lt;= 4.4 cms</code> will split the dataset into 2 subsets - one where <code>sepal lenghth</code> is less than 4.4 cms and another where it is not)</p>
<p><strong>The main question here is how we decide which feature to use and what threshold to pick?</strong></p>
<p>Answer: Pick the feature which results in most <code>information gain</code>.</p>
<p>Now to understand the above term <code>information gain</code>, we need to first familiarize ourselves with few more concepts.</p>
<ol type="1">
<li><p><code>Purity</code> - Measure of homogenity of a subset. For ex: if a data subset contains only red balls - it is pure. But if it contains even a single green ball - it is now impure. The extent of impurity is measured using <code>entropy</code>.</p></li>
<li><p><code>Entropy</code> - calculated as:</p>
<pre><code>  H(X) = — Σ (pi * log2 pi)</code></pre></li>
</ol>
<p>where; X = Total number of samples, and, pi is the probability of class i</p>
<p><strong>Pure dataset:</strong> - One which contains elements belonging to single class. For e.g.: All red balls - For a pure dataset: entropy = 0</p>
<p><strong>Most Impure dataset:</strong> - One which contains elements distributed equally among other classes. For e.g.: 10 blue balls and 10 red balls - For the most impure subset: entropy = 1</p>
<ol start="3" type="1">
<li><p><code>Information Gain</code> - If we split the dataset, then the entropy (i.e.&nbsp;degree of impurity) in the children subsets should ideally be lower. This reduction in entropy is the information gain.</p>
<pre><code> Information Gain = entropy (parent) — [average entropy of ( children)]</code></pre></li>
</ol>
<p>Now, based on the above concepts, we will split the dataset, using the feature that results in highest information gain.</p>
<p><strong>And how we do this?</strong></p>
<p>Answer: Brute Force. Yes, Brute Force… We go through all the feature columns one at a time and for each feature column, we go through all of their possible values one at a time, splitting the data into 2 children nodes, calculating information gain, storing it and then pick one which gave us the highest information gain.</p>
<p>We repeat this process, either a fixed number of times or until the entropy of children becomes zero (i.e.&nbsp;children subsets become pure) and then we stop.</p>
<p>Let’s see this step by step…</p>
<div id="cell-10" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># let's check the purity of our current data</span></span>
<span id="cb8-2"></span>
<span id="cb8-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> check_purity(df: pd.DataFrame) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>:</span>
<span id="cb8-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb8-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Check if data is pure.</span></span>
<span id="cb8-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb8-7">    y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.iloc[:, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb8-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(y.unique())<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb8-9"></span>
<span id="cb8-10"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Is the train data pure? -&gt;'</span>, check_purity(train_df))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Is the train data pure? -&gt; False</code></pre>
</div>
</div>
<p>As it is not pure. Let’s see how much <em>impure</em> it is by calculating entropy.</p>
<div id="cell-12" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> calculate_entropy(df: pd.DataFrame) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>:</span>
<span id="cb10-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb10-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Calculates the entropy of the data. Entropy =  — Σ (pi * log2 pi)</span></span>
<span id="cb10-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb10-5">    y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.iloc[:, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb10-6">    values, counts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.unique(y, return_counts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb10-7">    probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> counts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(y)</span>
<span id="cb10-8">    entropy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(probs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>np.log2(probs))</span>
<span id="cb10-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> entropy</span>
<span id="cb10-10"></span>
<span id="cb10-11">parent_entropy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> calculate_entropy(train_df)</span>
<span id="cb10-12"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Entropy of parent node: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>parent_entropy<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Entropy of parent node: 1.5848773505329046</code></pre>
</div>
</div>
<p>Now, let’s see the details of how we will split the data. The code below should be very straightforward and intuitive to understand.</p>
<p>As mentioned, now (1) we will go through all features and their all possible values to split the dataset and then (2)check the information gain. SO, let’s first create the function called <code>get_potential_splits</code> that does (1) for us and then we will implement <code>determine_best_split</code> that will do (2) for us.</p>
<div id="cell-14" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Function (1)</span></span>
<span id="cb12-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_potential_splits(df: pd.DataFrame) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>:</span>
<span id="cb12-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb12-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Get all the possible potential splits of the data.</span></span>
<span id="cb12-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb12-6">    potential_splits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb12-7">    _, n_columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.shape</span>
<span id="cb12-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> column_index <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n_columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>): <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># -1 to skip the target column</span></span>
<span id="cb12-9">        values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.iloc[:, column_index]</span>
<span id="cb12-10">        unique_values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.unique(values)</span>
<span id="cb12-11">        potential_splits[column_index] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># initialize a list for storing possible split values per column aka feature</span></span>
<span id="cb12-12"></span>
<span id="cb12-13">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># using mid-points between 2 consecutive unique values to split the data</span></span>
<span id="cb12-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(unique_values)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb12-15">            split_value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (unique_values[i]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>unique_values[i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb12-16">            potential_splits[column_index].append(split_value)</span>
<span id="cb12-17">        </span>
<span id="cb12-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> potential_splits</span>
<span id="cb12-19"></span>
<span id="cb12-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># let's see the potential splits for our data</span></span>
<span id="cb12-21">potential_splits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_potential_splits(train_df)</span>
<span id="cb12-22"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Potential splits for each feature column:"</span>)</span>
<span id="cb12-23"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(potential_splits)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Potential splits for each feature column:
{0: [4.35, 4.45, 4.55, 4.65, 4.75, 4.85, 4.95, 5.05, 5.15, 5.25, 5.35, 5.45, 5.55, 5.65, 5.75, 5.85, 5.95, 6.05, 6.15, 6.25, 6.35, 6.45, 6.55, 6.65, 6.75, 6.85, 7.0, 7.15, 7.25, 7.35, 7.5, 7.65], 1: [2.1, 2.25, 2.3499999999999996, 2.45, 2.55, 2.6500000000000004, 2.75, 2.8499999999999996, 2.95, 3.05, 3.1500000000000004, 3.25, 3.3499999999999996, 3.45, 3.55, 3.6500000000000004, 3.75, 3.8499999999999996, 4.0, 4.15], 2: [1.05, 1.2000000000000002, 1.35, 1.45, 1.55, 1.65, 1.7999999999999998, 2.45, 3.15, 3.4, 3.55, 3.6500000000000004, 3.75, 3.8499999999999996, 3.95, 4.05, 4.15, 4.25, 4.35, 4.45, 4.55, 4.65, 4.75, 4.85, 4.95, 5.05, 5.15, 5.25, 5.35, 5.45, 5.55, 5.65, 5.75, 5.85, 5.95, 6.05, 6.199999999999999, 6.449999999999999, 6.65, 6.800000000000001], 3: [0.15000000000000002, 0.25, 0.35, 0.45, 0.55, 0.8, 1.05, 1.15, 1.25, 1.35, 1.45, 1.55, 1.65, 1.75, 1.85, 1.95, 2.05, 2.1500000000000004, 2.25, 2.3499999999999996, 2.45]}</code></pre>
</div>
</div>
<p>0: above is first column i.e.&nbsp;<code>sepal length (cms)</code>, 1: is second column and so on.</p>
<p>Now, we have find all the possible ways to split the data (mentioned as (1))</p>
<p>Now, let’s see how to get the best split by developing <code>determine_best_split</code> (mentioned as (2)). For this, first create a function (2-1) that will split the data into 2 parts given a feature and its value. Then, we will use this function to split the data for all possible combinations, calculate information gain and pick the one that gives highest information gain (2-2).</p>
<div id="cell-17" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Function (2-1)</span></span>
<span id="cb14-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> split_data(df: pd.DataFrame, split_column: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>, split_value: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>[pd.DataFrame, pd.DataFrame]:</span>
<span id="cb14-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">""" </span></span>
<span id="cb14-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    SPlit the data into 2 subsets based on split column and split value.</span></span>
<span id="cb14-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        split_column (int) : column index</span></span>
<span id="cb14-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb14-7">    split_column_values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.iloc[:, split_column]</span>
<span id="cb14-8">    left_split <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[split_column_values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> split_value]</span>
<span id="cb14-9">    right_split <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[split_column_values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> split_value]</span>
<span id="cb14-10"></span>
<span id="cb14-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> left_split, right_split</span>
<span id="cb14-12"></span>
<span id="cb14-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Functions (2-2)</span></span>
<span id="cb14-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> determine_best_split(df: pd.DataFrame, potential_splits: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>]:</span>
<span id="cb14-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb14-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Determine the best split column and its value.</span></span>
<span id="cb14-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb14-18">    best_split_column <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb14-19">    best_split_value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb14-20">    best_info_gain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb14-21">    parent_entropy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> calculate_entropy(df) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Parent Entropy</span></span>
<span id="cb14-22">    </span>
<span id="cb14-23">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (Recursive)Iterate over all possible combinations of columns and their split values</span></span>
<span id="cb14-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> column_index <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> potential_splits.keys():</span>
<span id="cb14-25">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> split_value <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> potential_splits[column_index]:</span>
<span id="cb14-26">            left_split, right_split <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> split_data(df, column_index, split_value)</span>
<span id="cb14-27">            average_children_entropy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> calculate_average_children_entropy(left_split, right_split)</span>
<span id="cb14-28">            information_gain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> parent_entropy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> average_children_entropy</span>
<span id="cb14-29">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print("Column:", iris_data.feature_names[column_index], "Split value:", split_value, "Information gain:", information_gain)</span></span>
<span id="cb14-30">            </span>
<span id="cb14-31">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># pick the one with highest information gain</span></span>
<span id="cb14-32">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> information_gain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> best_info_gain:</span>
<span id="cb14-33">                best_info_gain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> information_gain</span>
<span id="cb14-34">                best_split_column <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> column_index</span>
<span id="cb14-35">                best_split_value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> split_value</span>
<span id="cb14-36">        </span>
<span id="cb14-37">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#print("Best Information Gain:", best_info_gain)</span></span>
<span id="cb14-38">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> best_split_column, best_split_value</span>
<span id="cb14-39"></span>
<span id="cb14-40"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> calculate_average_children_entropy(left_split: pd.DataFrame, right_split: pd.DataFrame) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>:</span>
<span id="cb14-41">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb14-42"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Calculates the overall entropy of the data after splitting i.e. average entropy of the children nodes</span></span>
<span id="cb14-43"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    overall entropy = weighted average of children entropies = Σ (p_c * E(c))</span></span>
<span id="cb14-44"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb14-45">    n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(left_split) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(right_split) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># total size of data</span></span>
<span id="cb14-46">    w_left <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(left_split)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> n            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># relative weight of left data</span></span>
<span id="cb14-47">    w_right <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(right_split)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> n          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># relative weight of right data</span></span>
<span id="cb14-48">    overall_entropy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> w_left <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> calculate_entropy(left_split) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> w_right <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> calculate_entropy(right_split)</span>
<span id="cb14-49">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> overall_entropy</span></code></pre></div>
</div>
<p>Above 2 functions should be straightforward to understand. Only new concept is: to get entropy of data after split - we calculate it as average weighted entropy of children nodes.</p>
<p>(uncomment the print the statement in <code>determine_best_split</code>, if interested to see information gain for all possible splits)</p>
<div id="cell-20" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">best_split_column, best_split_value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> determine_best_split(train_df, potential_splits)</span>
<span id="cb15-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Best split column:"</span>, iris_data.feature_names[best_split_column], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"with value:"</span>, best_split_value)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Best split column: petal length (cm) with value: 2.45</code></pre>
</div>
</div>
<p>Note: The result one gets could be different if the <code>seed</code>/ <code>random_state</code> in <code>train_val_split_df</code> is changed (because it will change the underlying training data i.e.&nbsp;<code>train_df</code>)</p>
<p>The result I got: <code>Best split column: petal length (cm) with value: 2.45</code></p>
<p>Now, let’s create the splits</p>
<div id="cell-22" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">left_branch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_df[train_df.iloc[:, best_split_column] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> best_split_value] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># branch that satisfies the condition: petal length (cm) &lt;= 2.45</span></span>
<span id="cb17-2">right_branch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_df[train_df.iloc[:, best_split_column] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> best_split_value]</span>
<span id="cb17-3"></span>
<span id="cb17-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># # or, we could also do</span></span>
<span id="cb17-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># left_branch, right_branch = split_data(train_df, best_split_column, best_split_value)</span></span></code></pre></div>
</div>
<p>Let’s verify that after splitting the data has less impurity that is it has less entropy.</p>
<p>(How do we do that? - By calculating weighted average entropy of children nodes)</p>
<div id="cell-24" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Before splitting,  Entropy: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>parent_entropy<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb18-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"After splitting,  Entropy: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>calculate_average_children_entropy(left_branch, right_branch)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Before splitting,  Entropy: 1.5848773505329046
After splitting,  Entropy: 0.6691669882046775</code></pre>
</div>
</div>
<p>So, this verifies that our splitting was good.</p>
<p>Let’s see if either of the child node (i.e.&nbsp;data split) is pure</p>
<div id="cell-27" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">check_purity(left_branch), check_purity(right_branch)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="12">
<pre><code>(True, False)</code></pre>
</div>
</div>
<p>Wow! our <code>left_branch</code> is pure i.e.&nbsp;it contains all the datapoints that has single class. Thus, it would not need any further splitting.</p>
<p>Whereas <code>right_brach</code> is not pure i.e.&nbsp;it contains datapoints from multiple classes. Thus, it would need further splitting.</p>
<div id="cell-29" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">np.unique(left_branch.target) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># see classes in left_branch</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="13">
<pre><code>array(['setosa'], dtype=object)</code></pre>
</div>
</div>
<div id="cell-30" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">np.unique(right_branch.target, return_counts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># see classes in right_branch</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="14">
<pre><code>(array(['versicolor', 'virginica'], dtype=object),
 array([43, 44], dtype=int64))</code></pre>
</div>
</div>
<p>Based on just one condition, we can create a small subtree as follows:</p>
<p><code>sub_tree = {"condition" : ["left_split_answer", "right_split_answer"]}</code></p>
<p>If we suppose if this small sub-tree is our final decision tree which we want to use for testing. So, if we were to classify one <code>test_example</code> as input, we will check it’s petal length, see if it is less than &lt;= 2.45 cm, we will return <code>setosa</code> as the class, else, we will pick the class with higher relative probability in the <code>right_branch</code> as the predicted class.</p>
<div id="cell-33" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># In plain english </span></span>
<span id="cb26-2">sub_tree <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> { <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"petal length (cm) &lt;= 2.45"</span> : [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"setosa"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"versicolor"</span>]} <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># right split is versicolor because it is dominant in right_branch</span></span></code></pre></div>
</div>
<p>Almost Never, we create decision tree with only a single condition i.e.&nbsp;2 child nodes. Usually a decision tree is composed of multiple sub-trees composing multiple conditons.</p>
<p>Programatically speaking, we repeat the process of splitting for both the <code>left_branch</code> and <code>right_branch</code> until we reach the stopping condition:</p>
<ol type="1">
<li>child nodes become pure</li>
<li>a fixed number of steps by setting hyperparameters like <code>max_depth</code>, <code>min_samples</code>, etc.</li>
</ol>
<p><strong>Note:</strong> There should not be any doubt/confusion when I say that the condition for splitting a <code>left_branch</code> and <code>right_branch</code> belonging to same parent node could be completely different (because it depends upon the data distribution within the child node).</p>
<p>Let’s build a full-fledged decision tree programatically using concepts of dynamic programming.</p>
<section id="decision-tree-code-for-case-1.-i.e-keep-splitting-until-child-nodes-become-puren" class="level3">
<h3 class="anchored" data-anchor-id="decision-tree-code-for-case-1.-i.e-keep-splitting-until-child-nodes-become-puren">Decision Tree code (for case 1. i.e keep splitting until child nodes become pure)N</h3>
<p>(<strong>Note:</strong> FYI: Case 2. i.e.&nbsp;splitting fo a fixed number of steps is also covered later in this notebook.)</p>
<div id="cell-37" class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> decision_tree_algorithm(df: pd.DataFrame) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>:</span>
<span id="cb27-2">    data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df</span>
<span id="cb27-3"></span>
<span id="cb27-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># base case: If data is pure-&gt; stop and return the class of the child node</span></span>
<span id="cb27-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> check_purity(data):</span>
<span id="cb27-6">        predicted_class <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.unique(data.iloc[:, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># only 1 unique value</span></span>
<span id="cb27-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> predicted_class</span>
<span id="cb27-8">    </span>
<span id="cb27-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># else: keep on splitting </span></span>
<span id="cb27-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Recursive</span></span>
<span id="cb27-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb27-12">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for splitting: get_potential_splits -&gt; determine_best_split -&gt; split_data based on best_split_column and best_split_value</span></span>
<span id="cb27-13">        potential_splits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_potential_splits(data)</span>
<span id="cb27-14">        best_split_column, best_split_value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> determine_best_split(data, potential_splits)</span>
<span id="cb27-15">        left_branch, right_branch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> split_data(data, best_split_column, best_split_value)</span>
<span id="cb27-16"></span>
<span id="cb27-17">        </span>
<span id="cb27-18">        condition <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> &lt;= </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(df.columns)[best_split_column], best_split_value)</span>
<span id="cb27-19">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create the sub-tree as a dictionary storing the condition as key and a list as the value. This list for a </span></span>
<span id="cb27-20">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># condition has either the `predicted_class` if the child node is pure or another condition that will further split the </span></span>
<span id="cb27-21">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># impure child node.</span></span>
<span id="cb27-22">        sub_tree <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {condition: []}</span>
<span id="cb27-23"></span>
<span id="cb27-24">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get the answer for the 2 child nodes we just created (Step-1) and append them to the sub-tree</span></span>
<span id="cb27-25">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (Step-1): get answers</span></span>
<span id="cb27-26">        left_branch_answer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> decision_tree_algorithm(left_branch)</span>
<span id="cb27-27">        right_branch_answer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> decision_tree_algorithm(right_branch)</span>
<span id="cb27-28"></span>
<span id="cb27-29">        sub_tree[condition].append(left_branch_answer)</span>
<span id="cb27-30">        sub_tree[condition].append(right_branch_answer)</span>
<span id="cb27-31"></span>
<span id="cb27-32">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> sub_tree</span></code></pre></div>
</div>
<div id="cell-38" class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">my_tree <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> decision_tree_algorithm(train_df)</span>
<span id="cb28-2">pprint(my_tree)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{'petal length (cm) &lt;= 2.45': ['setosa',
                               {'petal width (cm) &lt;= 1.75': [{'petal length (cm) &lt;= 4.95': [{'petal width (cm) &lt;= 1.65': ['versicolor',
                                                                                                                          'virginica']},
                                                                                            {'petal width (cm) &lt;= 1.55': ['virginica',
                                                                                                                          {'sepal length (cm) &lt;= 6.95': ['versicolor',
                                                                                                                                                         'virginica']}]}]},
                                                             {'petal length (cm) &lt;= 4.85': [{'sepal length (cm) &lt;= 5.95': ['versicolor',
                                                                                                                           'virginica']},
                                                                                            'virginica']}]}]}</code></pre>
</div>
</div>
<p>Above is the decision tree which we created, which can be read as follows. (Do not pay attention to the code but to the print block)</p>
<p><img src="https://mgupta70.github.io/posts/2025-05-04-decision-trees-basics/iris_dt_case1.png" width="550" height="400"></p>
<p>Let’s writ some code to evaluate the decision tree we built.</p>
<div id="cell-42" class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> classify_example(example, tree):</span>
<span id="cb30-2">    question <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(tree.keys())[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb30-3">    feature_name, split_value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> question.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" &lt;= "</span>)</span>
<span id="cb30-4">    </span>
<span id="cb30-5"></span>
<span id="cb30-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ask question</span></span>
<span id="cb30-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> example[feature_name] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>(split_value):</span>
<span id="cb30-8">        answer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tree[question][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb30-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb30-10">        answer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tree[question][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb30-11"></span>
<span id="cb30-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># base case</span></span>
<span id="cb30-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(answer, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>): <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if the answer is not a dictionary, then it is a leaf node</span></span>
<span id="cb30-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> answer</span>
<span id="cb30-15"></span>
<span id="cb30-16">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># recursive case</span></span>
<span id="cb30-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb30-18">        residual_tree <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> answer</span>
<span id="cb30-19">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> classify_example(example, residual_tree)</span>
<span id="cb30-20">    </span>
<span id="cb30-21"></span>
<span id="cb30-22"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> calculate_accuracy(df, tree):</span>
<span id="cb30-23">    df  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.copy()</span>
<span id="cb30-24"></span>
<span id="cb30-25">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># df["classification"] = df.apply(classify_example, axis=1, args=(tree,))</span></span>
<span id="cb30-26">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># df["classification_correct"] = df["classification"] == df["target"]</span></span>
<span id="cb30-27"></span>
<span id="cb30-28">    df.loc[:, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"classification"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(classify_example, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, args<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(tree,))</span>
<span id="cb30-29">    df.loc[:, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"classification_correct"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"classification"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"target"</span>]</span>
<span id="cb30-30">    </span>
<span id="cb30-31">    accuracy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"classification_correct"</span>].mean()</span>
<span id="cb30-32">    </span>
<span id="cb30-33">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> accuracy</span></code></pre></div>
</div>
<p>Since, we created sub_trees in an uninhibited manner, it will result in perfect train accuracy.</p>
<div id="cell-44" class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">calculate_accuracy(train_df, my_tree)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="20">
<pre><code>1.0</code></pre>
</div>
</div>
<p>Let’s check the test accuracy</p>
<div id="cell-46" class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">calculate_accuracy(test_df, my_tree)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="21">
<pre><code>1.0</code></pre>
</div>
</div>
<p>Surprisingly! It also resulted in the perfect test accuracy</p>
<section id="control-the-depth-and-min_samples-in-a-decision-tree" class="level4">
<h4 class="anchored" data-anchor-id="control-the-depth-and-min_samples-in-a-decision-tree">Control the depth and min_samples in a decision tree</h4>
<p>In the above case, we got test accuracy of 100%. But usually this is not the case because datasets are more complex.</p>
<p>If we allow the decision tree to grow unhibited manner then it overfits where it is possible that every leaf node would only have one data point. This is not a good decision tree because then prediction from such a tree becomes highly sensitive to small fluctuations in the data.</p>
<p>Hence, now we modify our code to <em>pre-prune</em> the tree i.e.&nbsp;limit its growth using <code>max_depth</code> and <code>min_samples</code> as the hyperparamters</p>
</section>
</section>
<section id="decision-tree-code-for-case-2.-i.e.-splitting-fo-a-fixed-number-of-steps" class="level3">
<h3 class="anchored" data-anchor-id="decision-tree-code-for-case-2.-i.e.-splitting-fo-a-fixed-number-of-steps">Decision Tree code (for case 2. i.e.&nbsp;splitting fo a fixed number of steps)</h3>
<p>Before we write the actual code, we need a function to get the majority class label of the set if the subset is not pure but further splitting is not possible because stopping condition is reached.</p>
<div id="cell-52" class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_majority_class(df: pd.DataFrame) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>:</span>
<span id="cb35-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb35-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Classify the data.</span></span>
<span id="cb35-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb35-5">    y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.iloc[:, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb35-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> y.mode()[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
</div>
<div id="cell-53" class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> decision_tree_improved(df: pd.DataFrame, counter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,  min_samples<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, max_depth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>:</span>
<span id="cb36-2"></span>
<span id="cb36-3">    data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df</span>
<span id="cb36-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># base case: If data is pure or we hit max_depth or min_sample condition violates-&gt; stop and return the class of the child node</span></span>
<span id="cb36-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> check_purity(data) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(data) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> min_samples) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> (counter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> max_depth):</span>
<span id="cb36-6">        predicted_class <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_majority_class(data) </span>
<span id="cb36-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> predicted_class</span>
<span id="cb36-8">    </span>
<span id="cb36-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># else: keep on splitting </span></span>
<span id="cb36-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Recursive</span></span>
<span id="cb36-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb36-12">        counter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb36-13">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for splitting: get_potential_splits -&gt; determine_best_split -&gt; split_data based on best_split_column and best_split_value</span></span>
<span id="cb36-14">        potential_splits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_potential_splits(data)</span>
<span id="cb36-15">        best_split_column, best_split_value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> determine_best_split(data, potential_splits)</span>
<span id="cb36-16">        left_branch, right_branch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> split_data(data, best_split_column, best_split_value)</span>
<span id="cb36-17"></span>
<span id="cb36-18">        </span>
<span id="cb36-19">        condition <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> &lt;= </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(data.columns)[best_split_column], best_split_value)</span>
<span id="cb36-20">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create the sub-tree as a dictionary storing the condition as key and a list as the value. This list for a </span></span>
<span id="cb36-21">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># condition has either the `predicted_class` if the child node is pure or another condition that will further split the </span></span>
<span id="cb36-22">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># impure child node.</span></span>
<span id="cb36-23">        sub_tree <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {condition: []}</span>
<span id="cb36-24"></span>
<span id="cb36-25">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get the answer for the 2 child nodes we just created (Step-1) and append them to the sub-tree</span></span>
<span id="cb36-26">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (Step-1): get answers</span></span>
<span id="cb36-27">        left_branch_answer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> decision_tree_improved(left_branch,  counter, min_samples, max_depth)</span>
<span id="cb36-28">        right_branch_answer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> decision_tree_improved(right_branch, counter, min_samples, max_depth)</span>
<span id="cb36-29"></span>
<span id="cb36-30">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> left_branch_answer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> right_branch_answer: <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example: Instead of {'petal length &lt;= 2.5': ['setosa', 'setosa']} just return 'setosa'</span></span>
<span id="cb36-31">            sub_tree <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> left_branch_answer</span>
<span id="cb36-32"></span>
<span id="cb36-33">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb36-34">            sub_tree[condition].append(left_branch_answer)</span>
<span id="cb36-35">            sub_tree[condition].append(right_branch_answer)</span>
<span id="cb36-36"></span>
<span id="cb36-37">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> sub_tree</span></code></pre></div>
</div>
<div id="cell-54" class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1">my_tree <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> decision_tree_improved(train_df, max_depth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb37-2">pprint(my_tree)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{'petal length (cm) &lt;= 2.45': ['setosa',
                               {'petal width (cm) &lt;= 1.75': [{'petal length (cm) &lt;= 4.95': ['versicolor',
                                                                                            'virginica']},
                                                             {'petal length (cm) &lt;= 4.85': ['versicolor',
                                                                                            'virginica']}]}]}</code></pre>
</div>
</div>
<p><img src="https://mgupta70.github.io/posts/2025-05-04-decision-trees-basics/iris_dt_case2.png" width="550" height="400"></p>
<div id="cell-56" class="cell" data-execution_count="26">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1">calculate_accuracy(test_df, my_tree) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># test accuracy with pruned tree</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="26">
<pre><code>0.95</code></pre>
</div>
</div>


</section>

 ]]></description>
  <category>Core ML</category>
  <guid>https://mgupta70.github.io/posts/2025-05-04-decision-trees-basics/1_basic_decision_tree_for_classification.html</guid>
  <pubDate>Thu, 01 May 2025 07:00:00 GMT</pubDate>
  <media:content url="https://mgupta70.github.io/posts/2025-05-04-decision-trees-basics/dt_thumbnail.png" medium="image" type="image/png" height="82" width="144"/>
</item>
</channel>
</rss>
